[
  {
    "tags": {},
    "filePath": "src/AreaChart/AreaChart.tsx",
    "description": "",
    "displayName": "AreaChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartDataShape[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the area/line/circles components.",
        "name": "series",
        "parent": {
          "fileName": "src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<AreaSeriesProps, FC<Partial<AreaSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "zoomPan": {
        "defaultValue": null,
        "description": "The chart's zoom pan component.",
        "name": "zoomPan",
        "parent": {
          "fileName": "src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartZoomPanProps, FC<Partial<ChartZoomPanProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/AreaChart/StackedAreaChart.tsx",
    "description": "",
    "displayName": "StackedAreaChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/AreaChart/StackedAreaChart.tsx",
          "name": "StackedAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/StackedAreaChart.tsx",
            "name": "StackedAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartNestedDataShape[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the area/line/circles components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<AreaSeriesProps, FC<Partial<AreaSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "zoomPan": {
        "defaultValue": null,
        "description": "The chart's zoom pan component.",
        "name": "zoomPan",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartZoomPanProps, FC<Partial<ChartZoomPanProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/AreaChart/StackedNormalizedAreaChart.tsx",
    "description": "",
    "displayName": "StackedNormalizedAreaChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/AreaChart/StackedNormalizedAreaChart.tsx",
          "name": "StackedNormalizedAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/StackedNormalizedAreaChart.tsx",
            "name": "StackedNormalizedAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartNestedDataShape[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the area/line/circles components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<AreaSeriesProps, FC<Partial<AreaSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "zoomPan": {
        "defaultValue": null,
        "description": "The chart's zoom pan component.",
        "name": "zoomPan",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartZoomPanProps, FC<Partial<ChartZoomPanProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/BarChart.tsx",
    "description": "",
    "displayName": "BarChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartDataShape[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the bar components.",
        "name": "series",
        "parent": {
          "fileName": "src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarSeriesProps, FC<Partial<BarSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/HistogramBarChart.tsx",
    "description": "",
    "displayName": "HistogramBarChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/BarChart/HistogramBarChart.tsx",
          "name": "HistogramBarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/HistogramBarChart.tsx",
            "name": "HistogramBarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the bar components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarSeriesProps, FC<Partial<BarSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/MarimekkoChart.tsx",
    "description": "",
    "displayName": "MarimekkoChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/BarChart/MarimekkoChart.tsx",
          "name": "MarimekkoChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/MarimekkoChart.tsx",
            "name": "MarimekkoChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartNestedDataShape[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the bar components.",
        "name": "series",
        "parent": {
          "fileName": "src/BarChart/MarimekkoChart.tsx",
          "name": "MarimekkoChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/MarimekkoChart.tsx",
            "name": "MarimekkoChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarSeriesProps, FC<Partial<BarSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/StackedBarChart.tsx",
    "description": "",
    "displayName": "StackedBarChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/BarChart/StackedBarChart.tsx",
          "name": "StackedBarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/StackedBarChart.tsx",
            "name": "StackedBarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartNestedDataShape[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the bar components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarSeriesProps, FC<Partial<BarSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/StackedNormalizedBarChart.tsx",
    "description": "",
    "displayName": "StackedNormalizedBarChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/BarChart/StackedNormalizedBarChart.tsx",
          "name": "StackedNormalizedBarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/StackedNormalizedBarChart.tsx",
            "name": "StackedNormalizedBarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartNestedDataShape[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the bar components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarSeriesProps, FC<Partial<BarSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarList/BarList.tsx",
    "description": "",
    "displayName": "BarList",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "ID for the chart.",
        "name": "id",
        "parent": {
          "fileName": "src/BarList/BarList.tsx",
          "name": "BarListProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarList.tsx",
            "name": "BarListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS Classname for the element.",
        "name": "className",
        "parent": {
          "fileName": "src/BarList/BarList.tsx",
          "name": "BarListProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarList.tsx",
            "name": "BarListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Style for the element.",
        "name": "style",
        "parent": {
          "fileName": "src/BarList/BarList.tsx",
          "name": "BarListProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarList.tsx",
            "name": "BarListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "data": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Data for the chart.",
        "name": "data",
        "parent": {
          "fileName": "src/BarList/BarList.tsx",
          "name": "BarListProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarList.tsx",
            "name": "BarListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "sortDirection": {
        "defaultValue": {
          "value": "desc"
        },
        "description": "Sort direction of the data.",
        "name": "sortDirection",
        "parent": {
          "fileName": "src/BarList/BarList.tsx",
          "name": "BarListProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarList.tsx",
            "name": "BarListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"asc\" | \"desc\" | \"none\""
        }
      },
      "series": {
        "defaultValue": {
          "value": "<BarListSeries />"
        },
        "description": "Series to render.",
        "name": "series",
        "parent": {
          "fileName": "src/BarList/BarList.tsx",
          "name": "BarListProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarList.tsx",
            "name": "BarListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarListSeriesProps, FC<BarListProps>>"
        }
      },
      "type": {
        "defaultValue": {
          "value": "count"
        },
        "description": "Whether the values are percentages or absolute values.\nIn the latter case, the chart would be relative",
        "name": "type",
        "parent": {
          "fileName": "src/BarList/BarList.tsx",
          "name": "BarListProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarList.tsx",
            "name": "BarListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"percent\" | \"count\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarList/BarListSeries.tsx",
    "description": "",
    "displayName": "BarListSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data for the chart.",
        "name": "data",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "colorScheme": {
        "defaultValue": {
          "value": "cybertron"
        },
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "labelPosition": {
        "defaultValue": {
          "value": "top"
        },
        "description": "The label position.",
        "name": "labelPosition",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarListLabelPosition"
        }
      },
      "valuePosition": {
        "defaultValue": {
          "value": "none"
        },
        "description": "The value position.",
        "name": "valuePosition",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarListLabelPosition"
        }
      },
      "itemClassName": {
        "defaultValue": null,
        "description": "The bar item class name.",
        "name": "itemClassName",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Label css class name.",
        "name": "labelClassName",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "valueClassName": {
        "defaultValue": null,
        "description": "Label value class name.",
        "name": "valueClassName",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "barClassName": {
        "defaultValue": null,
        "description": "Bar component class name.",
        "name": "barClassName",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "outerBarClassName": {
        "defaultValue": null,
        "description": "Bar container class name.",
        "name": "outerBarClassName",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelFormat": {
        "defaultValue": null,
        "description": "Custom label format.",
        "name": "labelFormat",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartInternalDataTypes, index: number) => any"
        }
      },
      "valueFormat": {
        "defaultValue": null,
        "description": "Custom value format",
        "name": "valueFormat",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartInternalDataTypes, index: number) => any"
        }
      },
      "onItemClick": {
        "defaultValue": null,
        "description": "Item was clicked.",
        "name": "onItemClick",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>) => void"
        }
      },
      "onItemMouseEnter": {
        "defaultValue": null,
        "description": "Item had mouse enter.",
        "name": "onItemMouseEnter",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>) => void"
        }
      },
      "onItemMouseLeave": {
        "defaultValue": null,
        "description": "Item had mouse leave.",
        "name": "onItemMouseLeave",
        "parent": {
          "fileName": "src/BarList/BarListSeries.tsx",
          "name": "BarListSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarList/BarListSeries.tsx",
            "name": "BarListSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BubbleChart/Bubble.tsx",
    "description": "",
    "displayName": "Bubble",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by d3",
        "name": "data",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "HierarchyCircularNode<any>"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill for the bubble.",
        "name": "fill",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<ChartTooltip />"
        },
        "description": "Tooltip element.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "mask": {
        "defaultValue": null,
        "description": "Mask element for the bubble.",
        "name": "mask",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<MaskProps, FC<MaskProps>>"
        }
      },
      "glow": {
        "defaultValue": null,
        "description": "Glow styling for the bubble.",
        "name": "glow",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Glow"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient shades for the bubble.",
        "name": "gradient",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when the bubble is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<SVGCircleElement, MouseEvent>, currentItem?: HierarchyCircularNode<any>) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the mouse enters bubble.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the mouse leaves the bubble.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/BubbleChart/Bubble.tsx",
          "name": "BubbleProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/Bubble.tsx",
            "name": "BubbleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BubbleChart/BubbleChart.tsx",
    "description": "",
    "displayName": "BubbleChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/BubbleChart/BubbleChart.tsx",
          "name": "BubbleChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleChart.tsx",
            "name": "BubbleChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<BubbleSeries />"
        },
        "description": "The series component that renders the arc components.",
        "name": "series",
        "parent": {
          "fileName": "src/BubbleChart/BubbleChart.tsx",
          "name": "BubbleChartProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleChart.tsx",
            "name": "BubbleChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BubbleSeriesProps, FC<Partial<BubbleSeriesProps>>>"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": {
          "value": "10"
        },
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BubbleChart/BubbleLabel.tsx",
    "description": "",
    "displayName": "BubbleLabel",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/BubbleChart/BubbleLabel.tsx",
          "name": "BubbleLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleLabel.tsx",
            "name": "BubbleLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by d3",
        "name": "data",
        "parent": {
          "fileName": "src/BubbleChart/BubbleLabel.tsx",
          "name": "BubbleLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleLabel.tsx",
            "name": "BubbleLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "HierarchyCircularNode<any>"
        }
      },
      "fontSize": {
        "defaultValue": {
          "value": "14"
        },
        "description": "Font size of the text.",
        "name": "fontSize",
        "parent": {
          "fileName": "src/BubbleChart/BubbleLabel.tsx",
          "name": "BubbleLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleLabel.tsx",
            "name": "BubbleLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": {
          "value": "sans-serif"
        },
        "description": "Font family of the text.",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/BubbleChart/BubbleLabel.tsx",
          "name": "BubbleLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleLabel.tsx",
            "name": "BubbleLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill of the text.",
        "name": "fill",
        "parent": {
          "fileName": "src/BubbleChart/BubbleLabel.tsx",
          "name": "BubbleLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleLabel.tsx",
            "name": "BubbleLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "wrap": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Should wrap text or not.",
        "name": "wrap",
        "parent": {
          "fileName": "src/BubbleChart/BubbleLabel.tsx",
          "name": "BubbleLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleLabel.tsx",
            "name": "BubbleLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/BubbleChart/BubbleLabel.tsx",
          "name": "BubbleLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleLabel.tsx",
            "name": "BubbleLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Format label.",
        "name": "format",
        "parent": {
          "fileName": "src/BubbleChart/BubbleLabel.tsx",
          "name": "BubbleLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleLabel.tsx",
            "name": "BubbleLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: any) => any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BubbleChart/BubbleSeries.tsx",
    "description": "",
    "displayName": "BubbleSeries",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/BubbleChart/BubbleSeries.tsx",
          "name": "BubbleSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleSeries.tsx",
            "name": "BubbleSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by d3",
        "name": "data",
        "parent": {
          "fileName": "src/BubbleChart/BubbleSeries.tsx",
          "name": "BubbleSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleSeries.tsx",
            "name": "BubbleSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "HierarchyCircularNode<any>[]"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/BubbleChart/BubbleSeries.tsx",
          "name": "BubbleSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleSeries.tsx",
            "name": "BubbleSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "colorScheme": {
        "defaultValue": {
          "value": "cybertron"
        },
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/BubbleChart/BubbleSeries.tsx",
          "name": "BubbleSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleSeries.tsx",
            "name": "BubbleSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "bubble": {
        "defaultValue": {
          "value": "<Bubble />"
        },
        "description": "Bubble element.",
        "name": "bubble",
        "parent": {
          "fileName": "src/BubbleChart/BubbleSeries.tsx",
          "name": "BubbleSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleSeries.tsx",
            "name": "BubbleSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BubbleProps, FC<Partial<BubbleProps>>>"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Bubble element.",
        "name": "format",
        "parent": {
          "fileName": "src/BubbleChart/BubbleSeries.tsx",
          "name": "BubbleSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleSeries.tsx",
            "name": "BubbleSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(item: any) => ReactElement<BubbleProps, FC<Partial<BubbleProps>>>"
        }
      },
      "label": {
        "defaultValue": {
          "value": "<BubbleLabel />"
        },
        "description": "Label element.",
        "name": "label",
        "parent": {
          "fileName": "src/BubbleChart/BubbleSeries.tsx",
          "name": "BubbleSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BubbleChart/BubbleSeries.tsx",
            "name": "BubbleSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BubbleLabelProps, FC<Partial<BubbleLabelProps>>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelChart.tsx",
    "description": "",
    "displayName": "FunnelChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Chart shape used to render the funnel.",
        "name": "data",
        "parent": {
          "fileName": "src/FunnelChart/FunnelChart.tsx",
          "name": "FunnelChartProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelChart.tsx",
            "name": "FunnelChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<FunnelSeries />"
        },
        "description": "The series component that renders the funnel components.",
        "name": "series",
        "parent": {
          "fileName": "src/FunnelChart/FunnelChart.tsx",
          "name": "FunnelChartProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelChart.tsx",
            "name": "FunnelChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<FunnelSeriesProps, FC<Partial<FunnelSeriesProps>>>"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Heatmap/CalendarHeatmap.tsx",
    "description": "",
    "displayName": "CalendarHeatmap",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Chart data shape.",
        "name": "data",
        "parent": {
          "fileName": "src/Heatmap/CalendarHeatmap.tsx",
          "name": "CalendarHeatmapProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/CalendarHeatmap.tsx",
            "name": "CalendarHeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the component.",
        "name": "height",
        "parent": {
          "fileName": "src/Heatmap/CalendarHeatmap.tsx",
          "name": "CalendarHeatmapProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/CalendarHeatmap.tsx",
            "name": "CalendarHeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the component.",
        "name": "width",
        "parent": {
          "fileName": "src/Heatmap/CalendarHeatmap.tsx",
          "name": "CalendarHeatmapProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/CalendarHeatmap.tsx",
            "name": "CalendarHeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "view": {
        "defaultValue": {
          "value": "year"
        },
        "description": "View of the calendar renderer.",
        "name": "view",
        "parent": {
          "fileName": "src/Heatmap/CalendarHeatmap.tsx",
          "name": "CalendarHeatmapProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/CalendarHeatmap.tsx",
            "name": "CalendarHeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalendarView"
        }
      },
      "series": {
        "defaultValue": {
          "value": "(\n    <HeatmapSeries\n      padding={0.3}\n      emptyColor=\"transparent\"\n      cell={\n        <HeatmapCell\n          tooltip={\n            <ChartTooltip\n              content={(d) =>\n                `${formatValue(d.data.metadata.date)} ∙ ${formatValue(\n                  d.data.value\n                )}`\n              }\n            />\n          }\n        />\n      }\n    />\n  )"
        },
        "description": "The series component that renders the cell components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/Heatmap/Heatmap.tsx",
          "name": "HeatmapProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/Heatmap/Heatmap.tsx",
            "name": "HeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<HeatmapSeriesProps, FC<Partial<HeatmapSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/Heatmap/Heatmap.tsx",
          "name": "HeatmapProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/Heatmap/Heatmap.tsx",
            "name": "HeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/Heatmap/Heatmap.tsx",
          "name": "HeatmapProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/Heatmap/Heatmap.tsx",
            "name": "HeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/Heatmap/Heatmap.tsx",
          "name": "HeatmapProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/Heatmap/Heatmap.tsx",
            "name": "HeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Heatmap/Heatmap.tsx",
    "description": "",
    "displayName": "Heatmap",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/Heatmap/Heatmap.tsx",
          "name": "HeatmapProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/Heatmap.tsx",
            "name": "HeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartNestedDataShape[]"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<HeatmapSeries padding={0.3} />"
        },
        "description": "The series component that renders the cell components.",
        "name": "series",
        "parent": {
          "fileName": "src/Heatmap/Heatmap.tsx",
          "name": "HeatmapProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/Heatmap.tsx",
            "name": "HeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<HeatmapSeriesProps, FC<Partial<HeatmapSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": {
          "value": "(\n    <LinearYAxis\n      type=\"category\"\n      axisLine={null}\n      tickSeries={\n        <LinearYAxisTickSeries\n          line={null}\n          label={\n            <LinearYAxisTickLabel\n              {...LINEAR_Y_AXIS_TICK_LABEL_DEFAULT_PROPS}\n              padding={5}\n            />\n          }\n        />\n      }\n    />\n  )"
        },
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "src/Heatmap/Heatmap.tsx",
          "name": "HeatmapProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/Heatmap.tsx",
            "name": "HeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": {
          "value": "(\n    <LinearXAxis\n      type=\"category\"\n      axisLine={null}\n      tickSeries={\n        <LinearXAxisTickSeries\n          line={null}\n          label={\n            <LinearXAxisTickLabel\n              {...LINEAR_X_AXIS_TICK_LABEL_DEFAULT_PROPS}\n              padding={5}\n            />\n          }\n        />\n      }\n    />\n  )"
        },
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "src/Heatmap/Heatmap.tsx",
          "name": "HeatmapProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/Heatmap.tsx",
            "name": "HeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "src/Heatmap/Heatmap.tsx",
          "name": "HeatmapProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/Heatmap.tsx",
            "name": "HeatmapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": {
          "value": "10"
        },
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/LineChart/LineChart.tsx",
    "description": "",
    "displayName": "LineChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartDataShape[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the area/line/circles components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<AreaSeriesProps, FC<Partial<AreaSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "zoomPan": {
        "defaultValue": null,
        "description": "The chart's zoom pan component.",
        "name": "zoomPan",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartZoomPanProps, FC<Partial<ChartZoomPanProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/LineChart/LineSeries.tsx",
    "description": "",
    "displayName": "LineSeries",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `AreaChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `AreaChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `AreaChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `AreaChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `AreaChart`.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `AreaChart`.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of area chart to render.",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AreaChartTypes"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "Interpolation type for the area/line.",
        "name": "interpolation",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InterpolationTypes"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "markLine": {
        "defaultValue": null,
        "description": "Markline for the chart.",
        "name": "markLine",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<MarkLineProps, FC<Partial<MarkLineProps>>>"
        }
      },
      "symbols": {
        "defaultValue": null,
        "description": "Symbols used to show points.",
        "name": "symbols",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<PointSeriesProps, FC<Partial<PointSeriesProps>>>"
        }
      },
      "line": {
        "defaultValue": null,
        "description": "Line that is rendered.",
        "name": "line",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LineProps, FC<Partial<LineProps>>>"
        }
      },
      "area": {
        "defaultValue": null,
        "description": "Area that is rendered.",
        "name": "area",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<AreaProps, FC<Partial<AreaProps>>>"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the series.",
        "name": "colorScheme",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "isZoomed": {
        "defaultValue": null,
        "description": "Whether the chart has been zoomed or not. Set internally by `AreaChart`.",
        "name": "isZoomed",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/LinearGauge/LinearGauge.tsx",
    "description": "",
    "displayName": "LinearGauge",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/LinearGauge/LinearGauge.tsx",
          "name": "LinearGaugeProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGauge.tsx",
            "name": "LinearGaugeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]> | ChartShallowDataShape<ChartDataTypes | [...]>[]"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<LinearGaugeSeries />"
        },
        "description": "The series component that renders the bar components.",
        "name": "series",
        "parent": {
          "fileName": "src/LinearGauge/LinearGauge.tsx",
          "name": "LinearGaugeProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGauge.tsx",
            "name": "LinearGaugeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearGaugeSeriesProps, FC<Partial<LinearGaugeSeriesProps>>>"
        }
      },
      "minValue": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Min value to scale on. Only applicable for single-series.",
        "name": "minValue",
        "parent": {
          "fileName": "src/LinearGauge/LinearGauge.tsx",
          "name": "LinearGaugeProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGauge.tsx",
            "name": "LinearGaugeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "maxValue": {
        "defaultValue": {
          "value": "100"
        },
        "description": "Max value to scale on. Only applicable for single-series.",
        "name": "maxValue",
        "parent": {
          "fileName": "src/LinearGauge/LinearGauge.tsx",
          "name": "LinearGaugeProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGauge.tsx",
            "name": "LinearGaugeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/LinearGauge/LinearGaugeBar.tsx",
    "description": "",
    "displayName": "LinearGaugeBar",
    "methods": [],
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Whether the bar is active or not.",
        "name": "active",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "activeBrightness": {
        "defaultValue": null,
        "description": "Chroma brightness factor to brighten the active bar. See\nhttps://gka.github.io/chroma.js/#color-brighten for more info.",
        "name": "activeBrightness",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `BarChart`.",
        "name": "xScale",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `BarChart`.",
        "name": "yScale",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale1": {
        "defaultValue": null,
        "description": "D3 scale for X Multi-Group Axis. Set internally by `BarChart`.",
        "name": "xScale1",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `BarChart`.",
        "name": "data",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `BarChart`.",
        "name": "id",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient shades for the bar.",
        "name": "gradient",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "rx": {
        "defaultValue": null,
        "description": "SVG rx attribute for the bar.",
        "name": "rx",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "ry": {
        "defaultValue": null,
        "description": "SVG ry attribute for the bar.",
        "name": "ry",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the bar. Set internally by `BarSeries`.",
        "name": "width",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Padding for the bar groups.",
        "name": "padding",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "barCount": {
        "defaultValue": null,
        "description": "Total number of bars used for animation. Set internally by `BarSeries`.",
        "name": "barCount",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color callback for the bar.",
        "name": "color",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "cursor": {
        "defaultValue": null,
        "description": "Cursor for the bar element.",
        "name": "cursor",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "barIndex": {
        "defaultValue": null,
        "description": "Index of the bar. Set internally by `BarSeries`.",
        "name": "barIndex",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "groupIndex": {
        "defaultValue": null,
        "description": "Index of the group. Set internally by `BarSeries`.",
        "name": "groupIndex",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit. Set internally by `BarSeries`.",
        "name": "animated",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isCategorical": {
        "defaultValue": null,
        "description": "Whether this is categorical chart or not. Set internally by `BarSeries`.",
        "name": "isCategorical",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rangeLines": {
        "defaultValue": null,
        "description": "Rangelines element. for the bar.",
        "name": "rangeLines",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RangeLinesProps, FC<Partial<RangeLinesProps>>>"
        }
      },
      "mask": {
        "defaultValue": null,
        "description": "Mask element for the bar.",
        "name": "mask",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<MaskProps, FC<MaskProps>>"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip element.",
        "name": "tooltip",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "layout": {
        "defaultValue": null,
        "description": "Direction of the chart. Set internally by `BarSeries`.",
        "name": "layout",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Direction"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of bar chart. Set internally by `BarSeries`.",
        "name": "type",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "BarType"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label element.",
        "name": "label",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarLabelProps, FC<Partial<BarLabelProps>>>"
        }
      },
      "guide": {
        "defaultValue": null,
        "description": "Guide bar component.",
        "name": "guide",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GuideBarProps, FC<Partial<GuideBarProps>>>"
        }
      },
      "minHeight": {
        "defaultValue": null,
        "description": "Force a min height on the bar.",
        "name": "minHeight",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "glow": {
        "defaultValue": null,
        "description": "Glow styling for the bar.",
        "name": "glow",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Glow"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when the bar is clicked.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ClickEvent) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the bar has mouse enter.",
        "name": "onMouseEnter",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the bar has mouse leave.",
        "name": "onMouseLeave",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseMove": {
        "defaultValue": null,
        "description": "Event for when a bar has mouse move.",
        "name": "onMouseMove",
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames to apply to the element.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS styles to apply to the element.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/LinearGauge/LinearGaugeOuterBar.tsx",
    "description": "",
    "displayName": "LinearGaugeOuterBar",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set by `LinearGauge` component.",
        "name": "height",
        "parent": {
          "fileName": "src/LinearGauge/LinearGaugeOuterBar.tsx",
          "name": "LinearGaugeOuterBarProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGaugeOuterBar.tsx",
            "name": "LinearGaugeOuterBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set by `LinearGauge` component.",
        "name": "width",
        "parent": {
          "fileName": "src/LinearGauge/LinearGaugeOuterBar.tsx",
          "name": "LinearGaugeOuterBarProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGaugeOuterBar.tsx",
            "name": "LinearGaugeOuterBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "#484848"
        },
        "description": "Fill for the bar element.",
        "name": "fill",
        "parent": {
          "fileName": "src/LinearGauge/LinearGaugeOuterBar.tsx",
          "name": "LinearGaugeOuterBarProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGaugeOuterBar.tsx",
            "name": "LinearGaugeOuterBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "x": {
        "defaultValue": null,
        "description": "",
        "name": "x",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRect"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRect"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y": {
        "defaultValue": null,
        "description": "",
        "name": "y",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRect"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRect"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "bottom": {
        "defaultValue": null,
        "description": "",
        "name": "bottom",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRectReadOnly"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRectReadOnly"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "left": {
        "defaultValue": null,
        "description": "",
        "name": "left",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRectReadOnly"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRectReadOnly"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "right": {
        "defaultValue": null,
        "description": "",
        "name": "right",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRectReadOnly"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRectReadOnly"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "top": {
        "defaultValue": null,
        "description": "",
        "name": "top",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRectReadOnly"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRectReadOnly"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "toJSON": {
        "defaultValue": null,
        "description": "",
        "name": "toJSON",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRectReadOnly"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRectReadOnly"
          }
        ],
        "required": false,
        "type": {
          "name": "() => any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/LinearGauge/LinearGaugeSeries.tsx",
    "description": "",
    "displayName": "LinearGaugeSeries",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set by `LinearGauge` component.",
        "name": "height",
        "parent": {
          "fileName": "src/LinearGauge/LinearGaugeSeries.tsx",
          "name": "LinearGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGaugeSeries.tsx",
            "name": "LinearGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set by `LinearGauge` component.",
        "name": "width",
        "parent": {
          "fileName": "src/LinearGauge/LinearGaugeSeries.tsx",
          "name": "LinearGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGaugeSeries.tsx",
            "name": "LinearGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isMultiSeries": {
        "defaultValue": null,
        "description": "Whether its a multi-series or not. Set by `LinearGauge` component.",
        "name": "isMultiSeries",
        "parent": {
          "fileName": "src/LinearGauge/LinearGaugeSeries.tsx",
          "name": "LinearGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGaugeSeries.tsx",
            "name": "LinearGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "bar": {
        "defaultValue": {
          "value": "<LinearGaugeBar />"
        },
        "description": "Bar element. Only applicable for single series.",
        "name": "bar",
        "parent": {
          "fileName": "src/LinearGauge/LinearGaugeSeries.tsx",
          "name": "LinearGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGaugeSeries.tsx",
            "name": "LinearGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarProps, FC<Partial<BarProps>>>"
        }
      },
      "outerBar": {
        "defaultValue": {
          "value": "<LinearGaugeOuterBar />"
        },
        "description": "Outer bar element. Only applicable for single series.",
        "name": "outerBar",
        "parent": {
          "fileName": "src/LinearGauge/LinearGaugeSeries.tsx",
          "name": "LinearGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/LinearGauge/LinearGaugeSeries.tsx",
            "name": "LinearGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearGaugeOuterBarProps, FC<Partial<LinearGaugeOuterBarProps>>>"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `BarChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the bar chart. Set internally by `BarChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `BarChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `BarChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale1": {
        "defaultValue": null,
        "description": "D3 scale for X Multi-Group Axis. Set internally by `BarChart`.",
        "name": "xScale1",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of the chart.",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarType"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Amount of padding between each bar.",
        "name": "padding",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "groupPadding": {
        "defaultValue": null,
        "description": "Amount of padding between each group.",
        "name": "groupPadding",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isCategorical": {
        "defaultValue": null,
        "description": "Whether the chart is categorical or not. Set internally by `BarChart`.",
        "name": "isCategorical",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "layout": {
        "defaultValue": null,
        "description": "Direction of the chart",
        "name": "layout",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Direction"
        }
      },
      "binSize": {
        "defaultValue": null,
        "description": "The size of each bin/bucket in the bar chart.",
        "name": "binSize",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Map/Map.tsx",
    "description": "",
    "displayName": "Map",
    "methods": [],
    "props": {
      "markers": {
        "defaultValue": null,
        "description": "",
        "name": "markers",
        "parent": {
          "fileName": "src/Map/Map.tsx",
          "name": "MapProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/Map.tsx",
            "name": "MapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "MarkerElement[]"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "parent": {
          "fileName": "src/Map/Map.tsx",
          "name": "MapProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/Map.tsx",
            "name": "MapProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "rgba(255, 255, 255, 0.3)"
        },
        "description": "",
        "name": "fill",
        "parent": {
          "fileName": "src/Map/Map.tsx",
          "name": "MapProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/Map.tsx",
            "name": "MapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "projection": {
        "defaultValue": {
          "value": "mercator"
        },
        "description": "Determines how the map transforms spherical geometry to planar geometry",
        "name": "projection",
        "parent": {
          "fileName": "src/Map/Map.tsx",
          "name": "MapProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/Map.tsx",
            "name": "MapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"mercator\" | \"natural-earth\""
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Map/MapMarker.tsx",
    "description": "",
    "displayName": "MapMarker",
    "methods": [],
    "props": {
      "coordinates": {
        "defaultValue": null,
        "description": "",
        "name": "coordinates",
        "parent": {
          "fileName": "src/Map/MapMarker.tsx",
          "name": "MapMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/MapMarker.tsx",
            "name": "MapMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "[number, number]"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "",
        "name": "index",
        "parent": {
          "fileName": "src/Map/MapMarker.tsx",
          "name": "MapMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/MapMarker.tsx",
            "name": "MapMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "cy": {
        "defaultValue": null,
        "description": "",
        "name": "cy",
        "parent": {
          "fileName": "src/Map/MapMarker.tsx",
          "name": "MapMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/MapMarker.tsx",
            "name": "MapMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "cx": {
        "defaultValue": null,
        "description": "",
        "name": "cx",
        "parent": {
          "fileName": "src/Map/MapMarker.tsx",
          "name": "MapMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/MapMarker.tsx",
            "name": "MapMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": {
          "value": "3"
        },
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "src/Map/MapMarker.tsx",
          "name": "MapMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/MapMarker.tsx",
            "name": "MapMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "",
        "name": "tooltip",
        "parent": {
          "fileName": "src/Map/MapMarker.tsx",
          "name": "MapMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/MapMarker.tsx",
            "name": "MapMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "onClick": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onClick",
        "parent": {
          "fileName": "src/Map/MapMarker.tsx",
          "name": "MapMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/Map/MapMarker.tsx",
            "name": "MapMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Meter/Meter.tsx",
    "description": "",
    "displayName": "Meter",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The value of the meter.",
        "name": "value",
        "parent": {
          "fileName": "src/Meter/Meter.tsx",
          "name": "MeterProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/Meter.tsx",
            "name": "MeterProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "min": {
        "defaultValue": {
          "value": "0"
        },
        "description": "The minimum value of the meter.",
        "name": "min",
        "parent": {
          "fileName": "src/Meter/Meter.tsx",
          "name": "MeterProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/Meter.tsx",
            "name": "MeterProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "max": {
        "defaultValue": {
          "value": "100"
        },
        "description": "The maximum value of the meter.",
        "name": "max",
        "parent": {
          "fileName": "src/Meter/Meter.tsx",
          "name": "MeterProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/Meter.tsx",
            "name": "MeterProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "columns": {
        "defaultValue": {
          "value": "10"
        },
        "description": "The number of columns to display.",
        "name": "columns",
        "parent": {
          "fileName": "src/Meter/Meter.tsx",
          "name": "MeterProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/Meter.tsx",
            "name": "MeterProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class names to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/Meter/Meter.tsx",
          "name": "MeterProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/Meter.tsx",
            "name": "MeterProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "gap": {
        "defaultValue": {
          "value": "15"
        },
        "description": "The gap between columns.",
        "name": "gap",
        "parent": {
          "fileName": "src/Meter/Meter.tsx",
          "name": "MeterProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/Meter.tsx",
            "name": "MeterProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "style": {
        "defaultValue": {
          "value": "{}"
        },
        "description": "Additional styles to apply.",
        "name": "style",
        "parent": {
          "fileName": "src/Meter/Meter.tsx",
          "name": "MeterProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/Meter.tsx",
            "name": "MeterProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "column": {
        "defaultValue": {
          "value": "<MeterColumn />"
        },
        "description": "The column to render.",
        "name": "column",
        "parent": {
          "fileName": "src/Meter/Meter.tsx",
          "name": "MeterProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/Meter.tsx",
            "name": "MeterProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<MeterColumnProps, FC<Partial<MeterColumnProps>>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Meter/MeterColumn.tsx",
    "description": "",
    "displayName": "MeterColumn",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The value of the meter.",
        "name": "value",
        "parent": {
          "fileName": "src/Meter/MeterColumn.tsx",
          "name": "MeterColumnProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/MeterColumn.tsx",
            "name": "MeterColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": {
          "value": "32"
        },
        "description": "The height of the column.",
        "name": "height",
        "parent": {
          "fileName": "src/Meter/MeterColumn.tsx",
          "name": "MeterColumnProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/MeterColumn.tsx",
            "name": "MeterColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "The index of the column.",
        "name": "index",
        "parent": {
          "fileName": "src/Meter/MeterColumn.tsx",
          "name": "MeterColumnProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/MeterColumn.tsx",
            "name": "MeterColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "The scale to use.",
        "name": "scale",
        "parent": {
          "fileName": "src/Meter/MeterColumn.tsx",
          "name": "MeterColumnProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/MeterColumn.tsx",
            "name": "MeterColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "activeFill": {
        "defaultValue": {
          "value": "schemes.cybertron[0]"
        },
        "description": "The active fill color.",
        "name": "activeFill",
        "parent": {
          "fileName": "src/Meter/MeterColumn.tsx",
          "name": "MeterColumnProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/MeterColumn.tsx",
            "name": "MeterColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inActiveFill": {
        "defaultValue": {
          "value": "#414242"
        },
        "description": "The inactive fill color.",
        "name": "inActiveFill",
        "parent": {
          "fileName": "src/Meter/MeterColumn.tsx",
          "name": "MeterColumnProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/MeterColumn.tsx",
            "name": "MeterColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class names to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/Meter/MeterColumn.tsx",
          "name": "MeterColumnProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/MeterColumn.tsx",
            "name": "MeterColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "count": {
        "defaultValue": null,
        "description": "The total number of columns. Set internally.",
        "name": "count",
        "parent": {
          "fileName": "src/Meter/MeterColumn.tsx",
          "name": "MeterColumnProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/MeterColumn.tsx",
            "name": "MeterColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to animate the column.",
        "name": "animated",
        "parent": {
          "fileName": "src/Meter/MeterColumn.tsx",
          "name": "MeterColumnProps"
        },
        "declarations": [
          {
            "fileName": "src/Meter/MeterColumn.tsx",
            "name": "MeterColumnProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/PieChart/PieChart.tsx",
    "description": "",
    "displayName": "PieChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/PieChart/PieChart.tsx",
          "name": "PieChartProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieChart.tsx",
            "name": "PieChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the chart is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/PieChart/PieChart.tsx",
          "name": "PieChartProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieChart.tsx",
            "name": "PieChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "displayAllLabels": {
        "defaultValue": null,
        "description": "Whether to display labels even if their value has a small display radius.",
        "name": "displayAllLabels",
        "parent": {
          "fileName": "src/PieChart/PieChart.tsx",
          "name": "PieChartProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieChart.tsx",
            "name": "PieChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<PieArcSeries />"
        },
        "description": "The series component that renders the arc components.",
        "name": "series",
        "parent": {
          "fileName": "src/PieChart/PieChart.tsx",
          "name": "PieChartProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieChart.tsx",
            "name": "PieChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<PieArcSeriesProps, FC<Partial<PieArcSeriesProps>>>"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": {
          "value": "10"
        },
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadarChart/RadarChart.tsx",
    "description": "",
    "displayName": "RadarChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/RadarChart/RadarChart.tsx",
          "name": "RadarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadarChart/RadarChart.tsx",
            "name": "RadarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartNestedDataShape[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the area components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAreaSeriesProps, FC<Partial<RadialAreaSeriesProps>>>"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "The radial axis component for the chart.",
        "name": "innerRadius",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "axis": {
        "defaultValue": null,
        "description": "The inner radius for the chart center.",
        "name": "axis",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAxisProps, FC<Partial<RadialAxisProps>>>"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isClosedCurve": {
        "defaultValue": null,
        "description": "Whether the curve should be closed. Set to true by deafult",
        "name": "isClosedCurve",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadarChart/RadarChartSeries.tsx",
    "description": "",
    "displayName": "RadarChartSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `RadialAreaChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape[]"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "The type of the chart.",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RadialPointSeriesType"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the series.",
        "name": "colorScheme",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "The outer radius for the chart center.",
        "name": "outerRadius",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "The inner radius for the chart center.",
        "name": "innerRadius",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `RadialAreaChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `RadialAreaChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `RadialAreaChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "interpolation set internally by `RadialAreaChart`.",
        "name": "interpolation",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RadialInterpolationTypes"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `RadialAreaChart`.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `RadialAreaChart`.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "area": {
        "defaultValue": null,
        "description": "Area that is rendered.",
        "name": "area",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAreaProps, FC<Partial<RadialAreaProps>>>"
        }
      },
      "line": {
        "defaultValue": null,
        "description": "Line that is rendered.",
        "name": "line",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialLineProps, FC<Partial<RadialLineProps>>>"
        }
      },
      "symbols": {
        "defaultValue": null,
        "description": "Symbols used to show points.",
        "name": "symbols",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialPointSeriesProps, FC<Partial<RadialPointSeriesProps>>>"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isClosedCurve": {
        "defaultValue": null,
        "description": "Whether the curve should be closed. Set to true by deafult",
        "name": "isClosedCurve",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialValueMarkerProps, FC<RadialValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialAreaChart/RadialAreaChart.tsx",
    "description": "",
    "displayName": "RadialAreaChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartDataShape[]"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<RadialAreaSeries />"
        },
        "description": "The series component that renders the area components.",
        "name": "series",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAreaSeriesProps, FC<Partial<RadialAreaSeriesProps>>>"
        }
      },
      "innerRadius": {
        "defaultValue": {
          "value": "0.1"
        },
        "description": "The radial axis component for the chart.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "axis": {
        "defaultValue": {
          "value": "<RadialAxis />"
        },
        "description": "The inner radius for the chart center.",
        "name": "axis",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAxisProps, FC<Partial<RadialAxisProps>>>"
        }
      },
      "startAngle": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": {
          "value": "2 * Math.PI"
        },
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isClosedCurve": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the curve should be closed. Set to true by deafult",
        "name": "isClosedCurve",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
          "name": "RadialAreaChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaChart.tsx",
            "name": "RadialAreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": {
          "value": "75"
        },
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialBarChart/RadialBarChart.tsx",
    "description": "",
    "displayName": "RadialBarChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarChart.tsx",
          "name": "RadialBarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarChart.tsx",
            "name": "RadialBarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartDataShape[]"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<RadialBarSeries />"
        },
        "description": "The series component that renders the bar components.",
        "name": "series",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarChart.tsx",
          "name": "RadialBarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarChart.tsx",
            "name": "RadialBarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialBarSeriesProps, FC<Partial<RadialBarSeriesProps>>>"
        }
      },
      "axis": {
        "defaultValue": {
          "value": "<RadialAxis />"
        },
        "description": "The radial axis component for the chart.",
        "name": "axis",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarChart.tsx",
          "name": "RadialBarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarChart.tsx",
            "name": "RadialBarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAxisProps, FC<Partial<RadialAxisProps>>>"
        }
      },
      "innerRadius": {
        "defaultValue": {
          "value": "10"
        },
        "description": "The inner radius for the chart center.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarChart.tsx",
          "name": "RadialBarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarChart.tsx",
            "name": "RadialBarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "startAngle": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarChart.tsx",
          "name": "RadialBarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarChart.tsx",
            "name": "RadialBarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": {
          "value": "2 * Math.PI"
        },
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarChart.tsx",
          "name": "RadialBarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarChart.tsx",
            "name": "RadialBarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": {
          "value": "75"
        },
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialGauge/RadialGauge.tsx",
    "description": "",
    "displayName": "RadialGauge",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialGauge/RadialGauge.tsx",
          "name": "RadialGaugeProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGauge.tsx",
            "name": "RadialGaugeProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ChartDataShape[]"
        }
      },
      "minValue": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Min value to scale on.",
        "name": "minValue",
        "parent": {
          "fileName": "src/RadialGauge/RadialGauge.tsx",
          "name": "RadialGaugeProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGauge.tsx",
            "name": "RadialGaugeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | number[]"
        }
      },
      "maxValue": {
        "defaultValue": {
          "value": "100"
        },
        "description": "Max value to scale on.",
        "name": "maxValue",
        "parent": {
          "fileName": "src/RadialGauge/RadialGauge.tsx",
          "name": "RadialGaugeProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGauge.tsx",
            "name": "RadialGaugeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | number[]"
        }
      },
      "startAngle": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/RadialGauge/RadialGauge.tsx",
          "name": "RadialGaugeProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGauge.tsx",
            "name": "RadialGaugeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": {
          "value": "Math.PI * 2"
        },
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/RadialGauge/RadialGauge.tsx",
          "name": "RadialGaugeProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGauge.tsx",
            "name": "RadialGaugeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<RadialGaugeSeries />"
        },
        "description": "Gauge series component to render.",
        "name": "series",
        "parent": {
          "fileName": "src/RadialGauge/RadialGauge.tsx",
          "name": "RadialGaugeProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGauge.tsx",
            "name": "RadialGaugeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialGaugeSeriesProps | StackedRadialGaugeSeriesProps, FC<Partial<RadialGaugeSeriesProps>> | FC<...>>"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialScatterPlot/RadialScatterPlot.tsx",
    "description": "",
    "displayName": "RadialScatterPlot",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterPlot.tsx",
          "name": "RadialScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterPlot.tsx",
            "name": "RadialScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the scatter components.",
        "name": "series",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterPlot.tsx",
          "name": "RadialScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterPlot.tsx",
            "name": "RadialScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialScatterSeriesProps, FC<Partial<RadialScatterSeriesProps>>>"
        }
      },
      "axis": {
        "defaultValue": null,
        "description": "The radial axis component for the chart.",
        "name": "axis",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterPlot.tsx",
          "name": "RadialScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterPlot.tsx",
            "name": "RadialScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAxisProps, FC<Partial<RadialAxisProps>>>"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "The inner radius for the chart center.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterPlot.tsx",
          "name": "RadialScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterPlot.tsx",
            "name": "RadialScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Sankey/Sankey.tsx",
    "description": "",
    "displayName": "Sankey",
    "methods": [],
    "props": {
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to animate the enter/update/exit. Set internally by `SankeyNode` and `SankeyLink`.",
        "name": "animated",
        "parent": {
          "fileName": "src/Sankey/Sankey.tsx",
          "name": "SankeyProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/Sankey.tsx",
            "name": "SankeyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the nodes. Set internally by `SankeyNode`.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/Sankey/Sankey.tsx",
          "name": "SankeyProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/Sankey.tsx",
            "name": "SankeyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "justification": {
        "defaultValue": {
          "value": "justify"
        },
        "description": "The node alignment method.",
        "name": "justification",
        "parent": {
          "fileName": "src/Sankey/Sankey.tsx",
          "name": "SankeyProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/Sankey.tsx",
            "name": "SankeyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Justification"
        }
      },
      "nodeWidth": {
        "defaultValue": {
          "value": "15"
        },
        "description": "Width of the node.",
        "name": "nodeWidth",
        "parent": {
          "fileName": "src/Sankey/Sankey.tsx",
          "name": "SankeyProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/Sankey.tsx",
            "name": "SankeyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "nodePadding": {
        "defaultValue": {
          "value": "10"
        },
        "description": "Vertical padding between nodes in the same column.",
        "name": "nodePadding",
        "parent": {
          "fileName": "src/Sankey/Sankey.tsx",
          "name": "SankeyProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/Sankey.tsx",
            "name": "SankeyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "labelPosition": {
        "defaultValue": {
          "value": "inside"
        },
        "description": "Label position.",
        "name": "labelPosition",
        "parent": {
          "fileName": "src/Sankey/Sankey.tsx",
          "name": "SankeyProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/Sankey.tsx",
            "name": "SankeyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SankeyLabelPosition"
        }
      },
      "nodeSort": {
        "defaultValue": null,
        "description": "Sort function for the nodes.\n\nIf sort is specified, sets the node sort method and returns this Sankey generator.\nIf sort is not specified, returns the current node sort method, which defaults\nto undefined, indicating that vertical order of nodes within each column will\nbe determined automatically by the layout. If sort is null, the order is fixed\nby the input. Otherwise, the specified sort function determines the order;\nthe function is passed two nodes, and must return a value less than 0 if the\nfirst node should be above the second, and a value greater than 0 if the second\nnode should be above the first, or 0 if the order is not specified.\n\nReference: https://github.com/d3/d3-sankey#sankey_nodeSort",
        "name": "nodeSort",
        "parent": {
          "fileName": "src/Sankey/Sankey.tsx",
          "name": "SankeyProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/Sankey.tsx",
            "name": "SankeyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(a: any, b: any) => number"
        }
      },
      "nodes": {
        "defaultValue": null,
        "description": "Nodes that are rendered.",
        "name": "nodes",
        "parent": {
          "fileName": "src/Sankey/Sankey.tsx",
          "name": "SankeyProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/Sankey.tsx",
            "name": "SankeyProps"
          }
        ],
        "required": true,
        "type": {
          "name": "NodeElement[]"
        }
      },
      "links": {
        "defaultValue": null,
        "description": "Links that are rendered.",
        "name": "links",
        "parent": {
          "fileName": "src/Sankey/Sankey.tsx",
          "name": "SankeyProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/Sankey.tsx",
            "name": "SankeyProps"
          }
        ],
        "required": true,
        "type": {
          "name": "LinkElement[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/ScatterPlot/ScatterPlot.tsx",
    "description": "",
    "displayName": "ScatterPlot",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterPlot.tsx",
          "name": "ScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterPlot.tsx",
            "name": "ScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<ScatterSeries />"
        },
        "description": "The series component that renders the scatter components.",
        "name": "series",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterPlot.tsx",
          "name": "ScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterPlot.tsx",
            "name": "ScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ScatterSeriesProps, FC<Partial<ScatterSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": {
          "value": "<LinearYAxis type=\"value\" />"
        },
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterPlot.tsx",
          "name": "ScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterPlot.tsx",
            "name": "ScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": {
          "value": "<LinearXAxis type=\"time\" />"
        },
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterPlot.tsx",
          "name": "ScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterPlot.tsx",
            "name": "ScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": {
          "value": "<GridlineSeries />"
        },
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterPlot.tsx",
          "name": "ScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterPlot.tsx",
            "name": "ScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": {
          "value": "null"
        },
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterPlot.tsx",
          "name": "ScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterPlot.tsx",
            "name": "ScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "zoomPan": {
        "defaultValue": {
          "value": "null"
        },
        "description": "The chart's zoom pan component.",
        "name": "zoomPan",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterPlot.tsx",
          "name": "ScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterPlot.tsx",
            "name": "ScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartZoomPanProps, FC<Partial<ChartZoomPanProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterPlot.tsx",
          "name": "ScatterPlotProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterPlot.tsx",
            "name": "ScatterPlotProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Sparkline/AreaSparklineChart.tsx",
    "description": "",
    "displayName": "AreaSparklineChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/Sparkline/AreaSparklineChart.tsx",
          "name": "AreaSparklineChartProps"
        },
        "declarations": [
          {
            "fileName": "src/Sparkline/AreaSparklineChart.tsx",
            "name": "AreaSparklineChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the area/line/circles components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<AreaSeriesProps, FC<Partial<AreaSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "zoomPan": {
        "defaultValue": null,
        "description": "The chart's zoom pan component.",
        "name": "zoomPan",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartZoomPanProps, FC<Partial<ChartZoomPanProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Sparkline/BarSparklineChart.tsx",
    "description": "",
    "displayName": "BarSparklineChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/Sparkline/BarSparklineChart.tsx",
          "name": "BarSparklineChartProps"
        },
        "declarations": [
          {
            "fileName": "src/Sparkline/BarSparklineChart.tsx",
            "name": "BarSparklineChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the bar components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarSeriesProps, FC<Partial<BarSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Sparkline/SonarChart.tsx",
    "description": "",
    "displayName": "SonarChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/Sparkline/SonarChart.tsx",
          "name": "SonarChartProps"
        },
        "declarations": [
          {
            "fileName": "src/Sparkline/SonarChart.tsx",
            "name": "SonarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartNestedDataShape[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the bar components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarSeriesProps, FC<Partial<BarSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarChart.tsx",
          "name": "BarChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarChart.tsx",
            "name": "BarChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Sparkline/SparklineChart.tsx",
    "description": "",
    "displayName": "SparklineChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/Sparkline/SparklineChart.tsx",
          "name": "SparklineChartProps"
        },
        "declarations": [
          {
            "fileName": "src/Sparkline/SparklineChart.tsx",
            "name": "SparklineChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "series": {
        "defaultValue": null,
        "description": "The series component that renders the area/line/circles components.",
        "name": "series",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<AreaSeriesProps, FC<Partial<AreaSeriesProps>>>"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>"
        }
      },
      "gridlines": {
        "defaultValue": null,
        "description": "The chart's background gridlines component.",
        "name": "gridlines",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GridlineSeriesProps, FC<Partial<GridlineSeriesProps>>>"
        }
      },
      "brush": {
        "defaultValue": null,
        "description": "The chart's brush component.",
        "name": "brush",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartBrushProps, FC<Partial<ChartBrushProps>>>"
        }
      },
      "zoomPan": {
        "defaultValue": null,
        "description": "The chart's zoom pan component.",
        "name": "zoomPan",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartZoomPanProps, FC<Partial<ChartZoomPanProps>>>"
        }
      },
      "secondaryAxis": {
        "defaultValue": null,
        "description": "Any secondary axis components. Useful for multi-axis charts.",
        "name": "secondaryAxis",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
          "name": "AreaChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaChart.tsx",
            "name": "AreaChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisProps, FC<Partial<LinearAxisProps>>>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/SunburstChart/SunburstArc.tsx",
    "description": "",
    "displayName": "SunburstArc",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius of the chart. Set internally by `SunburstChart`.",
        "name": "radius",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by d3",
        "name": "data",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill color for the arc.",
        "name": "fill",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "cursor": {
        "defaultValue": {
          "value": "pointer"
        },
        "description": "Cursor for the element.",
        "name": "cursor",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<ChartTooltip />"
        },
        "description": "Tooltip element.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient shades for the bar.",
        "name": "gradient",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "The onClick handler for the arc.",
        "name": "onClick",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<Element, MouseEvent>, data: any) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the arc has mouse enter.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any, data: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the arc has mouse leave.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArc.tsx",
          "name": "SunburstArcProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArc.tsx",
            "name": "SunburstArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any, data: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/SunburstChart/SunburstArcLabel.tsx",
    "description": "",
    "displayName": "SunburstArcLabel",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
          "name": "SunburstArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
            "name": "SunburstArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by d3",
        "name": "data",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
          "name": "SunburstArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
            "name": "SunburstArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "black"
        },
        "description": "Fill color for the arc.",
        "name": "fill",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
          "name": "SunburstArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
            "name": "SunburstArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius of the chart. Set internally by `SunburstChart`.",
        "name": "radius",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
          "name": "SunburstArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
            "name": "SunburstArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontSize": {
        "defaultValue": {
          "value": "14"
        },
        "description": "Font size of the text.",
        "name": "fontSize",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
          "name": "SunburstArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
            "name": "SunburstArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": {
          "value": "sans-serif"
        },
        "description": "Font family of the text.",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
          "name": "SunburstArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
            "name": "SunburstArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
          "name": "SunburstArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstArcLabel.tsx",
            "name": "SunburstArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/SunburstChart/SunburstChart.tsx",
    "description": "",
    "displayName": "SunburstChart",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/SunburstChart/SunburstChart.tsx",
          "name": "SunburstChartProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstChart.tsx",
            "name": "SunburstChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[] | ChartNestedDataShape[]"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<SunburstSeries />"
        },
        "description": "The series component that renders the components.",
        "name": "series",
        "parent": {
          "fileName": "src/SunburstChart/SunburstChart.tsx",
          "name": "SunburstChartProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstChart.tsx",
            "name": "SunburstChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<SunburstSeriesProps, FC<Partial<SunburstSeriesProps>>>"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/SunburstChart/SunburstSeries.tsx",
    "description": "",
    "displayName": "SunburstSeries",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/SunburstChart/SunburstSeries.tsx",
          "name": "SunburstSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstSeries.tsx",
            "name": "SunburstSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by d3",
        "name": "data",
        "parent": {
          "fileName": "src/SunburstChart/SunburstSeries.tsx",
          "name": "SunburstSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstSeries.tsx",
            "name": "SunburstSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/SunburstChart/SunburstSeries.tsx",
          "name": "SunburstSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstSeries.tsx",
            "name": "SunburstSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "colorScheme": {
        "defaultValue": {
          "value": "cybertron"
        },
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/SunburstChart/SunburstSeries.tsx",
          "name": "SunburstSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstSeries.tsx",
            "name": "SunburstSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "Radius of the chart. Set internally by `SunburstChart`.",
        "name": "radius",
        "parent": {
          "fileName": "src/SunburstChart/SunburstSeries.tsx",
          "name": "SunburstSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstSeries.tsx",
            "name": "SunburstSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "arc": {
        "defaultValue": {
          "value": "<SunburstArc />"
        },
        "description": "The arc component to render.",
        "name": "arc",
        "parent": {
          "fileName": "src/SunburstChart/SunburstSeries.tsx",
          "name": "SunburstSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstSeries.tsx",
            "name": "SunburstSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<SunburstArcProps, FC<Partial<SunburstArcProps>>>"
        }
      },
      "label": {
        "defaultValue": {
          "value": "<SunburstArcLabel />"
        },
        "description": "The arc label component to render.",
        "name": "label",
        "parent": {
          "fileName": "src/SunburstChart/SunburstSeries.tsx",
          "name": "SunburstSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/SunburstChart/SunburstSeries.tsx",
            "name": "SunburstSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<SunburstArcLabelProps, FC<Partial<SunburstArcLabelProps>>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/TreeMap/TreeMap.tsx",
    "description": "",
    "displayName": "TreeMap",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/TreeMap/TreeMap.tsx",
          "name": "TreeMapProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMap.tsx",
            "name": "TreeMapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[] | ChartNestedDataShape[]"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<TreeMapSeries />"
        },
        "description": "The series component that renders the components.",
        "name": "series",
        "parent": {
          "fileName": "src/TreeMap/TreeMap.tsx",
          "name": "TreeMapProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMap.tsx",
            "name": "TreeMapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TreeMapSeriesProps, FC<Partial<TreeMapSeriesProps>>>"
        }
      },
      "paddingInner": {
        "defaultValue": {
          "value": "5"
        },
        "description": "Inner padding for the treemap. Defaults to 5.",
        "name": "paddingInner",
        "parent": {
          "fileName": "src/TreeMap/TreeMap.tsx",
          "name": "TreeMapProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMap.tsx",
            "name": "TreeMapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "paddingOuter": {
        "defaultValue": {
          "value": "5"
        },
        "description": "Outer padding for the treemap. Defaults to 5.",
        "name": "paddingOuter",
        "parent": {
          "fileName": "src/TreeMap/TreeMap.tsx",
          "name": "TreeMapProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMap.tsx",
            "name": "TreeMapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "paddingTop": {
        "defaultValue": {
          "value": "30"
        },
        "description": "Padding top for the treemap. This is used for the title\nspacing in nested situations. Defaults to 30.",
        "name": "paddingTop",
        "parent": {
          "fileName": "src/TreeMap/TreeMap.tsx",
          "name": "TreeMapProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMap.tsx",
            "name": "TreeMapProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/TreeMap/TreeMapLabel.tsx",
    "description": "",
    "displayName": "TreeMapLabel",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/TreeMap/TreeMapLabel.tsx",
          "name": "TreeMapLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapLabel.tsx",
            "name": "TreeMapLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by d3",
        "name": "data",
        "parent": {
          "fileName": "src/TreeMap/TreeMapLabel.tsx",
          "name": "TreeMapLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapLabel.tsx",
            "name": "TreeMapLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "fontSize": {
        "defaultValue": {
          "value": "14"
        },
        "description": "Font size of the text.",
        "name": "fontSize",
        "parent": {
          "fileName": "src/TreeMap/TreeMapLabel.tsx",
          "name": "TreeMapLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapLabel.tsx",
            "name": "TreeMapLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": {
          "value": "sans-serif"
        },
        "description": "Font family of the text.",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/TreeMap/TreeMapLabel.tsx",
          "name": "TreeMapLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapLabel.tsx",
            "name": "TreeMapLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "#FFF"
        },
        "description": "Fill of the text.",
        "name": "fill",
        "parent": {
          "fileName": "src/TreeMap/TreeMapLabel.tsx",
          "name": "TreeMapLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapLabel.tsx",
            "name": "TreeMapLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "wrap": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Should wrap text or not.",
        "name": "wrap",
        "parent": {
          "fileName": "src/TreeMap/TreeMapLabel.tsx",
          "name": "TreeMapLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapLabel.tsx",
            "name": "TreeMapLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "start"
        },
        "description": "Placement of the text.",
        "name": "placement",
        "parent": {
          "fileName": "src/TreeMap/TreeMapLabel.tsx",
          "name": "TreeMapLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapLabel.tsx",
            "name": "TreeMapLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"middle\" | \"end\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/TreeMap/TreeMapRect.tsx",
    "description": "",
    "displayName": "TreeMapRect",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by d3",
        "name": "data",
        "parent": {
          "fileName": "src/TreeMap/TreeMapRect.tsx",
          "name": "TreeMapRectProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapRect.tsx",
            "name": "TreeMapRectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/TreeMap/TreeMapRect.tsx",
          "name": "TreeMapRectProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapRect.tsx",
            "name": "TreeMapRectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill for the rect.",
        "name": "fill",
        "parent": {
          "fileName": "src/TreeMap/TreeMapRect.tsx",
          "name": "TreeMapRectProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapRect.tsx",
            "name": "TreeMapRectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/TreeMap/TreeMapRect.tsx",
          "name": "TreeMapRectProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapRect.tsx",
            "name": "TreeMapRectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "cursor": {
        "defaultValue": {
          "value": "pointer"
        },
        "description": "Cursor for the element.",
        "name": "cursor",
        "parent": {
          "fileName": "src/TreeMap/TreeMapRect.tsx",
          "name": "TreeMapRectProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapRect.tsx",
            "name": "TreeMapRectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<ChartTooltip />"
        },
        "description": "Tooltip element.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/TreeMap/TreeMapRect.tsx",
          "name": "TreeMapRectProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapRect.tsx",
            "name": "TreeMapRectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when the arc is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "src/TreeMap/TreeMapRect.tsx",
          "name": "TreeMapRectProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapRect.tsx",
            "name": "TreeMapRectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any, data: any) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the arc has mouse enter.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/TreeMap/TreeMapRect.tsx",
          "name": "TreeMapRectProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapRect.tsx",
            "name": "TreeMapRectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any, data: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the arc has mouse leave.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/TreeMap/TreeMapRect.tsx",
          "name": "TreeMapRectProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapRect.tsx",
            "name": "TreeMapRectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any, data: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/TreeMap/TreeMapSeries.tsx",
    "description": "",
    "displayName": "TreeMapSeries",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/TreeMap/TreeMapSeries.tsx",
          "name": "TreeMapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapSeries.tsx",
            "name": "TreeMapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by d3",
        "name": "data",
        "parent": {
          "fileName": "src/TreeMap/TreeMapSeries.tsx",
          "name": "TreeMapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapSeries.tsx",
            "name": "TreeMapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/TreeMap/TreeMapSeries.tsx",
          "name": "TreeMapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapSeries.tsx",
            "name": "TreeMapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "colorScheme": {
        "defaultValue": {
          "value": "cybertron"
        },
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/TreeMap/TreeMapSeries.tsx",
          "name": "TreeMapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapSeries.tsx",
            "name": "TreeMapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "rect": {
        "defaultValue": {
          "value": "<TreeMapRect />"
        },
        "description": "Rect element to be rendered.",
        "name": "rect",
        "parent": {
          "fileName": "src/TreeMap/TreeMapSeries.tsx",
          "name": "TreeMapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapSeries.tsx",
            "name": "TreeMapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TreeMapRectProps, FC<Partial<TreeMapRectProps>>>"
        }
      },
      "label": {
        "defaultValue": {
          "value": "<TreeMapLabel />"
        },
        "description": "Label element to be rendered.",
        "name": "label",
        "parent": {
          "fileName": "src/TreeMap/TreeMapSeries.tsx",
          "name": "TreeMapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/TreeMap/TreeMapSeries.tsx",
            "name": "TreeMapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TreeMapLabelProps, FC<Partial<TreeMapLabelProps>>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/VennDiagram/VennArc.tsx",
    "description": "",
    "displayName": "VennArc",
    "methods": [],
    "props": {
      "active": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the shape is active or not.",
        "name": "active",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill color for the arc.",
        "name": "fill",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "stroke": {
        "defaultValue": null,
        "description": "Stroke for the arc.",
        "name": "stroke",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ((data: IVennLayout<any>[], index: number, isActive: boolean, isHovered: boolean) => string)"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by venn.js",
        "name": "data",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "IVennLayout<any>"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the chart is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "strokeWidth": {
        "defaultValue": {
          "value": "3"
        },
        "description": "Stroke on the arc.",
        "name": "strokeWidth",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "initialStyle": {
        "defaultValue": {
          "value": "{ opacity: 0.6 }"
        },
        "description": "Initial style of arc.",
        "name": "initialStyle",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "activeStyle": {
        "defaultValue": {
          "value": "{ opacity: 0.8 }"
        },
        "description": "Active style of arc.",
        "name": "activeStyle",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "inactiveStyle": {
        "defaultValue": {
          "value": "{ opacity: 0.3 }"
        },
        "description": "Inactive style of arc.",
        "name": "inactiveStyle",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS Styles for the arc.",
        "name": "style",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<ChartTooltip />"
        },
        "description": "Tooltip element.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "mask": {
        "defaultValue": null,
        "description": "Mask element for the arc.",
        "name": "mask",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<MaskProps, FC<MaskProps>>"
        }
      },
      "gradient": {
        "defaultValue": {
          "value": "<Gradient />"
        },
        "description": "Gradient shades for the arc.",
        "name": "gradient",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "glow": {
        "defaultValue": null,
        "description": "Glow styling for the arc.",
        "name": "glow",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Glow"
        }
      },
      "onClick": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "Event for when the arc is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "Event for when the arc has mouse enter.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "Event for when the arc has mouse leave.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/VennDiagram/VennArc.tsx",
          "name": "VennArcProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennArc.tsx",
            "name": "VennArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/VennDiagram/VennDiagram.tsx",
    "description": "",
    "displayName": "VennDiagram",
    "methods": [],
    "props": {
      "type": {
        "defaultValue": {
          "value": "venn"
        },
        "description": "Type of the chart.",
        "name": "type",
        "parent": {
          "fileName": "src/VennDiagram/VennDiagram.tsx",
          "name": "VennDiagramProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennDiagram.tsx",
            "name": "VennDiagramProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"venn\" | \"euler\" | \"starEuler\""
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data the chart will receive to render.",
        "name": "data",
        "parent": {
          "fileName": "src/VennDiagram/VennDiagram.tsx",
          "name": "VennDiagramProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennDiagram.tsx",
            "name": "VennDiagramProps"
          }
        ],
        "required": true,
        "type": {
          "name": "VennDiagramData[]"
        }
      },
      "series": {
        "defaultValue": {
          "value": "<VennSeries />"
        },
        "description": "The series component that renders the arc and label components.",
        "name": "series",
        "parent": {
          "fileName": "src/VennDiagram/VennDiagram.tsx",
          "name": "VennDiagramProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennDiagram.tsx",
            "name": "VennDiagramProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<VennSeriesProps, FC<Partial<VennSeriesProps>>>"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the chart is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/VennDiagram/VennDiagram.tsx",
          "name": "VennDiagramProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennDiagram.tsx",
            "name": "VennDiagramProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/VennDiagram/VennLabel.tsx",
    "description": "",
    "displayName": "VennLabel",
    "methods": [],
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Whether the shape is active or not.",
        "name": "active",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Set by the parent element.",
        "name": "id",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showAll": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Show all labels or just the large ones. Default false.",
        "name": "showAll",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "labelType": {
        "defaultValue": {
          "value": "key"
        },
        "description": "The label type to show.",
        "name": "labelType",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"key\" | \"value\""
        }
      },
      "wrap": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Should wrap text or not.",
        "name": "wrap",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by venn.js",
        "name": "data",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "fontSize": {
        "defaultValue": {
          "value": "11"
        },
        "description": "Font size of the text.",
        "name": "fontSize",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": {
          "value": "sans-serif"
        },
        "description": "Font family of the text.",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill of the text.",
        "name": "fill",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Format label.",
        "name": "format",
        "parent": {
          "fileName": "src/VennDiagram/VennLabel.tsx",
          "name": "VennLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennLabel.tsx",
            "name": "VennLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: any) => any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/VennDiagram/VennOuterLabel.tsx",
    "description": "",
    "displayName": "VennOuterLabel",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by venn.js",
        "name": "data",
        "parent": {
          "fileName": "src/VennDiagram/VennOuterLabel.tsx",
          "name": "VennOuterLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennOuterLabel.tsx",
            "name": "VennOuterLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "fontSize": {
        "defaultValue": {
          "value": "14"
        },
        "description": "Font size of the text.",
        "name": "fontSize",
        "parent": {
          "fileName": "src/VennDiagram/VennOuterLabel.tsx",
          "name": "VennOuterLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennOuterLabel.tsx",
            "name": "VennOuterLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": {
          "value": "sans-serif"
        },
        "description": "Font family of the text.",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/VennDiagram/VennOuterLabel.tsx",
          "name": "VennOuterLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennOuterLabel.tsx",
            "name": "VennOuterLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "#000"
        },
        "description": "Fill of the text.",
        "name": "fill",
        "parent": {
          "fileName": "src/VennDiagram/VennOuterLabel.tsx",
          "name": "VennOuterLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennOuterLabel.tsx",
            "name": "VennOuterLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/VennDiagram/VennOuterLabel.tsx",
          "name": "VennOuterLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennOuterLabel.tsx",
            "name": "VennOuterLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Format label.",
        "name": "format",
        "parent": {
          "fileName": "src/VennDiagram/VennOuterLabel.tsx",
          "name": "VennOuterLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennOuterLabel.tsx",
            "name": "VennOuterLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: any) => any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/VennDiagram/VennSeries.tsx",
    "description": "",
    "displayName": "VennSeries",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set by the parent.",
        "name": "id",
        "parent": {
          "fileName": "src/VennDiagram/VennSeries.tsx",
          "name": "VennSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennSeries.tsx",
            "name": "VennSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "selections": {
        "defaultValue": null,
        "description": "Active managed selections.",
        "name": "selections",
        "parent": {
          "fileName": "src/VennDiagram/VennSeries.tsx",
          "name": "VennSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennSeries.tsx",
            "name": "VennSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The internal data object built by venn.js",
        "name": "data",
        "parent": {
          "fileName": "src/VennDiagram/VennSeries.tsx",
          "name": "VennSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennSeries.tsx",
            "name": "VennSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "IVennLayout<any>[]"
        }
      },
      "colorScheme": {
        "defaultValue": {
          "value": "cybertron"
        },
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/VennDiagram/VennSeries.tsx",
          "name": "VennSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennSeries.tsx",
            "name": "VennSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the chart is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/VennDiagram/VennSeries.tsx",
          "name": "VennSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennSeries.tsx",
            "name": "VennSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/VennDiagram/VennSeries.tsx",
          "name": "VennSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennSeries.tsx",
            "name": "VennSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": {
          "value": "<VennLabel />"
        },
        "description": "Label element.",
        "name": "label",
        "parent": {
          "fileName": "src/VennDiagram/VennSeries.tsx",
          "name": "VennSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennSeries.tsx",
            "name": "VennSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<VennLabelProps, FC<Partial<VennLabelProps>>>"
        }
      },
      "outerLabel": {
        "defaultValue": {
          "value": "<VennOuterLabel />"
        },
        "description": "Label element.",
        "name": "outerLabel",
        "parent": {
          "fileName": "src/VennDiagram/VennSeries.tsx",
          "name": "VennSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennSeries.tsx",
            "name": "VennSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<VennOuterLabelProps, FC<Partial<VennOuterLabelProps>>>"
        }
      },
      "arc": {
        "defaultValue": {
          "value": "<VennArc />"
        },
        "description": "Arc element.",
        "name": "arc",
        "parent": {
          "fileName": "src/VennDiagram/VennSeries.tsx",
          "name": "VennSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/VennDiagram/VennSeries.tsx",
            "name": "VennSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<VennArcProps, FC<Partial<VennArcProps>>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/WordCloud/WordCloud.tsx",
    "description": "",
    "displayName": "WordCloud",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "Data to render in the word cloud.\nThe 'key' represents the word and 'data' represents its frequency/weight.",
        "name": "data",
        "parent": {
          "fileName": "src/WordCloud/WordCloud.tsx",
          "name": "WordCloudProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloud.tsx",
            "name": "WordCloudProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "fontSizeRange": {
        "defaultValue": {
          "value": "[12, 50]"
        },
        "description": "Font size range [min, max].",
        "name": "fontSizeRange",
        "parent": {
          "fileName": "src/WordCloud/WordCloud.tsx",
          "name": "WordCloudProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloud.tsx",
            "name": "WordCloudProps"
          }
        ],
        "required": false,
        "type": {
          "name": "[number, number]"
        }
      },
      "fontFamily": {
        "defaultValue": {
          "value": "Arial"
        },
        "description": "Font family to use.",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/WordCloud/WordCloud.tsx",
          "name": "WordCloudProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloud.tsx",
            "name": "WordCloudProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "padding": {
        "defaultValue": {
          "value": "3"
        },
        "description": "Padding between words.",
        "name": "padding",
        "parent": {
          "fileName": "src/WordCloud/WordCloud.tsx",
          "name": "WordCloudProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloud.tsx",
            "name": "WordCloudProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "rotationAngles": {
        "defaultValue": {
          "value": "[-30, 30]"
        },
        "description": "Rotation angles for words.",
        "name": "rotationAngles",
        "parent": {
          "fileName": "src/WordCloud/WordCloud.tsx",
          "name": "WordCloudProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloud.tsx",
            "name": "WordCloudProps"
          }
        ],
        "required": false,
        "type": {
          "name": "[number, number]"
        }
      },
      "rotations": {
        "defaultValue": {
          "value": "2"
        },
        "description": "Number of possible rotations.",
        "name": "rotations",
        "parent": {
          "fileName": "src/WordCloud/WordCloud.tsx",
          "name": "WordCloudProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloud.tsx",
            "name": "WordCloudProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "colorScheme": {
        "defaultValue": {
          "value": "schemes.cybertron"
        },
        "description": "Custom color scheme for words.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/WordCloud/WordCloud.tsx",
          "name": "WordCloudProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloud.tsx",
            "name": "WordCloudProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "onLabelClick": {
        "defaultValue": null,
        "description": "Event triggered when a word is clicked.",
        "name": "onLabelClick",
        "parent": {
          "fileName": "src/WordCloud/WordCloud.tsx",
          "name": "WordCloudProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloud.tsx",
            "name": "WordCloudProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<Element, MouseEvent>, data: ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>) => void"
        }
      },
      "onLabelMouseEnter": {
        "defaultValue": null,
        "description": "Mouse enter handler.",
        "name": "onLabelMouseEnter",
        "parent": {
          "fileName": "src/WordCloud/WordCloud.tsx",
          "name": "WordCloudProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloud.tsx",
            "name": "WordCloudProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PointerEvent<Element>, data: ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>) => void"
        }
      },
      "onLabelMouseLeave": {
        "defaultValue": null,
        "description": "Mouse leave handler.",
        "name": "onLabelMouseLeave",
        "parent": {
          "fileName": "src/WordCloud/WordCloud.tsx",
          "name": "WordCloudProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloud.tsx",
            "name": "WordCloudProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PointerEvent<Element>, data: ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>) => void"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/WordCloud/WordCloudLabel.tsx",
    "description": "",
    "displayName": "WordCloudLabel",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "Text to display.",
        "name": "text",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fontSize": {
        "defaultValue": null,
        "description": "Font size in pixels.",
        "name": "fontSize",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": null,
        "description": "Font family to use.",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill color for the text.",
        "name": "fill",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "x": {
        "defaultValue": null,
        "description": "X position of the text.",
        "name": "x",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y": {
        "defaultValue": null,
        "description": "Y position of the text.",
        "name": "y",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "rotate": {
        "defaultValue": null,
        "description": "Rotation angle in degrees.",
        "name": "rotate",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Original data point.",
        "name": "data",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional className to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<ChartTooltip />"
        },
        "description": "Tooltip element.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Click handler.",
        "name": "onClick",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<Element, MouseEvent>, data: ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Mouse enter handler.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PointerEvent<Element>, data: ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Mouse leave handler.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/WordCloud/WordCloudLabel.tsx",
          "name": "WordCloudLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/WordCloud/WordCloudLabel.tsx",
            "name": "WordCloudLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PointerEvent<Element>, data: ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/AreaChart/AreaSeries/Area.tsx",
    "description": "",
    "displayName": "Area",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `AreaSeries`.",
        "name": "id",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `AreaChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "Interpolation for the area. Set internally by `AreaSeries`.",
        "name": "interpolation",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InterpolationTypes"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color for the area. Set internally by `AreaSeries`.",
        "name": "color",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `AreaChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `AreaChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the area in the series. Set internally by `AreaSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "total": {
        "defaultValue": null,
        "description": "Total number of areas in the series. Set internally by `AreaSeries`.",
        "name": "total",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit. Set internally by `AreaSeries`.",
        "name": "animated",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "mask": {
        "defaultValue": null,
        "description": "Mask to apply to the area.",
        "name": "mask",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<MaskProps, FC<MaskProps>>"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient to apply to the area.",
        "name": "gradient",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "glow": {
        "defaultValue": null,
        "description": "Glow to apply to the area.",
        "name": "glow",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Glow"
        }
      },
      "pointerEvents": {
        "defaultValue": {
          "value": "'none'"
        },
        "description": "Pointer events to manage the area events.",
        "name": "pointerEvents",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Area.tsx",
          "name": "AreaProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Area.tsx",
            "name": "AreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames to apply to the element.",
        "name": "className",
        "parent": {
          "fileName": "src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS styles to apply to the element.",
        "name": "style",
        "parent": {
          "fileName": "src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/AreaChart/AreaSeries/AreaSeries.tsx",
    "description": "",
    "displayName": "AreaSeries",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `AreaChart`.",
        "name": "id",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `AreaChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `AreaChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `AreaChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `AreaChart`.",
        "name": "height",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `AreaChart`.",
        "name": "width",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of area chart to render.",
        "name": "type",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AreaChartTypes"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "Interpolation type for the area/line.",
        "name": "interpolation",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InterpolationTypes"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "markLine": {
        "defaultValue": null,
        "description": "Markline for the chart.",
        "name": "markLine",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<MarkLineProps, FC<Partial<MarkLineProps>>>"
        }
      },
      "symbols": {
        "defaultValue": null,
        "description": "Symbols used to show points.",
        "name": "symbols",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<PointSeriesProps, FC<Partial<PointSeriesProps>>>"
        }
      },
      "line": {
        "defaultValue": null,
        "description": "Line that is rendered.",
        "name": "line",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LineProps, FC<Partial<LineProps>>>"
        }
      },
      "area": {
        "defaultValue": null,
        "description": "Area that is rendered.",
        "name": "area",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<AreaProps, FC<Partial<AreaProps>>>"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the series.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "isZoomed": {
        "defaultValue": null,
        "description": "Whether the chart has been zoomed or not. Set internally by `AreaChart`.",
        "name": "isZoomed",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/AreaChart/AreaSeries/Line.tsx",
    "description": "",
    "displayName": "Line",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `AreaChart`.",
        "name": "id",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `AreaChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `AreaChart`.",
        "name": "width",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "Interpolation for the area. Set internally by `AreaSeries`.",
        "name": "interpolation",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InterpolationTypes"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color for the area. Set internally by `AreaSeries`.",
        "name": "color",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `AreaChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `AreaChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the area in the series. Set internally by `AreaSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit. Set internally by `AreaSeries`.",
        "name": "animated",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "strokeWidth": {
        "defaultValue": {
          "value": "3"
        },
        "description": "Stroke width of the line.",
        "name": "strokeWidth",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showZeroStroke": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Show the stroke if there is no value.",
        "name": "showZeroStroke",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hasArea": {
        "defaultValue": null,
        "description": "Internal property to identify if there is a area or not.",
        "name": "hasArea",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient to apply to the line.",
        "name": "gradient",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "glow": {
        "defaultValue": null,
        "description": "Glow to apply to the line.",
        "name": "glow",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/Line.tsx",
          "name": "LineProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/Line.tsx",
            "name": "LineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Glow"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames to apply to the element.",
        "name": "className",
        "parent": {
          "fileName": "src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS styles to apply to the element.",
        "name": "style",
        "parent": {
          "fileName": "src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/AreaChart/AreaSeries/PointSeries.tsx",
    "description": "",
    "displayName": "PointSeries",
    "methods": [],
    "props": {
      "animated": {
        "defaultValue": null,
        "description": "Determines if the points should be animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "The color of the points.",
        "name": "color",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "activeValues": {
        "defaultValue": null,
        "description": "The active values for the points.",
        "name": "activeValues",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "The data for the points.",
        "name": "data",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape[]"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "The y-scale for the points.",
        "name": "yScale",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "The x-scale for the points.",
        "name": "xScale",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The unique identifier for the points.",
        "name": "id",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "The height of the points.",
        "name": "height",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "The width of the points.",
        "name": "width",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "show": {
        "defaultValue": null,
        "description": "Determines when the points should be shown. Can be a boolean or one of the following strings: 'hover', 'first', 'last'.",
        "name": "show",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"hover\" | \"first\" | \"last\""
        }
      },
      "point": {
        "defaultValue": null,
        "description": "The point element.",
        "name": "point",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ScatterPointProps, FC<Partial<ScatterPointProps>>>"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "The index of the points.",
        "name": "index",
        "parent": {
          "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
          "name": "PointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/AreaChart/AreaSeries/PointSeries.tsx",
            "name": "PointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/AreaChart/AreaSeries/StackedAreaSeries.tsx",
    "description": "",
    "displayName": "StackedAreaSeries",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `AreaChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `AreaChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `AreaChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `AreaChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `AreaChart`.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `AreaChart`.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of area chart to render.",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AreaChartTypes"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "Interpolation type for the area/line.",
        "name": "interpolation",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InterpolationTypes"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "markLine": {
        "defaultValue": null,
        "description": "Markline for the chart.",
        "name": "markLine",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<MarkLineProps, FC<Partial<MarkLineProps>>>"
        }
      },
      "symbols": {
        "defaultValue": null,
        "description": "Symbols used to show points.",
        "name": "symbols",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<PointSeriesProps, FC<Partial<PointSeriesProps>>>"
        }
      },
      "line": {
        "defaultValue": null,
        "description": "Line that is rendered.",
        "name": "line",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LineProps, FC<Partial<LineProps>>>"
        }
      },
      "area": {
        "defaultValue": null,
        "description": "Area that is rendered.",
        "name": "area",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<AreaProps, FC<Partial<AreaProps>>>"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the series.",
        "name": "colorScheme",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "isZoomed": {
        "defaultValue": null,
        "description": "Whether the chart has been zoomed or not. Set internally by `AreaChart`.",
        "name": "isZoomed",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/AreaChart/AreaSeries/StackedNormalizedAreaSeries.tsx",
    "description": "",
    "displayName": "StackedNormalizedAreaSeries",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `AreaChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `AreaChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `AreaChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `AreaChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `AreaChart`.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `AreaChart`.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of area chart to render.",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AreaChartTypes"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "Interpolation type for the area/line.",
        "name": "interpolation",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InterpolationTypes"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "markLine": {
        "defaultValue": null,
        "description": "Markline for the chart.",
        "name": "markLine",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<MarkLineProps, FC<Partial<MarkLineProps>>>"
        }
      },
      "symbols": {
        "defaultValue": null,
        "description": "Symbols used to show points.",
        "name": "symbols",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<PointSeriesProps, FC<Partial<PointSeriesProps>>>"
        }
      },
      "line": {
        "defaultValue": null,
        "description": "Line that is rendered.",
        "name": "line",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LineProps, FC<Partial<LineProps>>>"
        }
      },
      "area": {
        "defaultValue": null,
        "description": "Area that is rendered.",
        "name": "area",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<AreaProps, FC<Partial<AreaProps>>>"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the series.",
        "name": "colorScheme",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "isZoomed": {
        "defaultValue": null,
        "description": "Whether the chart has been zoomed or not. Set internally by `AreaChart`.",
        "name": "isZoomed",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
          "name": "AreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/AreaChart/AreaSeries/AreaSeries.tsx",
            "name": "AreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/BarSeries/Bar.tsx",
    "description": "",
    "displayName": "Bar",
    "methods": [],
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Whether the bar is active or not.",
        "name": "active",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "activeBrightness": {
        "defaultValue": null,
        "description": "Chroma brightness factor to brighten the active bar. See\nhttps://gka.github.io/chroma.js/#color-brighten for more info.",
        "name": "activeBrightness",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `BarChart`.",
        "name": "xScale",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `BarChart`.",
        "name": "yScale",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale1": {
        "defaultValue": null,
        "description": "D3 scale for X Multi-Group Axis. Set internally by `BarChart`.",
        "name": "xScale1",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `BarChart`.",
        "name": "data",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `BarChart`.",
        "name": "id",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient shades for the bar.",
        "name": "gradient",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "rx": {
        "defaultValue": null,
        "description": "SVG rx attribute for the bar.",
        "name": "rx",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "ry": {
        "defaultValue": null,
        "description": "SVG ry attribute for the bar.",
        "name": "ry",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the bar. Set internally by `BarSeries`.",
        "name": "width",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Padding for the bar groups.",
        "name": "padding",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "barCount": {
        "defaultValue": null,
        "description": "Total number of bars used for animation. Set internally by `BarSeries`.",
        "name": "barCount",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color callback for the bar.",
        "name": "color",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "cursor": {
        "defaultValue": null,
        "description": "Cursor for the bar element.",
        "name": "cursor",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "barIndex": {
        "defaultValue": null,
        "description": "Index of the bar. Set internally by `BarSeries`.",
        "name": "barIndex",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "groupIndex": {
        "defaultValue": null,
        "description": "Index of the group. Set internally by `BarSeries`.",
        "name": "groupIndex",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit. Set internally by `BarSeries`.",
        "name": "animated",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isCategorical": {
        "defaultValue": null,
        "description": "Whether this is categorical chart or not. Set internally by `BarSeries`.",
        "name": "isCategorical",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rangeLines": {
        "defaultValue": null,
        "description": "Rangelines element. for the bar.",
        "name": "rangeLines",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RangeLinesProps, FC<Partial<RangeLinesProps>>>"
        }
      },
      "mask": {
        "defaultValue": null,
        "description": "Mask element for the bar.",
        "name": "mask",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<MaskProps, FC<MaskProps>>"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip element.",
        "name": "tooltip",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "layout": {
        "defaultValue": null,
        "description": "Direction of the chart. Set internally by `BarSeries`.",
        "name": "layout",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Direction"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of bar chart. Set internally by `BarSeries`.",
        "name": "type",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "BarType"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label element.",
        "name": "label",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<BarLabelProps, FC<Partial<BarLabelProps>>>"
        }
      },
      "guide": {
        "defaultValue": null,
        "description": "Guide bar component.",
        "name": "guide",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GuideBarProps, FC<Partial<GuideBarProps>>>"
        }
      },
      "minHeight": {
        "defaultValue": null,
        "description": "Force a min height on the bar.",
        "name": "minHeight",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "glow": {
        "defaultValue": null,
        "description": "Glow styling for the bar.",
        "name": "glow",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Glow"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when the bar is clicked.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ClickEvent) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the bar has mouse enter.",
        "name": "onMouseEnter",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the bar has mouse leave.",
        "name": "onMouseLeave",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseMove": {
        "defaultValue": null,
        "description": "Event for when a bar has mouse move.",
        "name": "onMouseMove",
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/Bar.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames to apply to the element.",
        "name": "className",
        "parent": {
          "fileName": "src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS styles to apply to the element.",
        "name": "style",
        "parent": {
          "fileName": "src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/BarSeries/BarLabel.tsx",
    "description": "",
    "displayName": "BarLabel",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "Text of the label. Set internally by `Bar`.",
        "name": "text",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the bar.",
        "name": "height",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the bar.",
        "name": "width",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "x": {
        "defaultValue": null,
        "description": "SVG x attribute for the bar.",
        "name": "x",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y": {
        "defaultValue": null,
        "description": "SVG y attribute for the bar.",
        "name": "y",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Group index or index of the bar. Set internally by `BarSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "D3 scale for Axis. Set internally by `BarChart`.",
        "name": "scale",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Position of the label.",
        "name": "position",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"center\" | \"bottom\""
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `BarChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Color of the text.",
        "name": "fill",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "barCount": {
        "defaultValue": null,
        "description": "Number of the bars in the bar group. Set internally by `BarSeries`.",
        "name": "barCount",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "layout": {
        "defaultValue": null,
        "description": "Layout of bar chart to render. Set internally by `BarSeries`.",
        "name": "layout",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Direction"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit. Set internally by `BarSeries`.",
        "name": "animated",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of bar chart to render. Set internally by `BarSeries`.",
        "name": "type",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarType"
        }
      },
      "fontSize": {
        "defaultValue": null,
        "description": "Font size of the text.",
        "name": "fontSize",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": null,
        "description": "Font family of the text.",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Padding of the label.",
        "name": "padding",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name to apply to the text.",
        "name": "className",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
          "name": "BarLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarLabel.tsx",
            "name": "BarLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/BarSeries/BarSeries.tsx",
    "description": "",
    "displayName": "BarSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `BarChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the bar chart. Set internally by `BarChart`.",
        "name": "id",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `BarChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `BarChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale1": {
        "defaultValue": null,
        "description": "D3 scale for X Multi-Group Axis. Set internally by `BarChart`.",
        "name": "xScale1",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "bar": {
        "defaultValue": null,
        "description": "Bar element.",
        "name": "bar",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarElement | BarElement[]"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of the chart.",
        "name": "type",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarType"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Amount of padding between each bar.",
        "name": "padding",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "groupPadding": {
        "defaultValue": null,
        "description": "Amount of padding between each group.",
        "name": "groupPadding",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isCategorical": {
        "defaultValue": null,
        "description": "Whether the chart is categorical or not. Set internally by `BarChart`.",
        "name": "isCategorical",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "layout": {
        "defaultValue": null,
        "description": "Direction of the chart",
        "name": "layout",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Direction"
        }
      },
      "binSize": {
        "defaultValue": null,
        "description": "The size of each bin/bucket in the bar chart.",
        "name": "binSize",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `BarChart`.",
        "name": "height",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `BarChart`.",
        "name": "width",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/BarSeries/GuideBar.tsx",
    "description": "",
    "displayName": "GuideBar",
    "methods": [],
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Whether the guide bar is active.",
        "name": "active",
        "parent": {
          "fileName": "src/BarChart/BarSeries/GuideBar.tsx",
          "name": "GuideBarProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/GuideBar.tsx",
            "name": "GuideBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "#eee"
        },
        "description": "Fill for the guide bar element.",
        "name": "fill",
        "parent": {
          "fileName": "src/BarChart/BarSeries/GuideBar.tsx",
          "name": "GuideBarProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/GuideBar.tsx",
            "name": "GuideBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "opacity": {
        "defaultValue": {
          "value": "0.15"
        },
        "description": "Opacity for the guide bar element.",
        "name": "opacity",
        "parent": {
          "fileName": "src/BarChart/BarSeries/GuideBar.tsx",
          "name": "GuideBarProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/GuideBar.tsx",
            "name": "GuideBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRect"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRect"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRect"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRect"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "x": {
        "defaultValue": null,
        "description": "",
        "name": "x",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRect"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRect"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y": {
        "defaultValue": null,
        "description": "",
        "name": "y",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRect"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRect"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "bottom": {
        "defaultValue": null,
        "description": "",
        "name": "bottom",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRectReadOnly"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRectReadOnly"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "left": {
        "defaultValue": null,
        "description": "",
        "name": "left",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRectReadOnly"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRectReadOnly"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "right": {
        "defaultValue": null,
        "description": "",
        "name": "right",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRectReadOnly"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRectReadOnly"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "top": {
        "defaultValue": null,
        "description": "",
        "name": "top",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRectReadOnly"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRectReadOnly"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "toJSON": {
        "defaultValue": null,
        "description": "",
        "name": "toJSON",
        "parent": {
          "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
          "name": "DOMRectReadOnly"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/typescript/lib/lib.dom.d.ts",
            "name": "DOMRectReadOnly"
          }
        ],
        "required": false,
        "type": {
          "name": "() => any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/BarSeries/HistogramBarSeries.tsx",
    "description": "",
    "displayName": "HistogramBarSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `BarChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the bar chart. Set internally by `BarChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `BarChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `BarChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale1": {
        "defaultValue": null,
        "description": "D3 scale for X Multi-Group Axis. Set internally by `BarChart`.",
        "name": "xScale1",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "bar": {
        "defaultValue": null,
        "description": "Bar element.",
        "name": "bar",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarElement | BarElement[]"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of the chart.",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarType"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Amount of padding between each bar.",
        "name": "padding",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "groupPadding": {
        "defaultValue": null,
        "description": "Amount of padding between each group.",
        "name": "groupPadding",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isCategorical": {
        "defaultValue": null,
        "description": "Whether the chart is categorical or not. Set internally by `BarChart`.",
        "name": "isCategorical",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "layout": {
        "defaultValue": null,
        "description": "Direction of the chart",
        "name": "layout",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Direction"
        }
      },
      "binSize": {
        "defaultValue": null,
        "description": "The size of each bin/bucket in the bar chart.",
        "name": "binSize",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `BarChart`.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `BarChart`.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/BarSeries/MarimekkoBarSeries.tsx",
    "description": "",
    "displayName": "MarimekkoBarSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `BarChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the bar chart. Set internally by `BarChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `BarChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `BarChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale1": {
        "defaultValue": null,
        "description": "D3 scale for X Multi-Group Axis. Set internally by `BarChart`.",
        "name": "xScale1",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "bar": {
        "defaultValue": null,
        "description": "Bar element.",
        "name": "bar",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarElement | BarElement[]"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of the chart.",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarType"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Amount of padding between each bar.",
        "name": "padding",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "groupPadding": {
        "defaultValue": null,
        "description": "Amount of padding between each group.",
        "name": "groupPadding",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isCategorical": {
        "defaultValue": null,
        "description": "Whether the chart is categorical or not. Set internally by `BarChart`.",
        "name": "isCategorical",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "layout": {
        "defaultValue": null,
        "description": "Direction of the chart",
        "name": "layout",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Direction"
        }
      },
      "binSize": {
        "defaultValue": null,
        "description": "The size of each bin/bucket in the bar chart.",
        "name": "binSize",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `BarChart`.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `BarChart`.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/BarSeries/RangeLines.tsx",
    "description": "",
    "displayName": "RangeLines",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "Height of the bar.",
        "name": "height",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the bar.",
        "name": "width",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "x": {
        "defaultValue": null,
        "description": "SVG x attribute for the bar.",
        "name": "x",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y": {
        "defaultValue": null,
        "description": "SVG y attribute for the bar.",
        "name": "y",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Group index or index of the bar. Set internally by `BarSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strokeWidth": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Stroke width of the range line.",
        "name": "strokeWidth",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "D3 scale for Axis. Set internally by `BarChart`.",
        "name": "scale",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "position": {
        "defaultValue": {
          "value": "top"
        },
        "description": "Position of the range line.",
        "name": "position",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\""
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `BarChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color for the range line.",
        "name": "color",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "barCount": {
        "defaultValue": null,
        "description": "Total number of bars used for animation. Set internally by `BarSeries`.",
        "name": "barCount",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "layout": {
        "defaultValue": {
          "value": "vertical"
        },
        "description": "Direction of the chart. Set internally by `BarSeries`.",
        "name": "layout",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Direction"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit. Set internally by `BarSeries`.",
        "name": "animated",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of bar chart. Set internally by `BarSeries`.",
        "name": "type",
        "parent": {
          "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
          "name": "RangeLinesProps"
        },
        "declarations": [
          {
            "fileName": "src/BarChart/BarSeries/RangeLines.tsx",
            "name": "RangeLinesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarType"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/BarSeries/StackedBarSeries.tsx",
    "description": "",
    "displayName": "StackedBarSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `BarChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the bar chart. Set internally by `BarChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `BarChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `BarChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale1": {
        "defaultValue": null,
        "description": "D3 scale for X Multi-Group Axis. Set internally by `BarChart`.",
        "name": "xScale1",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "bar": {
        "defaultValue": null,
        "description": "Bar element.",
        "name": "bar",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarElement | BarElement[]"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of the chart.",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarType"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Amount of padding between each bar.",
        "name": "padding",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "groupPadding": {
        "defaultValue": null,
        "description": "Amount of padding between each group.",
        "name": "groupPadding",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isCategorical": {
        "defaultValue": null,
        "description": "Whether the chart is categorical or not. Set internally by `BarChart`.",
        "name": "isCategorical",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "layout": {
        "defaultValue": null,
        "description": "Direction of the chart",
        "name": "layout",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Direction"
        }
      },
      "binSize": {
        "defaultValue": null,
        "description": "The size of each bin/bucket in the bar chart.",
        "name": "binSize",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `BarChart`.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `BarChart`.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/BarChart/BarSeries/StackedNormalizedBarSeries.tsx",
    "description": "",
    "displayName": "StackedNormalizedBarSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `BarChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the bar chart. Set internally by `BarChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `BarChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `BarChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale1": {
        "defaultValue": null,
        "description": "D3 scale for X Multi-Group Axis. Set internally by `BarChart`.",
        "name": "xScale1",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "bar": {
        "defaultValue": null,
        "description": "Bar element.",
        "name": "bar",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarElement | BarElement[]"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of the chart.",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BarType"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Amount of padding between each bar.",
        "name": "padding",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "groupPadding": {
        "defaultValue": null,
        "description": "Amount of padding between each group.",
        "name": "groupPadding",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isCategorical": {
        "defaultValue": null,
        "description": "Whether the chart is categorical or not. Set internally by `BarChart`.",
        "name": "isCategorical",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "layout": {
        "defaultValue": null,
        "description": "Direction of the chart",
        "name": "layout",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Direction"
        }
      },
      "binSize": {
        "defaultValue": null,
        "description": "The size of each bin/bucket in the bar chart.",
        "name": "binSize",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `BarChart`.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `BarChart`.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
          "name": "BarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/BarChart/BarSeries/BarSeries.tsx",
            "name": "BarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
    "description": "",
    "displayName": "FunnelArc",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Unique identifier for the arc. Set internally by `FunnelChart`.",
        "name": "id",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data to render the funnel. Set internally by `FunnelChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "opacity": {
        "defaultValue": null,
        "description": "Opacity of the funnel arc.",
        "name": "opacity",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the funnel arc. Set internally by `FunnelChart`.",
        "name": "index",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "The chart funnel style to use.",
        "name": "variant",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"layered\""
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "xScale for the funnel. Set internally by `FunnelChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "yScale for the funnel. Set internally by `FunnelChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "Interpolation for the area. Set internally by `AreaSeries`.",
        "name": "interpolation",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InterpolationTypes"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient to apply to the area.",
        "name": "gradient",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "glow": {
        "defaultValue": null,
        "description": "Glow styling for the arc.",
        "name": "glow",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Glow"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
    "description": "",
    "displayName": "FunnelSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `FunnelChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the funnel chart. Set internally by `FunnelChart`.",
        "name": "id",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "arc": {
        "defaultValue": {
          "value": "<FunnelArc />"
        },
        "description": "The arc component that renders the funnel shape.",
        "name": "arc",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<FunnelArcProps, FC<Partial<FunnelArcProps>>>"
        }
      },
      "axis": {
        "defaultValue": {
          "value": "<FunnelAxis />"
        },
        "description": "The axis component that renders the funnel axis.",
        "name": "axis",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<FunnelAxisProps, FC<Partial<FunnelAxisProps>>>"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `FunnelChart`.",
        "name": "height",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `FunnelChart`.",
        "name": "width",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onSegmentClick": {
        "defaultValue": null,
        "description": "Event for when a segment is clicked.",
        "name": "onSegmentClick",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: ClickEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelSeries/index.tsx",
    "description": "",
    "displayName": "FunnelSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `FunnelChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the funnel chart. Set internally by `FunnelChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "arc": {
        "defaultValue": {
          "value": "<FunnelArc />"
        },
        "description": "The arc component that renders the funnel shape.",
        "name": "arc",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<FunnelArcProps, FC<Partial<FunnelArcProps>>>"
        }
      },
      "axis": {
        "defaultValue": {
          "value": "<FunnelAxis />"
        },
        "description": "The axis component that renders the funnel axis.",
        "name": "axis",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<FunnelAxisProps, FC<Partial<FunnelAxisProps>>>"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `FunnelChart`.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `FunnelChart`.",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onSegmentClick": {
        "defaultValue": null,
        "description": "Event for when a segment is clicked.",
        "name": "onSegmentClick",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
          "name": "FunnelSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelSeries.tsx",
            "name": "FunnelSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: ClickEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelSeries/index.tsx",
    "description": "",
    "displayName": "FunnelArc",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Unique identifier for the arc. Set internally by `FunnelChart`.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data to render the funnel. Set internally by `FunnelChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "opacity": {
        "defaultValue": null,
        "description": "Opacity of the funnel arc.",
        "name": "opacity",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the funnel arc. Set internally by `FunnelChart`.",
        "name": "index",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "The chart funnel style to use.",
        "name": "variant",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"layered\""
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "xScale for the funnel. Set internally by `FunnelChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "yScale for the funnel. Set internally by `FunnelChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "Interpolation for the area. Set internally by `AreaSeries`.",
        "name": "interpolation",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InterpolationTypes"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient to apply to the area.",
        "name": "gradient",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "glow": {
        "defaultValue": null,
        "description": "Glow styling for the arc.",
        "name": "glow",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Glow"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
          "name": "FunnelArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelArc.tsx",
            "name": "FunnelArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelSeries/index.tsx",
    "description": "",
    "displayName": "FunnelAxis",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data to render the funnel. Set internally by `FunnelChart`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
          "name": "FunnelAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
            "name": "FunnelAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "xScale for the funnel. Set internally by `FunnelChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
          "name": "FunnelAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
            "name": "FunnelAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "yScale for the funnel. Set internally by `FunnelChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
          "name": "FunnelAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
            "name": "FunnelAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "line": {
        "defaultValue": {
          "value": "<FunnelAxisLine />"
        },
        "description": "The funnel axis line.",
        "name": "line",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
          "name": "FunnelAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
            "name": "FunnelAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<FunnelAxisLineProps, FC<Partial<FunnelAxisLineProps>>>"
        }
      },
      "label": {
        "defaultValue": {
          "value": "<FunnelAxisLabel />"
        },
        "description": "Label component for the axis.",
        "name": "label",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
          "name": "FunnelAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
            "name": "FunnelAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<FunnelAxisLabelProps, FC<Partial<FunnelAxisLabelProps>>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelSeries/index.tsx",
    "description": "",
    "displayName": "FunnelAxisLabel",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data object for the label. Set internally by `FunnelAxis`.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the label. Set internally by `FunnelAxis`.",
        "name": "index",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "#fff"
        },
        "description": "Color of the text.",
        "name": "fill",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fontSize": {
        "defaultValue": {
          "value": "13"
        },
        "description": "Font size of the text.",
        "name": "fontSize",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": {
          "value": "sans-serif"
        },
        "description": "Font family of the text.",
        "name": "fontFamily",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "padding": {
        "defaultValue": {
          "value": "10"
        },
        "description": "Padding of the label.",
        "name": "padding",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name to apply to the text.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "xScale for the funnel. Set internally by `FunnelAxis`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "yScale for the funnel. Set internally by `FunnelAxis`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "position": {
        "defaultValue": {
          "value": "middle"
        },
        "description": "Positioning of the label.",
        "name": "position",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"bottom\" | \"middle\""
        }
      },
      "showValue": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to show the value of the data.\nDefaults to `true`.",
        "name": "showValue",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "labelVisibility": {
        "defaultValue": {
          "value": "auto"
        },
        "description": "Visibility of the label.",
        "name": "labelVisibility",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"auto\" | \"always\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelSeries/index.tsx",
    "description": "",
    "displayName": "FunnelAxisLine",
    "methods": [],
    "props": {
      "strokeColor": {
        "defaultValue": {
          "value": "#333"
        },
        "description": "Color of the axis lines.",
        "name": "strokeColor",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
          "name": "FunnelAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
            "name": "FunnelAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "strokeWidth": {
        "defaultValue": {
          "value": "2"
        },
        "description": "Width of the axis lines.",
        "name": "strokeWidth",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
          "name": "FunnelAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
            "name": "FunnelAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "xScale for the funnel. Set internally by `FunnelChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
          "name": "FunnelAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
            "name": "FunnelAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "yScale for the funnel. Set internally by `FunnelChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
          "name": "FunnelAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
            "name": "FunnelAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the line. Set internally by `FunnelAxis`.",
        "name": "index",
        "parent": {
          "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
          "name": "FunnelAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
            "name": "FunnelAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
    "description": "",
    "displayName": "HeatmapCell",
    "methods": [],
    "props": {
      "x": {
        "defaultValue": null,
        "description": "X Position set by `HeatmapSeries`.",
        "name": "x",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y": {
        "defaultValue": null,
        "description": "Y Position set by `HeatmapSeries`.",
        "name": "y",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "rx": {
        "defaultValue": {
          "value": "2"
        },
        "description": "rx SVG Attribute.",
        "name": "rx",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "ry": {
        "defaultValue": {
          "value": "2"
        },
        "description": "ry SVG Attribute.",
        "name": "ry",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of cell set by `HeatmapSeries`.",
        "name": "height",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of cell set by `HeatmapSeries`.",
        "name": "width",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "cellCount": {
        "defaultValue": null,
        "description": "Total count of cells set by `HeatmapSeries`.",
        "name": "cellCount",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<ChartTooltip />"
        },
        "description": "Tooltip component.",
        "name": "tooltip",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill color set by `HeatmapSeries`.",
        "name": "fill",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "stroke": {
        "defaultValue": null,
        "description": "Stroke color set by `HeatmapSeries`.",
        "name": "stroke",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "symbol": {
        "defaultValue": null,
        "description": "Symbol element to render.",
        "name": "symbol",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartInternalShallowDataShape) => ReactNode"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data object set by `Heatmap`.",
        "name": "data",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether cell is animated or not set by `HeatmapSeries`.",
        "name": "animated",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "cellIndex": {
        "defaultValue": null,
        "description": "Cell index set by `HeatmapSeries`.",
        "name": "cellIndex",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "cursor": {
        "defaultValue": {
          "value": "auto"
        },
        "description": "Cursor style attribute.",
        "name": "cursor",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when the bar is clicked.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the bar has mouse enter.",
        "name": "onMouseEnter",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the bar has mouse leave.",
        "name": "onMouseLeave",
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapCell.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames to apply to the element.",
        "name": "className",
        "parent": {
          "fileName": "src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS styles to apply to the element.",
        "name": "style",
        "parent": {
          "fileName": "src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
    "description": "",
    "displayName": "HeatmapSeries",
    "methods": [],
    "props": {
      "padding": {
        "defaultValue": null,
        "description": "Padding between cells.",
        "name": "padding",
        "parent": {
          "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
          "name": "HeatmapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
            "name": "HeatmapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set by `Heatmap`.",
        "name": "id",
        "parent": {
          "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
          "name": "HeatmapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
            "name": "HeatmapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data set by `Heatmap`.",
        "name": "data",
        "parent": {
          "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
          "name": "HeatmapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
            "name": "HeatmapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalNestedDataShape[]"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `Heatmap`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
          "name": "HeatmapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
            "name": "HeatmapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `Heatmap`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
          "name": "HeatmapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
            "name": "HeatmapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the chart.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
          "name": "HeatmapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
            "name": "HeatmapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType | ColorSchemeStyleArray"
        }
      },
      "emptyColor": {
        "defaultValue": null,
        "description": "Color for the empty cell of the chart.",
        "name": "emptyColor",
        "parent": {
          "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
          "name": "HeatmapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
            "name": "HeatmapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the chart is animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
          "name": "HeatmapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
            "name": "HeatmapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "cell": {
        "defaultValue": null,
        "description": "Cell component that will be rendered.",
        "name": "cell",
        "parent": {
          "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
          "name": "HeatmapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
            "name": "HeatmapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<HeatmapCellProps, FC<Partial<HeatmapCellProps>>>"
        }
      },
      "selections": {
        "defaultValue": null,
        "description": "Selected cell(s) in active state",
        "name": "selections",
        "parent": {
          "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
          "name": "HeatmapSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/Heatmap/HeatmapSeries/HeatmapSeries.tsx",
            "name": "HeatmapSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/PieChart/PieArcSeries/PieArc.tsx",
    "description": "",
    "displayName": "PieArc",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Unique id for arc",
        "name": "id",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "arc": {
        "defaultValue": null,
        "description": "The arc generator function returning an arc path\n@param data",
        "name": "arc",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ArcData) => string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data is the datum passed to the arc generator function",
        "name": "data",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ArcData"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color",
        "name": "color",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Animate",
        "name": "animated",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<ChartTooltip />"
        },
        "description": "Tooltip component",
        "name": "tooltip",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "cursor": {
        "defaultValue": {
          "value": "initial"
        },
        "description": "The cursor type used when hovering",
        "name": "cursor",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disable the arc",
        "name": "disabled",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient shades for the bar.",
        "name": "gradient",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "OnClick event handler\n@param e Click event",
        "name": "onClick",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: PieArcMouseEvent) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "MouseEnter event handler\n@param e MouseEnter event",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: PieArcMouseEvent) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "MouseLeave event handler\n@param e MouseLeave event",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
          "name": "PieArcProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArc.tsx",
            "name": "PieArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: PieArcMouseEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
    "description": "",
    "displayName": "PieArcLabel",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data set by the parent component",
        "name": "data",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ArcData"
        }
      },
      "centroid": {
        "defaultValue": null,
        "description": "A function returning the centroid of the corresponding `PieArc`\n@param d PieArcDatum",
        "name": "centroid",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(d: ArcData) => [number, number]"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "A Formatting function for the label value\n@param v The label value",
        "name": "format",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(v: any) => ReactNode"
        }
      },
      "fontFill": {
        "defaultValue": null,
        "description": "FontFill color",
        "name": "fontFill",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fontSize": {
        "defaultValue": null,
        "description": "FontSize",
        "name": "fontSize",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": null,
        "description": "FontFamily",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "lineStroke": {
        "defaultValue": null,
        "description": "Line stroke of the label connector",
        "name": "lineStroke",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "Outer radius of the corresponding `PieArc`",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "y Padding of the label",
        "name": "padding",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "The label position set by the parent component",
        "name": "position",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "[number, number]"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the label",
        "name": "width",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the label",
        "name": "height",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
          "name": "PieArcLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcLabel.tsx",
            "name": "PieArcLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
    "description": "",
    "displayName": "PieArcSeries",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Unique id for the series.",
        "name": "id",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Animated set by the `PieArc` components.",
        "name": "animated",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "Outer radius set by the parent component.",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "Inner radius set by the parent component.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padAngle": {
        "defaultValue": null,
        "description": "Pad Angle between adjacent arcs, see https://github.com/d3/d3-shape#arc_padAngle",
        "name": "padAngle",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padRadius": {
        "defaultValue": null,
        "description": "Pad Radius between adjacent arcs, see https://github.com/d3/d3-shape#arc_padRadius",
        "name": "padRadius",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "cornerRadius": {
        "defaultValue": null,
        "description": "Corner Radius of the arcs, see https://github.com/d3/d3-shape#arc_cornerRadius",
        "name": "cornerRadius",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data set by the parent component.",
        "name": "data",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ArcData[]"
        }
      },
      "arcWidth": {
        "defaultValue": null,
        "description": "Width of the arc",
        "name": "arcWidth",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "doughnut": {
        "defaultValue": null,
        "description": "Doughnut, render as a donut shape",
        "name": "doughnut",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "explode": {
        "defaultValue": null,
        "description": "Explode: OuterRadius will be adjusted by the data property",
        "name": "explode",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "displayAllLabels": {
        "defaultValue": null,
        "description": "Display all labels shows labels even if there is little space",
        "name": "displayAllLabels",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label component",
        "name": "label",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<PieArcLabelProps, FC<Partial<PieArcLabelProps>>>"
        }
      },
      "arc": {
        "defaultValue": null,
        "description": "Arc Component",
        "name": "arc",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<PieArcProps, FC<PieArcProps>>"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height set by the parent component",
        "name": "height",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width set by the parent component",
        "name": "width",
        "parent": {
          "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
          "name": "PieArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/PieChart/PieArcSeries/PieArcSeries.tsx",
            "name": "PieArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
    "description": "",
    "displayName": "RadialArea",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `RadialAreaChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape[]"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `RadialAreaChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `RadialAreaChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "Interpolation for the area. Set internally by `RadialAreaSeries`.",
        "name": "interpolation",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RadialInterpolationTypes"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color for the area. Set internally by `RadialAreaSeries`.",
        "name": "color",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `RadialAreaSeries`.",
        "name": "id",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "The inner radius for the chart center.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "The outer radius for the chart center.",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS classes to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the area in the series. Set internally by `RadialAreaSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "gradient": {
        "defaultValue": {
          "value": "<RadialGradient />"
        },
        "description": "Gradient to apply to the area.",
        "name": "gradient",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialGradientProps, FC<Partial<RadialGradientProps>>>"
        }
      },
      "isClosedCurve": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the curve should be closed. Set to true by deafult",
        "name": "isClosedCurve",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
          "name": "RadialAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialArea.tsx",
            "name": "RadialAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
    "description": "",
    "displayName": "RadialAreaSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `RadialAreaChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape[]"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "The type of the chart.",
        "name": "type",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RadialPointSeriesType"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme for the series.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "The outer radius for the chart center.",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "The inner radius for the chart center.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `RadialAreaChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `RadialAreaChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `RadialAreaChart`.",
        "name": "id",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "interpolation set internally by `RadialAreaChart`.",
        "name": "interpolation",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RadialInterpolationTypes"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `RadialAreaChart`.",
        "name": "height",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `RadialAreaChart`.",
        "name": "width",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "area": {
        "defaultValue": null,
        "description": "Area that is rendered.",
        "name": "area",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAreaProps, FC<Partial<RadialAreaProps>>>"
        }
      },
      "line": {
        "defaultValue": null,
        "description": "Line that is rendered.",
        "name": "line",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialLineProps, FC<Partial<RadialLineProps>>>"
        }
      },
      "symbols": {
        "defaultValue": null,
        "description": "Symbols used to show points.",
        "name": "symbols",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialPointSeriesProps, FC<Partial<RadialPointSeriesProps>>>"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isClosedCurve": {
        "defaultValue": null,
        "description": "Whether the curve should be closed. Set to true by deafult",
        "name": "isClosedCurve",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
          "name": "RadialAreaSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialAreaSeries.tsx",
            "name": "RadialAreaSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialValueMarkerProps, FC<RadialValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
    "description": "",
    "displayName": "RadialLine",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `RadialAreaChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape[]"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to animate the enter/update/exit. Set internally by `RadialAreaSeries`.",
        "name": "animated",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `RadialAreaChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `RadialAreaChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color for the area. Set internally by `RadialAreaSeries`.",
        "name": "color",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "interpolation": {
        "defaultValue": null,
        "description": "Interpolation for the area. Set internally by `RadialAreaSeries`.",
        "name": "interpolation",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RadialInterpolationTypes"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the area in the series. Set internally by `RadialAreaSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strokeWidth": {
        "defaultValue": {
          "value": "2"
        },
        "description": "Stroke width of the line.",
        "name": "strokeWidth",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS classes to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hasArea": {
        "defaultValue": null,
        "description": "Internal property to identify if there is a area or not.",
        "name": "hasArea",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isClosedCurve": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the curve should be closed. Set to true by deafult",
        "name": "isClosedCurve",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
          "name": "RadialLineProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialLine.tsx",
            "name": "RadialLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
    "description": "",
    "displayName": "RadialPointSeries",
    "methods": [],
    "props": {
      "animated": {
        "defaultValue": null,
        "description": "Whether the points are animated or not.",
        "name": "animated",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
          "name": "RadialPointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
            "name": "RadialPointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color scheme.",
        "name": "color",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
          "name": "RadialPointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
            "name": "RadialPointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the area in the series. Set internally by `RadialAreaSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
          "name": "RadialPointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
            "name": "RadialPointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "activeValues": {
        "defaultValue": null,
        "description": "Active values set by parent.",
        "name": "activeValues",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
          "name": "RadialPointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
            "name": "RadialPointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data object.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
          "name": "RadialPointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
            "name": "RadialPointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape[]"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 X-Scale.",
        "name": "yScale",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
          "name": "RadialPointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
            "name": "RadialPointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 Y-Scale.",
        "name": "xScale",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
          "name": "RadialPointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
            "name": "RadialPointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "show": {
        "defaultValue": null,
        "description": "When to show the point.",
        "name": "show",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
          "name": "RadialPointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
            "name": "RadialPointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"hover\" | \"first\" | \"last\""
        }
      },
      "point": {
        "defaultValue": null,
        "description": "Point react component.",
        "name": "point",
        "parent": {
          "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
          "name": "RadialPointSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialAreaChart/RadialAreaSeries/RadialPointSeries.tsx",
            "name": "RadialPointSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialScatterPointProps, FC<Partial<RadialScatterPointProps>>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialBarChart/RadialBarSeries/MotionBar.tsx",
    "description": "",
    "displayName": "MotionBar",
    "methods": [],
    "props": {
      "custom": {
        "defaultValue": null,
        "description": "",
        "name": "custom",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "",
        "name": "transition",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "arc": {
        "defaultValue": null,
        "description": "",
        "name": "arc",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
    "description": "",
    "displayName": "RadialBar",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `RadialBarChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "The inner radius for the chart center.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the element in the series. Set internally by `RadialBarSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the element is active or not. Set internally by `RadialBarSeries`.",
        "name": "animated",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `RadialBarChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `RadialBarChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color of the bar.",
        "name": "color",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "gradient": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to use gradient or not.",
        "name": "gradient",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `RadialBarSeries`.",
        "name": "id",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "barCount": {
        "defaultValue": null,
        "description": "Total number of bars used for animation. Set internally by `RadialBarSeries`.",
        "name": "barCount",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "innerBarCount": {
        "defaultValue": null,
        "description": "Total number of nested bars inside each group. Set internally by `RadialBarSeries`.",
        "name": "innerBarCount",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "groupIndex": {
        "defaultValue": null,
        "description": "Index of the group. Set internally by `BarSeries`.",
        "name": "groupIndex",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS classes to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "curved": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the bar is curved or not.",
        "name": "curved",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "guide": {
        "defaultValue": {
          "value": "<RadialGuideBar />"
        },
        "description": "Guide bar component.",
        "name": "guide",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialGuideBarProps, FC<Partial<RadialGuideBarProps>>>"
        }
      },
      "active": {
        "defaultValue": null,
        "description": "Active caused by hover.",
        "name": "active",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClick": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "Event for when a symbol is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "Event for when the symbol has mouse enter.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "Event for when the symbol has mouse leave.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
          "name": "RadialBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBar.tsx",
            "name": "RadialBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
    "description": "",
    "displayName": "RadialBarSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `RadialBarChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "colorScheme": {
        "defaultValue": {
          "value": "schemes.cybertron[0]"
        },
        "description": "Color scheme for the series.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "The inner radius for the chart center.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "The outer radius for the chart center.",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `RadialBarChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `RadialBarChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `RadialBarChart`.",
        "name": "id",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "bar": {
        "defaultValue": {
          "value": "<RadialBar />"
        },
        "description": "Bar that is rendered.",
        "name": "bar",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialBarProps, FC<Partial<RadialBarProps>>>"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `RadialBarChart`.",
        "name": "height",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `RadialBarChart`.",
        "name": "width",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<TooltipArea tooltip={<ChartTooltip followCursor={true} />} />"
        },
        "description": "Tooltip for the chart area.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipAreaProps, ForwardRefExoticComponent<Partial<TooltipAreaProps> & RefAttributes<any>>>"
        }
      },
      "startAngle": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": {
          "value": "2 * Math.PI"
        },
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "type": {
        "defaultValue": {
          "value": "standard"
        },
        "description": "The type of the chart.",
        "name": "type",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RadialBarSeriesType"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
          "name": "RadialBarSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialBarSeries.tsx",
            "name": "RadialBarSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialValueMarkerProps, FC<RadialValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialBarChart/RadialBarSeries/RadialGuideBar.tsx",
    "description": "",
    "displayName": "RadialGuideBar",
    "methods": [],
    "props": {
      "active": {
        "defaultValue": null,
        "description": "",
        "name": "active",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialGuideBar.tsx",
          "name": "RadialGuideBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialGuideBar.tsx",
            "name": "RadialGuideBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "path": {
        "defaultValue": null,
        "description": "",
        "name": "path",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialGuideBar.tsx",
          "name": "RadialGuideBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialGuideBar.tsx",
            "name": "RadialGuideBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "#eee"
        },
        "description": "",
        "name": "fill",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialGuideBar.tsx",
          "name": "RadialGuideBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialGuideBar.tsx",
            "name": "RadialGuideBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "opacity": {
        "defaultValue": {
          "value": "0.2"
        },
        "description": "",
        "name": "opacity",
        "parent": {
          "fileName": "src/RadialBarChart/RadialBarSeries/RadialGuideBar.tsx",
          "name": "RadialGuideBarProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialBarChart/RadialBarSeries/RadialGuideBar.tsx",
            "name": "RadialGuideBarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
    "description": "",
    "displayName": "RadialGaugeArc",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "ID generated by the chart.",
        "name": "id",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data set by the `RadialGaugeSeries` components.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle set by the `RadialGaugeSeries` components.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "End angle set by the `RadialGaugeSeries` components.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "Inner radius set by the `RadialGaugeSeries` components.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "Outer radius set by the `RadialGaugeSeries` components.",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "color": {
        "defaultValue": {
          "value": "#353d44"
        },
        "description": "Color set by the `RadialGaugeSeries` components.",
        "name": "color",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "cornerRadius": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Corner Radius of the arcs, see https://github.com/d3/d3-shape#arc_cornerRadius",
        "name": "cornerRadius",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padAngle": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Pad Angle between adjacent arcs, see https://github.com/d3/d3-shape#arc_padAngle",
        "name": "padAngle",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padRadius": {
        "defaultValue": null,
        "description": "Pad Radius between adjacent arcs, see https://github.com/d3/d3-shape#arc_padRadius",
        "name": "padRadius",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Animation set by the `RadialGaugeSeries` component.",
        "name": "animated",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disable the interactions.",
        "name": "disabled",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill the arc.",
        "name": "fill",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient shades for the bar.",
        "name": "gradient",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<ChartTooltip />"
        },
        "description": "Tooltip component.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when the arc is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the arc has mouse enter.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the arc has mouse leave.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialGauge/RadialGaugeSeries/RadialGaugeOuterArc.tsx",
    "description": "",
    "displayName": "RadialGaugeOuterArc",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "ID generated by the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data set by the `RadialGaugeSeries` components.",
        "name": "data",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle set by the `RadialGaugeSeries` components.",
        "name": "startAngle",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "End angle set by the `RadialGaugeSeries` components.",
        "name": "endAngle",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "Inner radius set by the `RadialGaugeSeries` components.",
        "name": "innerRadius",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "Outer radius set by the `RadialGaugeSeries` components.",
        "name": "outerRadius",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color set by the `RadialGaugeSeries` components.",
        "name": "color",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "cornerRadius": {
        "defaultValue": null,
        "description": "Corner Radius of the arcs, see https://github.com/d3/d3-shape#arc_cornerRadius",
        "name": "cornerRadius",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padAngle": {
        "defaultValue": null,
        "description": "Pad Angle between adjacent arcs, see https://github.com/d3/d3-shape#arc_padAngle",
        "name": "padAngle",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padRadius": {
        "defaultValue": null,
        "description": "Pad Radius between adjacent arcs, see https://github.com/d3/d3-shape#arc_padRadius",
        "name": "padRadius",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Animation set by the `RadialGaugeSeries` component.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Disable the interactions.",
        "name": "disabled",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill the arc.",
        "name": "fill",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient shades for the bar.",
        "name": "gradient",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip component.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when the arc is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the arc has mouse enter.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the arc has mouse leave.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
    "description": "",
    "displayName": "RadialGaugeSeries",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Unique id for the series.",
        "name": "id",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data to render set by `RadialGauge` component.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "D3 scale function set by `RadialGauge` component.",
        "name": "scale",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle set by `RadialGauge` component.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "Start angle set by `RadialGauge` component.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "arcWidth": {
        "defaultValue": {
          "value": "5"
        },
        "description": "The \"thickness\" of the arcs",
        "name": "arcWidth",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width set by `RadialGauge` component.",
        "name": "width",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height set by `RadialGauge` component.",
        "name": "height",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padding": {
        "defaultValue": {
          "value": "20"
        },
        "description": "Padding between each gauge.",
        "name": "padding",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "colorScheme": {
        "defaultValue": {
          "value": "['#00ECB1']"
        },
        "description": "Color scheme to apply.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "innerArc": {
        "defaultValue": {
          "value": "<RadialGaugeArc />"
        },
        "description": "Arc component.",
        "name": "innerArc",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialGaugeArcProps, FC<Partial<RadialGaugeArcProps>>>"
        }
      },
      "outerArc": {
        "defaultValue": {
          "value": "<RadialGaugeOuterArc />"
        },
        "description": "Outer arc component. This is the 'fill' element.",
        "name": "outerArc",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialGaugeArcProps, FC<Partial<RadialGaugeArcProps>>>"
        }
      },
      "label": {
        "defaultValue": {
          "value": "<RadialGaugeLabel />"
        },
        "description": "Label component.",
        "name": "label",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialGaugeLabelProps, FC<Partial<RadialGaugeLabelProps>>>"
        }
      },
      "valueLabel": {
        "defaultValue": {
          "value": "<RadialGaugeValueLabel />"
        },
        "description": "Value label component.",
        "name": "valueLabel",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialGaugeValueLabelProps, FC<Partial<RadialGaugeValueLabelProps>>>"
        }
      },
      "minGaugeWidth": {
        "defaultValue": {
          "value": "50"
        },
        "description": "Min width for a gauge. Only applicable in multi-series gauges.",
        "name": "minGaugeWidth",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
          "name": "RadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeSeries.tsx",
            "name": "RadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialGauge/RadialGaugeSeries/RadialGaugeStackedArc.tsx",
    "description": "",
    "displayName": "RadialGaugeStackedArc",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "ID generated by the chart.",
        "name": "id",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle set by the `RadialGaugeSeries` components.",
        "name": "startAngle",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "Inner radius set by the `RadialGaugeSeries` components.",
        "name": "innerRadius",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "Outer radius set by the `RadialGaugeSeries` components.",
        "name": "outerRadius",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "cornerRadius": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Corner Radius of the arcs, see https://github.com/d3/d3-shape#arc_cornerRadius",
        "name": "cornerRadius",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padAngle": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Pad Angle between adjacent arcs, see https://github.com/d3/d3-shape#arc_padAngle",
        "name": "padAngle",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padRadius": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Pad Radius between adjacent arcs, see https://github.com/d3/d3-shape#arc_padRadius",
        "name": "padRadius",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Animation set by the `RadialGaugeSeries` component.",
        "name": "animated",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disable the interactions.",
        "name": "disabled",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill the arc.",
        "name": "fill",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "gradient": {
        "defaultValue": null,
        "description": "Gradient shades for the bar.",
        "name": "gradient",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<ChartTooltip />"
        },
        "description": "Tooltip component.",
        "name": "tooltip",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when the arc is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the arc has mouse enter.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the arc has mouse leave.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
          "name": "RadialGaugeArcProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/RadialGauge/RadialGaugeSeries/RadialGaugeArc.tsx",
            "name": "RadialGaugeArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data set by the `StackedRadialGaugeSeries` components.",
        "name": "data",
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeStackedArc.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartNestedDataShape"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "D3 scale function set by `RadialGauge` component.",
        "name": "scale",
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeStackedArc.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(x: number) => number"
        }
      },
      "colorScheme": {
        "defaultValue": null,
        "description": "Color scheme to apply set by 'StackedRadialGaugeSeries' component.",
        "name": "colorScheme",
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeStackedArc.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
    "description": "",
    "displayName": "StackedRadialGaugeSeries",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data to render set by `RadialGauge` component.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartDataShape[]"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "D3 scale function set by `RadialGauge` component.",
        "name": "scale",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle set by `RadialGauge` component.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "Start angle set by `RadialGauge` component.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width set by `RadialGauge` component.",
        "name": "width",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height set by `RadialGauge` component.",
        "name": "height",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "colorScheme": {
        "defaultValue": {
          "value": "['#00ECB1']"
        },
        "description": "Color scheme to apply.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "innerArc": {
        "defaultValue": {
          "value": "<RadialGaugeArc animated={true} />"
        },
        "description": "Arc component.",
        "name": "innerArc",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialGaugeArcProps, FC<Partial<RadialGaugeArcProps>>>"
        }
      },
      "stackedInnerArc": {
        "defaultValue": {
          "value": "<RadialGaugeStackedArc animated={true} />"
        },
        "description": "Stacked Arc component.",
        "name": "stackedInnerArc",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialGaugeStackedArcProps, FC<Partial<RadialGaugeStackedArcProps>>>"
        }
      },
      "outerArc": {
        "defaultValue": {
          "value": "<RadialGaugeArc disabled={true} animated={false} />"
        },
        "description": "Outer arc component. This is the 'fill' element.",
        "name": "outerArc",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialGaugeArcProps, FC<Partial<RadialGaugeArcProps>>>"
        }
      },
      "label": {
        "defaultValue": {
          "value": "<StackedRadialGaugeValueLabel />"
        },
        "description": "Label component.",
        "name": "label",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<StackedRadialGaugeValueLabelProps, FC<Partial<StackedRadialGaugeValueLabelProps>>>"
        }
      },
      "descriptionLabel": {
        "defaultValue": null,
        "description": "Description label component.",
        "name": "descriptionLabel",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<StackedRadialGaugeDescriptionLabelProps, FC<Partial<StackedRadialGaugeDescriptionLabelProps>>>"
        }
      },
      "fillFactor": {
        "defaultValue": {
          "value": "0.2"
        },
        "description": "A factor from 0 to 1 determining how much of the Gauge should be filled with arcs",
        "name": "fillFactor",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "arcPadding": {
        "defaultValue": {
          "value": "0.15"
        },
        "description": "Padding between the stacked arcs, following d3 bandwidth innerPadding",
        "name": "arcPadding",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
          "name": "StackedRadialGaugeSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeSeries.tsx",
            "name": "StackedRadialGaugeSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
    "description": "",
    "displayName": "RadialScatterPoint",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `RadialScatterPlot`.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the element in the series. Set internally by `RadialScatterSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether the element is active or not. Set internally by `RadialScatterSeries`.",
        "name": "animated",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `RadialScatterPlot`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `RadialScatterPlot`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Fill for the element.",
        "name": "fill",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `RadialScatterPlot`.",
        "name": "id",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color of the circle.",
        "name": "color",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS classes to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "active": {
        "defaultValue": null,
        "description": "Whether the element is active or not. Set internally by `RadialScatterSeries`.",
        "name": "active",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "visible": {
        "defaultValue": null,
        "description": "Whether the elment is visiblbe or not.",
        "name": "visible",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: any, index: any) => boolean"
        }
      },
      "symbol": {
        "defaultValue": null,
        "description": "Symbol element to render.",
        "name": "symbol",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: any) => ReactNode"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of the circle element.",
        "name": "size",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | ((d: any) => number)"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip element.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when a symbol is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the symbol has mouse enter.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the symbol has mouse leave.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
          "name": "RadialScatterPointProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterPoint.tsx",
            "name": "RadialScatterPointProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
    "description": "",
    "displayName": "RadialScatterSeries",
    "methods": [],
    "props": {
      "point": {
        "defaultValue": {
          "value": "<RadialScatterPoint />"
        },
        "description": "Point that is rendered.",
        "name": "point",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
          "name": "RadialScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
            "name": "RadialScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialScatterPointProps, FC<Partial<RadialScatterPointProps>>>"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `RadialScatterPlot`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
          "name": "RadialScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
            "name": "RadialScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `RadialScatterPlot`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
          "name": "RadialScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
            "name": "RadialScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `RadialScatterPlot`.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
          "name": "RadialScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
            "name": "RadialScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `RadialScatterPlot`.",
        "name": "id",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
          "name": "RadialScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
            "name": "RadialScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
          "name": "RadialScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
            "name": "RadialScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "activeIds": {
        "defaultValue": null,
        "description": "Active element ids to highlight.",
        "name": "activeIds",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
          "name": "RadialScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
            "name": "RadialScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "show": {
        "defaultValue": {
          "value": "true"
        },
        "description": "When to show the point.",
        "name": "show",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
          "name": "RadialScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
            "name": "RadialScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
          "name": "RadialScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialScatterPlot/RadialScatterSeries/RadialScatterSeries.tsx",
            "name": "RadialScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialValueMarkerProps, FC<RadialValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
    "description": "",
    "displayName": "SankeyLabel",
    "methods": [],
    "props": {
      "active": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the element is active or not. Set internally by `Sankey`.",
        "name": "active",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the label is disabled. Set internally by `Sankey`.",
        "name": "disabled",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "chartWidth": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `Sankey`.",
        "name": "chartWidth",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS class to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "#fff"
        },
        "description": "Fill color.",
        "name": "fill",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "position": {
        "defaultValue": {
          "value": "inside"
        },
        "description": "Label position. Set internally by `Sankey`.",
        "name": "position",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SankeyLabelPosition"
        }
      },
      "labelPadding": {
        "defaultValue": null,
        "description": "Percentage of total width occupied by labels on\neither side of the graph inside the container.\nUsed for auto-ellipsizing labels\nSet internally by `Sankey`.",
        "name": "labelPadding",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "node": {
        "defaultValue": null,
        "description": "Node data. Set internally by `Sankey`.",
        "name": "node",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "NodeExtra & SankeyNodeMinimal<NodeExtra, LinkExtra>"
        }
      },
      "opacity": {
        "defaultValue": {
          "value": "(active, disabled) => (active ? 1 : disabled ? 0.2 : 0.9)"
        },
        "description": "Opacity callback. Used internally by `Sankey`.",
        "name": "opacity",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(active: boolean, disabled: boolean) => number"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "Padding between the label and the node.",
        "name": "padding",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "visible": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to show the label or not.",
        "name": "visible",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "nodeWidth": {
        "defaultValue": null,
        "description": "Width of the node set by the 'Sankey'.",
        "name": "nodeWidth",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Custom formatting for the label.",
        "name": "format",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: SankeyLabelFormatProps) => any"
        }
      },
      "ellipsis": {
        "defaultValue": {
          "value": "auto"
        },
        "description": "Specify the number of characters at which the text would be ellipsized.\nDefaults to 'auto' based on available width and max cut-off at `LABEL_TRUNCATE_LENGTH=10`",
        "name": "ellipsis",
        "parent": {
          "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
          "name": "SankeyLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLabel/SankeyLabel.tsx",
            "name": "SankeyLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | \"none\" | \"auto\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Sankey/SankeyLink/SankeyLink.tsx",
    "description": "",
    "displayName": "SankeyLink",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Color of the link.",
        "name": "color",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "active": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the element is active or not. Set internally by `Sankey`.",
        "name": "active",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "chartId": {
        "defaultValue": null,
        "description": "Id of Sankey chart. Set internally by `Sankey`.",
        "name": "chartId",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS class to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the node is disabled. Set internally by `Sankey`.",
        "name": "disabled",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "gradient": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to use gradient or not.",
        "name": "gradient",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "opacity": {
        "defaultValue": {
          "value": "(active, disabled) => (active ? 0.5 : disabled ? 0.1 : 0.35)"
        },
        "description": "Opacity callback for the link.",
        "name": "opacity",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(active: boolean, disabled: boolean) => number"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS styles to apply.",
        "name": "style",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "object"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "(\n    <Tooltip theme={tooltipTheme} followCursor={true} modifiers={[offset(5)]} />\n  )"
        },
        "description": "Tooltip element.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipProps, FC<TooltipProps>>"
        }
      },
      "width": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Width of the link. Set internally by `Sankey`.",
        "name": "width",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when the link is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<SVGPathElement, MouseEvent>) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the link has mouse enter.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<SVGPathElement, MouseEvent>) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the link has mouse leave.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
          "name": "SankeyLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyLink/SankeyLink.tsx",
            "name": "SankeyLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<SVGPathElement, MouseEvent>) => void"
        }
      },
      "source": {
        "defaultValue": null,
        "description": "Link's source node. For convenience, when initializing a Sankey layout using the default node id accessor,\nsource may be the zero-based index of the corresponding node in the nodes array\nreturned by the nodes accessor of the Sankey layout generator rather than object references. Alternatively,\nthe Sankey layout can be configured with a custom node ID accessor to resolve the source node of the link upon initialization.\n\nOnce the Sankey generator is invoked to return the Sankey graph object,\nthe numeric index will be replaced with the corresponding source node object.",
        "name": "source",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyLinkMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyLinkMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number | SankeyNode<NodeExtra, LinkExtra>"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Link's target node. For convenience, when initializing a Sankey layout using the default node id accessor,\ntarget may be the zero-based index of the corresponding node in the nodes array\nreturned by the nodes accessor of the Sankey layout generator rather than object references. Alternatively,\nthe Sankey layout can be configured with a custom node ID accessor to resolve the target node of the link upon initialization.\n\nOnce the Sankey generator is invoked to return the Sankey graph object,\nthe numeric index will be replaced with the corresponding target node object.",
        "name": "target",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyLinkMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyLinkMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number | SankeyNode<NodeExtra, LinkExtra>"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Link's numeric value",
        "name": "value",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyLinkMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyLinkMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y0": {
        "defaultValue": null,
        "description": "Link's vertical starting position (at source node) calculated by Sankey layout generator.",
        "name": "y0",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyLinkMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyLinkMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y1": {
        "defaultValue": null,
        "description": "Link's vertical end position (at target node) calculated by Sankey layout generator.",
        "name": "y1",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyLinkMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyLinkMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Link's zero-based index within the array of links calculated by Sankey layout generator.",
        "name": "index",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyLinkMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyLinkMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/Sankey/SankeyNode/SankeyNode.tsx",
    "description": "",
    "displayName": "SankeyNode",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "ID of the node. If not provided, the node's index will be used.",
        "name": "id",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "Title of the node.",
        "name": "title",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": {
          "value": "rgba(255, 255, 255, 0.2)"
        },
        "description": "Color of the node.",
        "name": "color",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "active": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the element is active or not. Set internally by `Sankey`.",
        "name": "active",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "chartWidth": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `Sankey`.",
        "name": "chartWidth",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS class to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the node is disabled. Set internally by `Sankey`.",
        "name": "disabled",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": {
          "value": "<SankeyLabel />"
        },
        "description": "Label element.",
        "name": "label",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<SankeyLabelProps, FC<Partial<SankeyLabelProps>>>"
        }
      },
      "labelPosition": {
        "defaultValue": null,
        "description": "Label position. Set internally by `Sankey`.",
        "name": "labelPosition",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SankeyLabelPosition"
        }
      },
      "labelPadding": {
        "defaultValue": null,
        "description": "Percentage of total width occupied by labels on\neither side of the graph inside the container.\nSet internally by `Sankey`.",
        "name": "labelPadding",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "opacity": {
        "defaultValue": {
          "value": "(active, disabled) => (active ? 1 : disabled ? 0.2 : 0.9)"
        },
        "description": "Opacity callback for the node.",
        "name": "opacity",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(active: boolean, disabled: boolean) => number"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS styles to apply.",
        "name": "style",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGRectElement>"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "(\n    <Tooltip theme={tooltipTheme} followCursor={true} modifiers={[offset(5)]} />\n  )"
        },
        "description": "Tooltip element.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TooltipProps, FC<TooltipProps>>"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the node. Set internally by `Sankey`.",
        "name": "width",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when the node is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<SVGRectElement, MouseEvent>) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the node has mouse enter.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<SVGRectElement, MouseEvent>) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the node has mouse leave.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
          "name": "SankeyNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/Sankey/SankeyNode/SankeyNode.tsx",
            "name": "SankeyNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<SVGRectElement, MouseEvent>) => void"
        }
      },
      "sourceLinks": {
        "defaultValue": null,
        "description": "Array of outgoing links which have this node as their source.\nThis property is calculated internally by the Sankey layout generator.",
        "name": "sourceLinks",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "SankeyLink<NodeExtra, LinkExtra>[]"
        }
      },
      "targetLinks": {
        "defaultValue": null,
        "description": "Array of incoming links which have this node as their target.\nThis property is calculated internally by the Sankey layout generator.",
        "name": "targetLinks",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "SankeyLink<NodeExtra, LinkExtra>[]"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Node's value calculated by Sankey layout Generator;\nthe sum of link.value for the node’s incoming links.",
        "name": "value",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fixedValue": {
        "defaultValue": null,
        "description": "Node's fixedValue (user-defined)",
        "name": "fixedValue",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Node’s zero-based index within the array of nodes calculated by Sankey layout generator.",
        "name": "index",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "depth": {
        "defaultValue": null,
        "description": "Node’s zero-based graph depth, derived from the graph topology calculated by Sankey layout generator.",
        "name": "depth",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Node’s zero-based graph height, derived from the graph topology calculated by Sankey layout generator.",
        "name": "height",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "x0": {
        "defaultValue": null,
        "description": "Node's minimum horizontal position (derived from the node.depth) calculated by Sankey layout generator.",
        "name": "x0",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "x1": {
        "defaultValue": null,
        "description": "Node’s maximum horizontal position (node.x0 + sankey.nodeWidth) calculated by Sankey layout generator.",
        "name": "x1",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y0": {
        "defaultValue": null,
        "description": "Node's minimum vertical position calculated by Sankey layout generator.",
        "name": "y0",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y1": {
        "defaultValue": null,
        "description": "Node's maximum vertical position (node.y1 - node.y0 is proportional to node.value) calculated by Sankey layout generator.",
        "name": "y1",
        "parent": {
          "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
          "name": "SankeyNodeMinimal"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/d3-sankey/index.d.ts",
            "name": "SankeyNodeMinimal"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
    "description": "",
    "displayName": "ScatterPoint",
    "methods": [],
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Whether the element is active or not. Set internally by `ScatterSeries`.",
        "name": "active",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of the circle element.",
        "name": "size",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number | ((data: ChartInternalShallowDataShape) => number)"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color of the circle.",
        "name": "color",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ColorSchemeType"
        }
      },
      "cursor": {
        "defaultValue": null,
        "description": "Cursor for the element.",
        "name": "cursor",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `ScatterPlot`.",
        "name": "xScale",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `ScatterPlot`.",
        "name": "yScale",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `ScatterPlot`.",
        "name": "height",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit. Set internally by `ScatterSeries`.",
        "name": "animated",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the element in the series. Set internally by `ScatterSeries`.",
        "name": "index",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": null,
        "description": "Tooltip element.",
        "name": "tooltip",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `ScatterPlot`.",
        "name": "data",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `ScatterPlot`.",
        "name": "id",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "glow": {
        "defaultValue": null,
        "description": "Glow styling for the point.",
        "name": "glow",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Glow"
        }
      },
      "symbol": {
        "defaultValue": null,
        "description": "Symbol element to render.",
        "name": "symbol",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartInternalShallowDataShape) => ReactNode"
        }
      },
      "visible": {
        "defaultValue": null,
        "description": "Whether the elment is visiblbe or not.",
        "name": "visible",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartInternalShallowDataShape, index: number) => boolean"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Event for when a symbol is clicked.",
        "name": "onClick",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartInternalShallowDataShape) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Event for when the symbol has mouse enter.",
        "name": "onMouseEnter",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartInternalShallowDataShape) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Event for when the symbol has mouse leave.",
        "name": "onMouseLeave",
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterPoint.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "(data: ChartInternalShallowDataShape) => void"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames to apply to the element.",
        "name": "className",
        "parent": {
          "fileName": "src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS styles to apply to the element.",
        "name": "style",
        "parent": {
          "fileName": "src/common/utils/functions.ts",
          "name": "PropFunctionTypes"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/functions.ts",
            "name": "PropFunctionTypes"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
    "description": "",
    "displayName": "ScatterSeries",
    "methods": [],
    "props": {
      "point": {
        "defaultValue": {
          "value": "<ScatterPoint />"
        },
        "description": "Point that is rendered.",
        "name": "point",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ScatterPointProps, FC<Partial<ScatterPointProps>>>"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis. Set internally by `ScatterPlot`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis. Set internally by `ScatterPlot`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Parsed data shape. Set internally by `ScatterPlot`.",
        "name": "data",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalShallowDataShape[]"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id set internally by `ScatterPlot`.",
        "name": "id",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. Set internally by `ScatterPlot`.",
        "name": "height",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. Set internally by `ScatterPlot`.",
        "name": "width",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isZoomed": {
        "defaultValue": null,
        "description": "Whether the chart has been zoomed or not. Set internally by `ScatterPlot`.",
        "name": "isZoomed",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the enter/update/exit.",
        "name": "animated",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "activeIds": {
        "defaultValue": null,
        "description": "Active element ids to highlight.",
        "name": "activeIds",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "valueMarkers": {
        "defaultValue": null,
        "description": "Value markers line for the chart.",
        "name": "valueMarkers",
        "parent": {
          "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
          "name": "ScatterSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/ScatterPlot/ScatterSeries/ScatterSeries.tsx",
            "name": "ScatterSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearValueMarkerProps, FC<LinearValueMarkerProps>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Brush/Brush.tsx",
    "description": "",
    "displayName": "Brush",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/Brush/Brush.tsx",
          "name": "BrushProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/Brush.tsx",
            "name": "BrushProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/Brush/Brush.tsx",
          "name": "BrushProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/Brush.tsx",
            "name": "BrushProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "src/common/Brush/Brush.tsx",
          "name": "BrushProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/Brush.tsx",
            "name": "BrushProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "",
        "name": "start",
        "parent": {
          "fileName": "src/common/Brush/Brush.tsx",
          "name": "BrushProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/Brush.tsx",
            "name": "BrushProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "",
        "name": "end",
        "parent": {
          "fileName": "src/common/Brush/Brush.tsx",
          "name": "BrushProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/Brush.tsx",
            "name": "BrushProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onBrushChange": {
        "defaultValue": null,
        "description": "",
        "name": "onBrushChange",
        "parent": {
          "fileName": "src/common/Brush/Brush.tsx",
          "name": "BrushProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/Brush.tsx",
            "name": "BrushProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: BrushChangeEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Brush/BrushHandle.tsx",
    "description": "",
    "displayName": "BrushHandle",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/Brush/BrushHandle.tsx",
          "name": "BrushHandleProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/BrushHandle.tsx",
            "name": "BrushHandleProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onHandleDrag": {
        "defaultValue": null,
        "description": "",
        "name": "onHandleDrag",
        "parent": {
          "fileName": "src/common/Brush/BrushHandle.tsx",
          "name": "BrushHandleProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/BrushHandle.tsx",
            "name": "BrushHandleProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(deltaX: number) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Brush/BrushSlice.tsx",
    "description": "",
    "displayName": "BrushSlice",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/Brush/BrushSlice.tsx",
          "name": "BrushSliceProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/BrushSlice.tsx",
            "name": "BrushSliceProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/Brush/BrushSlice.tsx",
          "name": "BrushSliceProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/BrushSlice.tsx",
            "name": "BrushSliceProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "",
        "name": "start",
        "parent": {
          "fileName": "src/common/Brush/BrushSlice.tsx",
          "name": "BrushSliceProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/BrushSlice.tsx",
            "name": "BrushSliceProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "",
        "name": "end",
        "parent": {
          "fileName": "src/common/Brush/BrushSlice.tsx",
          "name": "BrushSliceProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/BrushSlice.tsx",
            "name": "BrushSliceProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onBrushChange": {
        "defaultValue": null,
        "description": "",
        "name": "onBrushChange",
        "parent": {
          "fileName": "src/common/Brush/BrushSlice.tsx",
          "name": "BrushSliceProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/BrushSlice.tsx",
            "name": "BrushSliceProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(event: BrushChangeEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Brush/ChartBrush.tsx",
    "description": "",
    "displayName": "ChartBrush",
    "methods": [],
    "props": {
      "scale": {
        "defaultValue": null,
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Brush/ChartBrush.tsx",
          "name": "ChartBrushProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/ChartBrush.tsx",
            "name": "ChartBrushProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/Brush/ChartBrush.tsx",
          "name": "ChartBrushProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/ChartBrush.tsx",
            "name": "ChartBrushProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/Brush/ChartBrush.tsx",
          "name": "ChartBrushProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Brush/ChartBrush.tsx",
            "name": "ChartBrushProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "reaviz/src/common/Brush/Brush.tsx",
          "name": "BrushConfiguration"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Brush/Brush.tsx",
            "name": "BrushConfiguration"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "",
        "name": "fill",
        "parent": {
          "fileName": "reaviz/src/common/Brush/Brush.tsx",
          "name": "BrushConfiguration"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Brush/Brush.tsx",
            "name": "BrushConfiguration"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "domain": {
        "defaultValue": null,
        "description": "",
        "name": "domain",
        "parent": {
          "fileName": "reaviz/src/common/Brush/Brush.tsx",
          "name": "BrushConfiguration"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Brush/Brush.tsx",
            "name": "BrushConfiguration"
          }
        ],
        "required": false,
        "type": {
          "name": "[ChartDataTypes, ChartDataTypes]"
        }
      },
      "onBrushChange": {
        "defaultValue": null,
        "description": "",
        "name": "onBrushChange",
        "parent": {
          "fileName": "reaviz/src/common/Brush/Brush.tsx",
          "name": "BrushConfiguration"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Brush/Brush.tsx",
            "name": "BrushConfiguration"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Count/Count.tsx",
    "description": "",
    "displayName": "Count",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/common/Count/Count.tsx",
          "name": "CountProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Count/Count.tsx",
            "name": "CountProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "to": {
        "defaultValue": null,
        "description": "Number to animate to",
        "name": "to",
        "parent": {
          "fileName": "reaviz/src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "from": {
        "defaultValue": null,
        "description": "Number to animate from. Defaults 0.",
        "name": "from",
        "parent": {
          "fileName": "reaviz/src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "duration": {
        "defaultValue": null,
        "description": "Duration of the animation in seconds. Defaults 1.",
        "name": "duration",
        "parent": {
          "fileName": "reaviz/src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "delay": {
        "defaultValue": null,
        "description": "Delay of the animation. Defaults 0.",
        "name": "delay",
        "parent": {
          "fileName": "reaviz/src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Localize the number. Defaults true.",
        "name": "format",
        "parent": {
          "fileName": "reaviz/src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "decimalPlaces": {
        "defaultValue": null,
        "description": "Number of decimal places. Defaults 0.",
        "name": "decimalPlaces",
        "parent": {
          "fileName": "reaviz/src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "prefix": {
        "defaultValue": null,
        "description": "Prefix the number with a string or number.",
        "name": "prefix",
        "parent": {
          "fileName": "reaviz/src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "suffix": {
        "defaultValue": null,
        "description": "Suffix the number with a string or number.",
        "name": "suffix",
        "parent": {
          "fileName": "reaviz/src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Count/useCount.tsx",
    "description": "",
    "displayName": "useCount",
    "methods": [],
    "props": {
      "to": {
        "defaultValue": null,
        "description": "Number to animate to",
        "name": "to",
        "parent": {
          "fileName": "src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "from": {
        "defaultValue": null,
        "description": "Number to animate from. Defaults 0.",
        "name": "from",
        "parent": {
          "fileName": "src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "duration": {
        "defaultValue": null,
        "description": "Duration of the animation in seconds. Defaults 1.",
        "name": "duration",
        "parent": {
          "fileName": "src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "delay": {
        "defaultValue": null,
        "description": "Delay of the animation. Defaults 0.",
        "name": "delay",
        "parent": {
          "fileName": "src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Localize the number. Defaults true.",
        "name": "format",
        "parent": {
          "fileName": "src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "decimalPlaces": {
        "defaultValue": null,
        "description": "Number of decimal places. Defaults 0.",
        "name": "decimalPlaces",
        "parent": {
          "fileName": "src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "prefix": {
        "defaultValue": null,
        "description": "Prefix the number with a string or number.",
        "name": "prefix",
        "parent": {
          "fileName": "src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "suffix": {
        "defaultValue": null,
        "description": "Suffix the number with a string or number.",
        "name": "suffix",
        "parent": {
          "fileName": "src/common/Count/useCount.tsx",
          "name": "CountInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/Count/useCount.tsx",
            "name": "CountInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Gestures/Move.tsx",
    "description": "",
    "displayName": "Move",
    "methods": [],
    "props": {
      "cursor": {
        "defaultValue": null,
        "description": "",
        "name": "cursor",
        "parent": {
          "fileName": "src/common/Gestures/Move.tsx",
          "name": "MoveProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Move.tsx",
            "name": "MoveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "src/common/Gestures/Move.tsx",
          "name": "MoveProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Move.tsx",
            "name": "MoveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "preventRightClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "preventRightClick",
        "parent": {
          "fileName": "src/common/Gestures/Move.tsx",
          "name": "MoveProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Move.tsx",
            "name": "MoveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableText": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "disableText",
        "parent": {
          "fileName": "src/common/Gestures/Move.tsx",
          "name": "MoveProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Move.tsx",
            "name": "MoveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "threshold": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "threshold",
        "parent": {
          "fileName": "src/common/Gestures/Move.tsx",
          "name": "MoveProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Move.tsx",
            "name": "MoveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onMoveStart": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onMoveStart",
        "parent": {
          "fileName": "src/common/Gestures/Move.tsx",
          "name": "MoveProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Move.tsx",
            "name": "MoveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMove": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onMove",
        "parent": {
          "fileName": "src/common/Gestures/Move.tsx",
          "name": "MoveProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Move.tsx",
            "name": "MoveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMoveCancel": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onMoveCancel",
        "parent": {
          "fileName": "src/common/Gestures/Move.tsx",
          "name": "MoveProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Move.tsx",
            "name": "MoveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMoveEnd": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onMoveEnd",
        "parent": {
          "fileName": "src/common/Gestures/Move.tsx",
          "name": "MoveProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Move.tsx",
            "name": "MoveProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Gestures/Pan.tsx",
    "description": "",
    "displayName": "Pan",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "threshold": {
        "defaultValue": {
          "value": "10"
        },
        "description": "",
        "name": "threshold",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "cursor": {
        "defaultValue": null,
        "description": "",
        "name": "cursor",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "x": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "x",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "y",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "matrix": {
        "defaultValue": null,
        "description": "",
        "name": "matrix",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "constrain": {
        "defaultValue": null,
        "description": "",
        "name": "constrain",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "globalPanning": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "globalPanning",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onPanStart": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onPanStart",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PanStartEvent) => void"
        }
      },
      "onPanMove": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onPanMove",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PanMoveEvent) => void"
        }
      },
      "onPanEnd": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onPanEnd",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PanEndEvent) => void"
        }
      },
      "onPanCancel": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onPanCancel",
        "parent": {
          "fileName": "src/common/Gestures/Pan.tsx",
          "name": "PanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Pan.tsx",
            "name": "PanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PanCancelEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Gestures/Zoom.tsx",
    "description": "",
    "displayName": "Zoom",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "maxZoom": {
        "defaultValue": {
          "value": "10"
        },
        "description": "",
        "name": "maxZoom",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minZoom": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "minZoom",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scaleFactor": {
        "defaultValue": {
          "value": "0.1"
        },
        "description": "",
        "name": "scaleFactor",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "matrix": {
        "defaultValue": null,
        "description": "",
        "name": "matrix",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "x": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "x",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "y",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "disableMouseWheel": {
        "defaultValue": null,
        "description": "",
        "name": "disableMouseWheel",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "requireZoomModifier": {
        "defaultValue": null,
        "description": "",
        "name": "requireZoomModifier",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onZoom": {
        "defaultValue": null,
        "description": "",
        "name": "onZoom",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(event: ZoomEvent) => void"
        }
      },
      "onZoomEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onZoomEnd",
        "parent": {
          "fileName": "src/common/Gestures/Zoom.tsx",
          "name": "ZoomGestureProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gestures/Zoom.tsx",
            "name": "ZoomGestureProps"
          }
        ],
        "required": true,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Gradient/Gradient.tsx",
    "description": "",
    "displayName": "Gradient",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "src/common/Gradient/Gradient.tsx",
          "name": "GradientProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/Gradient.tsx",
            "name": "GradientProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "stops": {
        "defaultValue": {
          "value": "[\n    <GradientStop offset=\"0%\" stopOpacity={0.3} key=\"start\" />,\n    <GradientStop offset=\"80%\" stopOpacity={1} key=\"stop\" />\n  ]"
        },
        "description": "",
        "name": "stops",
        "parent": {
          "fileName": "src/common/Gradient/Gradient.tsx",
          "name": "GradientProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/Gradient.tsx",
            "name": "GradientProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientStopProps, FC<Partial<GradientStopProps>>>[]"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "parent": {
          "fileName": "src/common/Gradient/Gradient.tsx",
          "name": "GradientProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/Gradient.tsx",
            "name": "GradientProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "direction": {
        "defaultValue": {
          "value": "vertical"
        },
        "description": "",
        "name": "direction",
        "parent": {
          "fileName": "src/common/Gradient/Gradient.tsx",
          "name": "GradientProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/Gradient.tsx",
            "name": "GradientProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"vertical\" | \"horizontal\" | \"radial\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Gradient/GradientStop.tsx",
    "description": "",
    "displayName": "GradientStop",
    "methods": [],
    "props": {
      "offset": {
        "defaultValue": null,
        "description": "",
        "name": "offset",
        "parent": {
          "fileName": "src/common/Gradient/GradientStop.tsx",
          "name": "GradientStopProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/GradientStop.tsx",
            "name": "GradientStopProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "stopOpacity": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "stopOpacity",
        "parent": {
          "fileName": "src/common/Gradient/GradientStop.tsx",
          "name": "GradientStopProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/GradientStop.tsx",
            "name": "GradientStopProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "parent": {
          "fileName": "src/common/Gradient/GradientStop.tsx",
          "name": "GradientStopProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/GradientStop.tsx",
            "name": "GradientStopProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Gradient/RadialGradient.tsx",
    "description": "",
    "displayName": "RadialGradient",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "src/common/Gradient/RadialGradient.tsx",
          "name": "RadialGradientProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/RadialGradient.tsx",
            "name": "RadialGradientProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "stops": {
        "defaultValue": {
          "value": "[\n    <GradientStop offset=\"0%\" stopOpacity={0.2} key=\"start\" />,\n    <GradientStop offset=\"80%\" stopOpacity={0.7} key=\"stop\" />\n  ]"
        },
        "description": "",
        "name": "stops",
        "parent": {
          "fileName": "src/common/Gradient/RadialGradient.tsx",
          "name": "RadialGradientProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/RadialGradient.tsx",
            "name": "RadialGradientProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientStopProps, FC<Partial<GradientStopProps>>>[]"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "parent": {
          "fileName": "src/common/Gradient/RadialGradient.tsx",
          "name": "RadialGradientProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/RadialGradient.tsx",
            "name": "RadialGradientProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "radius": {
        "defaultValue": {
          "value": "30%"
        },
        "description": "",
        "name": "radius",
        "parent": {
          "fileName": "src/common/Gradient/RadialGradient.tsx",
          "name": "RadialGradientProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gradient/RadialGradient.tsx",
            "name": "RadialGradientProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Gridline/GridStripe.tsx",
    "description": "",
    "displayName": "GridStripe",
    "methods": [],
    "props": {
      "position": {
        "defaultValue": null,
        "description": "Position set by the `GridlineSeries`.",
        "name": "position",
        "parent": {
          "fileName": "src/common/Gridline/GridStripe.tsx",
          "name": "GridStripeProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridStripe.tsx",
            "name": "GridStripeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS Classname to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/common/Gridline/GridStripe.tsx",
          "name": "GridStripeProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridStripe.tsx",
            "name": "GridStripeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "Stripe fill color.",
        "name": "fill",
        "parent": {
          "fileName": "src/common/Gridline/GridStripe.tsx",
          "name": "GridStripeProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridStripe.tsx",
            "name": "GridStripeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the line set by the `GridlineSeries`.",
        "name": "height",
        "parent": {
          "fileName": "src/common/Gridline/GridStripe.tsx",
          "name": "GridStripeProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridStripe.tsx",
            "name": "GridStripeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the line set by the `GridlineSeries`.",
        "name": "width",
        "parent": {
          "fileName": "src/common/Gridline/GridStripe.tsx",
          "name": "GridStripeProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridStripe.tsx",
            "name": "GridStripeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "Direction set by the `GridlineSeries`.",
        "name": "direction",
        "parent": {
          "fileName": "src/common/Gridline/GridStripe.tsx",
          "name": "GridStripeProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridStripe.tsx",
            "name": "GridStripeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"all\" | \"x\" | \"y\""
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "D3 Scale set by `GridlineSeries`.",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Gridline/GridStripe.tsx",
          "name": "GridStripeProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridStripe.tsx",
            "name": "GridStripeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data point for the position set by the `GridlineSeries`.",
        "name": "data",
        "parent": {
          "fileName": "src/common/Gridline/GridStripe.tsx",
          "name": "GridStripeProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridStripe.tsx",
            "name": "GridStripeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index set by the `GridlineSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/common/Gridline/GridStripe.tsx",
          "name": "GridStripeProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridStripe.tsx",
            "name": "GridStripeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Gridline/Gridline.tsx",
    "description": "",
    "displayName": "Gridline",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "Height of the line set by the `GridlineSeries`.",
        "name": "height",
        "parent": {
          "fileName": "src/common/Gridline/Gridline.tsx",
          "name": "GridlineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/Gridline.tsx",
            "name": "GridlineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the line set by the `GridlineSeries`.",
        "name": "width",
        "parent": {
          "fileName": "src/common/Gridline/Gridline.tsx",
          "name": "GridlineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/Gridline.tsx",
            "name": "GridlineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS Classname to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/common/Gridline/Gridline.tsx",
          "name": "GridlineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/Gridline.tsx",
            "name": "GridlineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "Direction set by the `GridlineSeries`.",
        "name": "direction",
        "parent": {
          "fileName": "src/common/Gridline/Gridline.tsx",
          "name": "GridlineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/Gridline.tsx",
            "name": "GridlineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"all\" | \"x\" | \"y\""
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "D3 Scale set by `GridlineSeries`.",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Gridline/Gridline.tsx",
          "name": "GridlineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/Gridline.tsx",
            "name": "GridlineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "strokeWidth": {
        "defaultValue": null,
        "description": "SVG Stroke Width Property.",
        "name": "strokeWidth",
        "parent": {
          "fileName": "src/common/Gridline/Gridline.tsx",
          "name": "GridlineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/Gridline.tsx",
            "name": "GridlineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strokeColor": {
        "defaultValue": null,
        "description": "SVG Stroke Color Property.",
        "name": "strokeColor",
        "parent": {
          "fileName": "src/common/Gridline/Gridline.tsx",
          "name": "GridlineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/Gridline.tsx",
            "name": "GridlineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data point for the position set by the `GridlineSeries`.",
        "name": "data",
        "parent": {
          "fileName": "src/common/Gridline/Gridline.tsx",
          "name": "GridlineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/Gridline.tsx",
            "name": "GridlineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index set by the `GridlineSeries`.",
        "name": "index",
        "parent": {
          "fileName": "src/common/Gridline/Gridline.tsx",
          "name": "GridlineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/Gridline.tsx",
            "name": "GridlineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strokeDasharray": {
        "defaultValue": null,
        "description": "SVG Stroke Dash Array Property.",
        "name": "strokeDasharray",
        "parent": {
          "fileName": "src/common/Gridline/Gridline.tsx",
          "name": "GridlineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/Gridline.tsx",
            "name": "GridlineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Gridline/GridlineSeries.tsx",
    "description": "",
    "displayName": "GridlineSeries",
    "methods": [],
    "props": {
      "yScale": {
        "defaultValue": null,
        "description": "D3 scale for Y Axis.",
        "name": "yScale",
        "parent": {
          "fileName": "src/common/Gridline/GridlineSeries.tsx",
          "name": "GridlineSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridlineSeries.tsx",
            "name": "GridlineSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "D3 scale for X Axis.",
        "name": "xScale",
        "parent": {
          "fileName": "src/common/Gridline/GridlineSeries.tsx",
          "name": "GridlineSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridlineSeries.tsx",
            "name": "GridlineSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the Y Axis of the chart.",
        "name": "yAxis",
        "parent": {
          "fileName": "src/common/Gridline/GridlineSeries.tsx",
          "name": "GridlineSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridlineSeries.tsx",
            "name": "GridlineSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "LinearAxisProps"
        }
      },
      "xAxis": {
        "defaultValue": null,
        "description": "The linear axis component for the X Axis of the chart.",
        "name": "xAxis",
        "parent": {
          "fileName": "src/common/Gridline/GridlineSeries.tsx",
          "name": "GridlineSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridlineSeries.tsx",
            "name": "GridlineSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "LinearAxisProps"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart.",
        "name": "height",
        "parent": {
          "fileName": "src/common/Gridline/GridlineSeries.tsx",
          "name": "GridlineSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridlineSeries.tsx",
            "name": "GridlineSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart.",
        "name": "width",
        "parent": {
          "fileName": "src/common/Gridline/GridlineSeries.tsx",
          "name": "GridlineSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridlineSeries.tsx",
            "name": "GridlineSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "line": {
        "defaultValue": {
          "value": "<Gridline direction=\"all\" />"
        },
        "description": "Gridline that is rendered.",
        "name": "line",
        "parent": {
          "fileName": "src/common/Gridline/GridlineSeries.tsx",
          "name": "GridlineSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridlineSeries.tsx",
            "name": "GridlineSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridLineElement"
        }
      },
      "stripe": {
        "defaultValue": null,
        "description": "GridStripe that is rendered.",
        "name": "stripe",
        "parent": {
          "fileName": "src/common/Gridline/GridlineSeries.tsx",
          "name": "GridlineSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Gridline/GridlineSeries.tsx",
            "name": "GridlineSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GridStripeElement"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/MarkLine/MarkLine.tsx",
    "description": "",
    "displayName": "MarkLine",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/MarkLine/MarkLine.tsx",
          "name": "MarkLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/MarkLine/MarkLine.tsx",
            "name": "MarkLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "pointX": {
        "defaultValue": null,
        "description": "",
        "name": "pointX",
        "parent": {
          "fileName": "src/common/MarkLine/MarkLine.tsx",
          "name": "MarkLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/MarkLine/MarkLine.tsx",
            "name": "MarkLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strokeColor": {
        "defaultValue": {
          "value": "#eee"
        },
        "description": "",
        "name": "strokeColor",
        "parent": {
          "fileName": "src/common/MarkLine/MarkLine.tsx",
          "name": "MarkLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/MarkLine/MarkLine.tsx",
            "name": "MarkLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "strokeWidth": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "strokeWidth",
        "parent": {
          "fileName": "src/common/MarkLine/MarkLine.tsx",
          "name": "MarkLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/MarkLine/MarkLine.tsx",
            "name": "MarkLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Mask/Mask.tsx",
    "description": "",
    "displayName": "Mask",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "src/common/Mask/Mask.tsx",
          "name": "MaskProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Mask/Mask.tsx",
            "name": "MaskProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "",
        "name": "fill",
        "parent": {
          "fileName": "src/common/Mask/Mask.tsx",
          "name": "MaskProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Mask/Mask.tsx",
            "name": "MaskProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Mask/Stripes.tsx",
    "description": "",
    "displayName": "Stripes",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "src/common/Mask/Stripes.tsx",
          "name": "StripesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Mask/Stripes.tsx",
            "name": "StripesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "",
        "name": "fill",
        "parent": {
          "fileName": "src/common/Mask/Stripes.tsx",
          "name": "StripesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Mask/Stripes.tsx",
            "name": "StripesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Motion/MotionPath.tsx",
    "description": "",
    "displayName": "MotionPath",
    "methods": [],
    "props": {
      "custom": {
        "defaultValue": null,
        "description": "",
        "name": "custom",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "transition": {
        "defaultValue": null,
        "description": "",
        "name": "transition",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Tooltip/ChartTooltip.tsx",
    "description": "",
    "displayName": "ChartTooltip",
    "methods": [],
    "props": {
      "content": {
        "defaultValue": {
          "value": "<TooltipTemplate />"
        },
        "description": "Content for the tooltip.",
        "name": "content",
        "parent": {
          "fileName": "src/common/Tooltip/ChartTooltip.tsx",
          "name": "ChartTooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/ChartTooltip.tsx",
            "name": "ChartTooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Tooltip data value.",
        "name": "value",
        "parent": {
          "fileName": "src/common/Tooltip/ChartTooltip.tsx",
          "name": "ChartTooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/ChartTooltip.tsx",
            "name": "ChartTooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color scheme to apply.",
        "name": "color",
        "parent": {
          "fileName": "src/common/Tooltip/ChartTooltip.tsx",
          "name": "ChartTooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/ChartTooltip.tsx",
            "name": "ChartTooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Complete dataset.",
        "name": "data",
        "parent": {
          "fileName": "src/common/Tooltip/ChartTooltip.tsx",
          "name": "ChartTooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/ChartTooltip.tsx",
            "name": "ChartTooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "followCursor": {
        "defaultValue": null,
        "description": "Whether the tooltip should move with the cursor or not.",
        "name": "followCursor",
        "parent": {
          "fileName": "src/common/Tooltip/ChartTooltip.tsx",
          "name": "ChartTooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/ChartTooltip.tsx",
            "name": "ChartTooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Content to wrap.",
        "name": "children",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "closeOnClick": {
        "defaultValue": null,
        "description": "Close on any click.",
        "name": "closeOnClick",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnBodyClick": {
        "defaultValue": null,
        "description": "Close when the body is clicked.",
        "name": "closeOnBodyClick",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": null,
        "description": "Close when escape key is triggered.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "reference": {
        "defaultValue": null,
        "description": "Reference of the tooltip to align to.",
        "name": "reference",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "placement": {
        "defaultValue": null,
        "description": "floating-ui placement.",
        "name": "placement",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "enterDelay": {
        "defaultValue": null,
        "description": "Delay before showing tooltip.",
        "name": "enterDelay",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "leaveDelay": {
        "defaultValue": null,
        "description": "Delay before closing tooltip.",
        "name": "leaveDelay",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "modifiers": {
        "defaultValue": null,
        "description": "floating-ui modifiers.",
        "name": "modifiers",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Modifiers"
        }
      },
      "visible": {
        "defaultValue": null,
        "description": "External setter for visibility.",
        "name": "visible",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classnames.",
        "name": "className",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "triggerClassName": {
        "defaultValue": null,
        "description": "CSS Classname for the tooltip container ( ie. the thing that the tooltip is bound to ).",
        "name": "triggerClassName",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "trigger": {
        "defaultValue": null,
        "description": "How the tooltip will be triggered.",
        "name": "trigger",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TriggerTypes | TriggerTypes[]"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the tooltip is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "pointerEvents": {
        "defaultValue": null,
        "description": "Add pointer events or not. Usually not for tooltips.",
        "name": "pointerEvents",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "isPopover": {
        "defaultValue": null,
        "description": "Differentiator for popovers to be handled separate from tooltips",
        "name": "isPopover",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "Tooltip was opened.",
        "name": "onOpen",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Tooltip was closed.",
        "name": "onClose",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the tooltip.",
        "name": "theme",
        "parent": {
          "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/reablocks/dist/src/layers/Tooltip/Tooltip.d.ts",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TooltipTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Tooltip/TooltipArea.tsx",
    "description": "",
    "displayName": "TooltipArea",
    "methods": [],
    "props": {
      "placement": {
        "defaultValue": null,
        "description": "Popperjs placement.",
        "name": "placement",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Chart height. Set internally.",
        "name": "height",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Chart width. Set internally.",
        "name": "width",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "Chart D3 XScale. Set internally.",
        "name": "xScale",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "Chart D3 YScale. Set internally.",
        "name": "yScale",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the tooltip is disabled or not.",
        "name": "disabled",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color setter.",
        "name": "color",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Chart internal data type.",
        "name": "data",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Child elements to be contained by.",
        "name": "children",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "isRadial": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the area is radial or not.",
        "name": "isRadial",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isContinous": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the area is continous or not (e.g. line and area charts are continous, bar charts are not).",
        "name": "isContinous",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "Inner-radius to set the positioning by. Set internally.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "Outer-radius to set the positioning by. Set internally.",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "<ChartTooltip />"
        },
        "description": "Tooltip element.",
        "name": "tooltip",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<ChartTooltipProps, FC<Partial<ChartTooltipProps>>>"
        }
      },
      "inverse": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to inverse the data or not.",
        "name": "inverse",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onValueEnter": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "When pointer entered mouse area.",
        "name": "onValueEnter",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: TooltipAreaEvent) => void"
        }
      },
      "onValueLeave": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "When pointer left mouse area.",
        "name": "onValueLeave",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "isHorizontal": {
        "defaultValue": null,
        "description": "Whether the layout is horizontal or not.",
        "name": "isHorizontal",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "startAngle": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": {
          "value": "2 * Math.PI"
        },
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipArea.tsx",
          "name": "TooltipAreaProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipArea.tsx",
            "name": "TooltipAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).\n@see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}",
        "name": "ref",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<any>"
        }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "Attributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Key"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Tooltip/TooltipTemplate.tsx",
    "description": "",
    "displayName": "TooltipTemplate",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "Tooltip data value.",
        "name": "value",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipTemplate.tsx",
          "name": "TooltipTemplateProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipTemplate.tsx",
            "name": "TooltipTemplateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SingleTooltipValue | MultipleTooltipValues"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color scheme to apply.",
        "name": "color",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipTemplate.tsx",
          "name": "TooltipTemplateProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipTemplate.tsx",
            "name": "TooltipTemplateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to apply.",
        "name": "className",
        "parent": {
          "fileName": "src/common/Tooltip/TooltipTemplate.tsx",
          "name": "TooltipTemplateProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Tooltip/TooltipTemplate.tsx",
            "name": "TooltipTemplateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/ValueMarker/LinearValueMarker.tsx",
    "description": "",
    "displayName": "LinearValueMarker",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "parent": {
          "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
          "name": "LinearValueMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
            "name": "LinearValueMarkerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "parent": {
          "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
          "name": "LinearValueMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
            "name": "LinearValueMarkerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
          "name": "LinearValueMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
            "name": "LinearValueMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "thickness": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "thickness",
        "parent": {
          "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
          "name": "LinearValueMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
            "name": "LinearValueMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
          "name": "LinearValueMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
            "name": "LinearValueMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "direction": {
        "defaultValue": {
          "value": "horizontal"
        },
        "description": "",
        "name": "direction",
        "parent": {
          "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
          "name": "LinearValueMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ValueMarker/LinearValueMarker.tsx",
            "name": "LinearValueMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/ValueMarker/RadialValueMarker.tsx",
    "description": "",
    "displayName": "RadialValueMarker",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "parent": {
          "fileName": "src/common/ValueMarker/RadialValueMarker.tsx",
          "name": "RadialValueMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ValueMarker/RadialValueMarker.tsx",
            "name": "RadialValueMarkerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "parent": {
          "fileName": "src/common/ValueMarker/RadialValueMarker.tsx",
          "name": "RadialValueMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ValueMarker/RadialValueMarker.tsx",
            "name": "RadialValueMarkerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/common/ValueMarker/RadialValueMarker.tsx",
          "name": "RadialValueMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ValueMarker/RadialValueMarker.tsx",
            "name": "RadialValueMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "thickness": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "thickness",
        "parent": {
          "fileName": "src/common/ValueMarker/RadialValueMarker.tsx",
          "name": "RadialValueMarkerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ValueMarker/RadialValueMarker.tsx",
            "name": "RadialValueMarkerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/ZoomPan/ChartZoomPan.tsx",
    "description": "",
    "displayName": "ChartZoomPan",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "",
        "name": "data",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartInternalDataShape[]"
        }
      },
      "domain": {
        "defaultValue": null,
        "description": "",
        "name": "domain",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "[ChartDataTypes, ChartDataTypes]"
        }
      },
      "axisType": {
        "defaultValue": null,
        "description": "",
        "name": "axisType",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"value\" | \"time\" | \"category\" | \"duration\""
        }
      },
      "roundDomains": {
        "defaultValue": null,
        "description": "",
        "name": "roundDomains",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "offset": {
        "defaultValue": null,
        "description": "",
        "name": "offset",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "pannable": {
        "defaultValue": null,
        "description": "",
        "name": "pannable",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zoomable": {
        "defaultValue": null,
        "description": "",
        "name": "zoomable",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "maxZoom": {
        "defaultValue": null,
        "description": "",
        "name": "maxZoom",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "zoomStep": {
        "defaultValue": null,
        "description": "",
        "name": "zoomStep",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "disableMouseWheel": {
        "defaultValue": null,
        "description": "",
        "name": "disableMouseWheel",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "requireZoomModifier": {
        "defaultValue": null,
        "description": "",
        "name": "requireZoomModifier",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onZoomPan": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onZoomPan",
        "parent": {
          "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
          "name": "ChartZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ChartZoomPan.tsx",
            "name": "ChartZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ZoomPanChangeEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/ZoomPan/ZoomPan.tsx",
    "description": "",
    "displayName": "ZoomPan",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": {
          "value": "1"
        },
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "x": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "x",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "y": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "y",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "pannable": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "pannable",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zoomable": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "zoomable",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "maxZoom": {
        "defaultValue": {
          "value": "10"
        },
        "description": "",
        "name": "maxZoom",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "minZoom": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "minZoom",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "zoomStep": {
        "defaultValue": {
          "value": "0.1"
        },
        "description": "",
        "name": "zoomStep",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "constrain": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "constrain",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "globalPanning": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "globalPanning",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableMouseWheel": {
        "defaultValue": null,
        "description": "",
        "name": "disableMouseWheel",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "requireZoomModifier": {
        "defaultValue": null,
        "description": "",
        "name": "requireZoomModifier",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onZoomPan": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onZoomPan",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ZoomPanEvent) => void"
        }
      },
      "onZoom": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onZoom",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ZoomEvent) => void"
        }
      },
      "onZoomEnd": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onZoomEnd",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onPanStart": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onPanStart",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PanStartEvent) => void"
        }
      },
      "onPanMove": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onPanMove",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PanMoveEvent) => void"
        }
      },
      "onPanEnd": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onPanEnd",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PanEndEvent) => void"
        }
      },
      "onPanCancel": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "",
        "name": "onPanCancel",
        "parent": {
          "fileName": "src/common/ZoomPan/ZoomPan.tsx",
          "name": "ZoomPanProps"
        },
        "declarations": [
          {
            "fileName": "src/common/ZoomPan/ZoomPan.tsx",
            "name": "ZoomPanProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: PanCancelEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/containers/ChartContainer.tsx",
    "description": "",
    "displayName": "ChartContainer",
    "methods": [],
    "props": {
      "xAxisVisible": {
        "defaultValue": null,
        "description": "Internal property to identify if the xAxis is visible.",
        "name": "xAxisVisible",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartContainerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartContainerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "yAxisVisible": {
        "defaultValue": null,
        "description": "Internal property to identify if the xAxis is visible.",
        "name": "yAxisVisible",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartContainerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartContainerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Children elements to recieve the calculated props.",
        "name": "children",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartContainerProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartContainerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(props: ChartContextProps) => any"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "Id of the chart.",
        "name": "id",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the chart. If not provided will autosize.",
        "name": "width",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "Height of the chart. If not provided will autosize.",
        "name": "height",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "margins": {
        "defaultValue": null,
        "description": "Margins for the chart.",
        "name": "margins",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Margins"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "className",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Classnames for the chart.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles.",
        "name": "style",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<SVGSVGElement>"
        }
      },
      "center": {
        "defaultValue": null,
        "description": "Center the chart. Used mainly internally.",
        "name": "center",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerX": {
        "defaultValue": null,
        "description": "Center chart on X Axis only. Used mainly internally.",
        "name": "centerX",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "centerY": {
        "defaultValue": null,
        "description": "Center chart on Y Axis only. Used mainly internally.",
        "name": "centerY",
        "parent": {
          "fileName": "src/common/containers/ChartContainer.tsx",
          "name": "ChartProps"
        },
        "declarations": [
          {
            "fileName": "src/common/containers/ChartContainer.tsx",
            "name": "ChartProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/utils/wrapText.tsx",
    "description": "",
    "displayName": "wrapText",
    "methods": [],
    "props": {
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "x": {
        "defaultValue": {
          "value": "0"
        },
        "description": "",
        "name": "x",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "paddingY": {
        "defaultValue": null,
        "description": "",
        "name": "paddingY",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "paddingX": {
        "defaultValue": null,
        "description": "",
        "name": "paddingX",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": null,
        "description": "",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "fontSize": {
        "defaultValue": null,
        "description": "",
        "name": "fontSize",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "wrap": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "wrap",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "{ width: number; height: number; }"
        }
      },
      "visibility": {
        "defaultValue": {
          "value": "auto"
        },
        "description": "",
        "name": "visibility",
        "parent": {
          "fileName": "src/common/utils/wrapText.tsx",
          "name": "WrapTextInputs"
        },
        "declarations": [
          {
            "fileName": "src/common/utils/wrapText.tsx",
            "name": "WrapTextInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "\"auto\" | \"always\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
    "description": "",
    "displayName": "FunnelAxis",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data to render the funnel. Set internally by `FunnelChart`.",
        "name": "data",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
          "name": "FunnelAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
            "name": "FunnelAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>[]"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "xScale for the funnel. Set internally by `FunnelChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
          "name": "FunnelAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
            "name": "FunnelAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "yScale for the funnel. Set internally by `FunnelChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
          "name": "FunnelAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
            "name": "FunnelAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "line": {
        "defaultValue": {
          "value": "<FunnelAxisLine />"
        },
        "description": "The funnel axis line.",
        "name": "line",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
          "name": "FunnelAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
            "name": "FunnelAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<FunnelAxisLineProps, FC<Partial<FunnelAxisLineProps>>>"
        }
      },
      "label": {
        "defaultValue": {
          "value": "<FunnelAxisLabel />"
        },
        "description": "Label component for the axis.",
        "name": "label",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
          "name": "FunnelAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxis.tsx",
            "name": "FunnelAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<FunnelAxisLabelProps, FC<Partial<FunnelAxisLabelProps>>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
    "description": "",
    "displayName": "FunnelAxisLabel",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data object for the label. Set internally by `FunnelAxis`.",
        "name": "data",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the label. Set internally by `FunnelAxis`.",
        "name": "index",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "#fff"
        },
        "description": "Color of the text.",
        "name": "fill",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fontSize": {
        "defaultValue": {
          "value": "13"
        },
        "description": "Font size of the text.",
        "name": "fontSize",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": {
          "value": "sans-serif"
        },
        "description": "Font family of the text.",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "padding": {
        "defaultValue": {
          "value": "10"
        },
        "description": "Padding of the label.",
        "name": "padding",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name to apply to the text.",
        "name": "className",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "xScale for the funnel. Set internally by `FunnelAxis`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "yScale for the funnel. Set internally by `FunnelAxis`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "position": {
        "defaultValue": {
          "value": "middle"
        },
        "description": "Positioning of the label.",
        "name": "position",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"top\" | \"middle\" | \"bottom\""
        }
      },
      "showValue": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to show the value of the data.\nDefaults to `true`.",
        "name": "showValue",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "labelVisibility": {
        "defaultValue": {
          "value": "auto"
        },
        "description": "Visibility of the label.",
        "name": "labelVisibility",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
          "name": "FunnelAxisLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLabel.tsx",
            "name": "FunnelAxisLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"auto\" | \"always\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
    "description": "",
    "displayName": "FunnelAxisLine",
    "methods": [],
    "props": {
      "strokeColor": {
        "defaultValue": {
          "value": "#333"
        },
        "description": "Color of the axis lines.",
        "name": "strokeColor",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
          "name": "FunnelAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
            "name": "FunnelAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "strokeWidth": {
        "defaultValue": {
          "value": "2"
        },
        "description": "Width of the axis lines.",
        "name": "strokeWidth",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
          "name": "FunnelAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
            "name": "FunnelAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "xScale for the funnel. Set internally by `FunnelChart`.",
        "name": "xScale",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
          "name": "FunnelAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
            "name": "FunnelAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "yScale": {
        "defaultValue": null,
        "description": "yScale for the funnel. Set internally by `FunnelChart`.",
        "name": "yScale",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
          "name": "FunnelAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
            "name": "FunnelAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the line. Set internally by `FunnelAxis`.",
        "name": "index",
        "parent": {
          "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
          "name": "FunnelAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/FunnelChart/FunnelSeries/FunnelAxis/FunnelAxisLine.tsx",
            "name": "FunnelAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialGauge/RadialGaugeSeries/RadialGaugeLabel/RadialGaugeLabel.tsx",
    "description": "",
    "displayName": "RadialGaugeLabel",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data set by the `RadialGaugeSeries` component.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeLabel/RadialGaugeLabel.tsx",
          "name": "RadialGaugeLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeLabel/RadialGaugeLabel.tsx",
            "name": "RadialGaugeLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>"
        }
      },
      "offset": {
        "defaultValue": null,
        "description": "Offset set by the `RadialGaugeSeries` component.",
        "name": "offset",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeLabel/RadialGaugeLabel.tsx",
          "name": "RadialGaugeLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeLabel/RadialGaugeLabel.tsx",
            "name": "RadialGaugeLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classname to apply to the label.",
        "name": "className",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeLabel/RadialGaugeLabel.tsx",
          "name": "RadialGaugeLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeLabel/RadialGaugeLabel.tsx",
            "name": "RadialGaugeLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "onClick": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "Label click event.",
        "name": "onClick",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeLabel/RadialGaugeLabel.tsx",
          "name": "RadialGaugeLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeLabel/RadialGaugeLabel.tsx",
            "name": "RadialGaugeLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: { data: any; nativeEvent: any; }) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialGauge/RadialGaugeSeries/RadialGaugeValueLabel/RadialGaugeValueLabel.tsx",
    "description": "",
    "displayName": "RadialGaugeValueLabel",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data set by the `RadialGaugeSeries` component.",
        "name": "data",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeValueLabel/RadialGaugeValueLabel.tsx",
          "name": "RadialGaugeValueLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeValueLabel/RadialGaugeValueLabel.tsx",
            "name": "RadialGaugeValueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartShallowDataShape<ChartDataTypes | [ChartDataTypes, ChartDataTypes]>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Classname to apply to the value label.",
        "name": "className",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeValueLabel/RadialGaugeValueLabel.tsx",
          "name": "RadialGaugeValueLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/RadialGaugeValueLabel/RadialGaugeValueLabel.tsx",
            "name": "RadialGaugeValueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeDescriptionLabel/StackedRadialGaugeDescriptionLabel.tsx",
    "description": "",
    "displayName": "StackedRadialGaugeDescriptionLabel",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "A label shown at the center",
        "name": "label",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeDescriptionLabel/StackedRadialGaugeDescriptionLabel.tsx",
          "name": "StackedRadialGaugeDescriptionLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeDescriptionLabel/StackedRadialGaugeDescriptionLabel.tsx",
            "name": "StackedRadialGaugeDescriptionLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A class name to apply",
        "name": "className",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeDescriptionLabel/StackedRadialGaugeDescriptionLabel.tsx",
          "name": "StackedRadialGaugeDescriptionLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeDescriptionLabel/StackedRadialGaugeDescriptionLabel.tsx",
            "name": "StackedRadialGaugeDescriptionLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "yOffset": {
        "defaultValue": {
          "value": "0"
        },
        "description": "A y offset to apply to the label",
        "name": "yOffset",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeDescriptionLabel/StackedRadialGaugeDescriptionLabel.tsx",
          "name": "StackedRadialGaugeDescriptionLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeDescriptionLabel/StackedRadialGaugeDescriptionLabel.tsx",
            "name": "StackedRadialGaugeDescriptionLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeValueLabel/StackedRadialGaugeValueLabel.tsx",
    "description": "",
    "displayName": "StackedRadialGaugeValueLabel",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "A label shown at the center",
        "name": "label",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeValueLabel/StackedRadialGaugeValueLabel.tsx",
          "name": "StackedRadialGaugeValueLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeValueLabel/StackedRadialGaugeValueLabel.tsx",
            "name": "StackedRadialGaugeValueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A class name to apply",
        "name": "className",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeValueLabel/StackedRadialGaugeValueLabel.tsx",
          "name": "StackedRadialGaugeValueLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeValueLabel/StackedRadialGaugeValueLabel.tsx",
            "name": "StackedRadialGaugeValueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "yOffset": {
        "defaultValue": {
          "value": "0"
        },
        "description": "A y offset to apply to the label",
        "name": "yOffset",
        "parent": {
          "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeValueLabel/StackedRadialGaugeValueLabel.tsx",
          "name": "StackedRadialGaugeValueLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/RadialGauge/RadialGaugeSeries/StackedRadialGaugeValueLabel/StackedRadialGaugeValueLabel.tsx",
            "name": "StackedRadialGaugeValueLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearAxis.tsx",
    "description": "",
    "displayName": "LinearAxis",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "domain": {
        "defaultValue": null,
        "description": "",
        "name": "domain",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartDataTypes[]"
        }
      },
      "scaled": {
        "defaultValue": null,
        "description": "",
        "name": "scaled",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "roundDomains": {
        "defaultValue": null,
        "description": "",
        "name": "roundDomains",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"value\" | \"time\" | \"category\" | \"duration\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "tickSeries": {
        "defaultValue": null,
        "description": "",
        "name": "tickSeries",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickSeriesProps, FC<Partial<LinearAxisTickSeriesProps>>>"
        }
      },
      "axisLine": {
        "defaultValue": null,
        "description": "",
        "name": "axisLine",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisLineProps, FC<Partial<LinearAxisLineProps>>>"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "visibility": {
        "defaultValue": null,
        "description": "",
        "name": "visibility",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"visible\" | \"hidden\""
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "onDimensionsChange": {
        "defaultValue": null,
        "description": "",
        "name": "onDimensionsChange",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: LinearAxisDimensionChanged) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
    "description": "",
    "displayName": "LinearAxisLine",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
          "name": "LinearAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
            "name": "LinearAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
          "name": "LinearAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
            "name": "LinearAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strokeColor": {
        "defaultValue": null,
        "description": "",
        "name": "strokeColor",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
          "name": "LinearAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
            "name": "LinearAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "strokeWidth": {
        "defaultValue": null,
        "description": "",
        "name": "strokeWidth",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
          "name": "LinearAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
            "name": "LinearAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strokeGradient": {
        "defaultValue": null,
        "description": "",
        "name": "strokeGradient",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
          "name": "LinearAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
            "name": "LinearAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<GradientProps, FC<Partial<GradientProps>>>"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
          "name": "LinearAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
            "name": "LinearAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
          "name": "LinearAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
            "name": "LinearAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
          "name": "LinearAxisLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisLine.tsx",
            "name": "LinearAxisLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
    "description": "",
    "displayName": "LinearAxisTickLabel",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "",
        "name": "text",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fullText": {
        "defaultValue": null,
        "description": "",
        "name": "fullText",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "angle": {
        "defaultValue": null,
        "description": "",
        "name": "angle",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "half": {
        "defaultValue": null,
        "description": "",
        "name": "half",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "line": {
        "defaultValue": null,
        "description": "",
        "name": "line",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickLineProps, FC<Partial<LinearAxisTickLineProps>>>"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "",
        "name": "format",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(v: any) => any"
        }
      },
      "formatTooltip": {
        "defaultValue": null,
        "description": "Format tooltip title on hover label.",
        "name": "formatTooltip",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: any) => any"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "",
        "name": "fill",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fontSize": {
        "defaultValue": null,
        "description": "",
        "name": "fontSize",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": null,
        "description": "",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rotation": {
        "defaultValue": null,
        "description": "",
        "name": "rotation",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | boolean"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "",
        "name": "padding",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | { fromAxis: number; alongAxis: number; }"
        }
      },
      "textAnchor": {
        "defaultValue": null,
        "description": "",
        "name": "textAnchor",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"middle\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\" | \"inside\" | \"outside\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
    "description": "",
    "displayName": "LinearAxisTickLine",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strokeColor": {
        "defaultValue": null,
        "description": "",
        "name": "strokeColor",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "strokeWidth": {
        "defaultValue": null,
        "description": "",
        "name": "strokeWidth",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
    "description": "",
    "displayName": "LinearAxisTickSeries",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "interval": {
        "defaultValue": null,
        "description": "",
        "name": "interval",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | TimeInterval"
        }
      },
      "tickSize": {
        "defaultValue": null,
        "description": "",
        "name": "tickSize",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tickValues": {
        "defaultValue": null,
        "description": "",
        "name": "tickValues",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickLabelProps, FC<Partial<LinearAxisTickLabelProps>>>"
        }
      },
      "line": {
        "defaultValue": null,
        "description": "",
        "name": "line",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickLineProps, FC<Partial<LinearAxisTickLineProps>>>"
        }
      },
      "axis": {
        "defaultValue": null,
        "description": "",
        "name": "axis",
        "parent": {
          "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "LinearAxisProps"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearXAxis.tsx",
    "description": "",
    "displayName": "LinearXAxisTickLabel",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "",
        "name": "text",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fullText": {
        "defaultValue": null,
        "description": "",
        "name": "fullText",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "angle": {
        "defaultValue": null,
        "description": "",
        "name": "angle",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "half": {
        "defaultValue": null,
        "description": "",
        "name": "half",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "line": {
        "defaultValue": null,
        "description": "",
        "name": "line",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickLineProps, FC<Partial<LinearAxisTickLineProps>>>"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "",
        "name": "format",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(v: any) => any"
        }
      },
      "formatTooltip": {
        "defaultValue": null,
        "description": "Format tooltip title on hover label.",
        "name": "formatTooltip",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: any) => any"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "",
        "name": "fill",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fontSize": {
        "defaultValue": null,
        "description": "",
        "name": "fontSize",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": null,
        "description": "",
        "name": "fontFamily",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rotation": {
        "defaultValue": null,
        "description": "",
        "name": "rotation",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | boolean"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "",
        "name": "padding",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | { fromAxis: number; alongAxis: number; }"
        }
      },
      "textAnchor": {
        "defaultValue": null,
        "description": "",
        "name": "textAnchor",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"middle\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\" | \"inside\" | \"outside\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearXAxis.tsx",
    "description": "",
    "displayName": "LinearXAxisTickLine",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strokeColor": {
        "defaultValue": null,
        "description": "",
        "name": "strokeColor",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "strokeWidth": {
        "defaultValue": null,
        "description": "",
        "name": "strokeWidth",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearXAxis.tsx",
    "description": "",
    "displayName": "LinearXAxisTickSeries",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "interval": {
        "defaultValue": null,
        "description": "",
        "name": "interval",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | TimeInterval"
        }
      },
      "tickSize": {
        "defaultValue": null,
        "description": "",
        "name": "tickSize",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tickValues": {
        "defaultValue": null,
        "description": "",
        "name": "tickValues",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickLabelProps, FC<Partial<LinearAxisTickLabelProps>>>"
        }
      },
      "line": {
        "defaultValue": null,
        "description": "",
        "name": "line",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickLineProps, FC<Partial<LinearAxisTickLineProps>>>"
        }
      },
      "axis": {
        "defaultValue": null,
        "description": "",
        "name": "axis",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "LinearAxisProps"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearXAxis.tsx",
    "description": "",
    "displayName": "LinearXAxis",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "domain": {
        "defaultValue": null,
        "description": "",
        "name": "domain",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartDataTypes[]"
        }
      },
      "scaled": {
        "defaultValue": null,
        "description": "",
        "name": "scaled",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "roundDomains": {
        "defaultValue": null,
        "description": "",
        "name": "roundDomains",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"value\" | \"time\" | \"category\" | \"duration\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "tickSeries": {
        "defaultValue": null,
        "description": "",
        "name": "tickSeries",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickSeriesProps, FC<Partial<LinearAxisTickSeriesProps>>>"
        }
      },
      "axisLine": {
        "defaultValue": null,
        "description": "",
        "name": "axisLine",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisLineProps, FC<Partial<LinearAxisLineProps>>>"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "visibility": {
        "defaultValue": null,
        "description": "",
        "name": "visibility",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"visible\" | \"hidden\""
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "onDimensionsChange": {
        "defaultValue": null,
        "description": "",
        "name": "onDimensionsChange",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: LinearAxisDimensionChanged) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearYAxis.tsx",
    "description": "",
    "displayName": "LinearYAxisTickLabel",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "",
        "name": "text",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fullText": {
        "defaultValue": null,
        "description": "",
        "name": "fullText",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "angle": {
        "defaultValue": null,
        "description": "",
        "name": "angle",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "half": {
        "defaultValue": null,
        "description": "",
        "name": "half",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "line": {
        "defaultValue": null,
        "description": "",
        "name": "line",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickLineProps, FC<Partial<LinearAxisTickLineProps>>>"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "",
        "name": "format",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(v: any) => any"
        }
      },
      "formatTooltip": {
        "defaultValue": null,
        "description": "Format tooltip title on hover label.",
        "name": "formatTooltip",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: any) => any"
        }
      },
      "fill": {
        "defaultValue": null,
        "description": "",
        "name": "fill",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fontSize": {
        "defaultValue": null,
        "description": "",
        "name": "fontSize",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": null,
        "description": "",
        "name": "fontFamily",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rotation": {
        "defaultValue": null,
        "description": "",
        "name": "rotation",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | boolean"
        }
      },
      "padding": {
        "defaultValue": null,
        "description": "",
        "name": "padding",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | { fromAxis: number; alongAxis: number; }"
        }
      },
      "textAnchor": {
        "defaultValue": null,
        "description": "",
        "name": "textAnchor",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"middle\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "align": {
        "defaultValue": null,
        "description": "",
        "name": "align",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\" | \"inside\" | \"outside\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
          "name": "LinearAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLabel.tsx",
            "name": "LinearAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearYAxis.tsx",
    "description": "",
    "displayName": "LinearYAxisTickLine",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "strokeColor": {
        "defaultValue": null,
        "description": "",
        "name": "strokeColor",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "strokeWidth": {
        "defaultValue": null,
        "description": "",
        "name": "strokeWidth",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
          "name": "LinearAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickLine.tsx",
            "name": "LinearAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearYAxis.tsx",
    "description": "",
    "displayName": "LinearYAxisTickSeries",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "interval": {
        "defaultValue": null,
        "description": "",
        "name": "interval",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | TimeInterval"
        }
      },
      "tickSize": {
        "defaultValue": null,
        "description": "",
        "name": "tickSize",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tickValues": {
        "defaultValue": null,
        "description": "",
        "name": "tickValues",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickLabelProps, FC<Partial<LinearAxisTickLabelProps>>>"
        }
      },
      "line": {
        "defaultValue": null,
        "description": "",
        "name": "line",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickLineProps, FC<Partial<LinearAxisTickLineProps>>>"
        }
      },
      "axis": {
        "defaultValue": null,
        "description": "",
        "name": "axis",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
          "name": "LinearAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxisTickSeries.tsx",
            "name": "LinearAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "LinearAxisProps"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/LinearAxis/LinearYAxis.tsx",
    "description": "",
    "displayName": "LinearYAxis",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "domain": {
        "defaultValue": null,
        "description": "",
        "name": "domain",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChartDataTypes[]"
        }
      },
      "scaled": {
        "defaultValue": null,
        "description": "",
        "name": "scaled",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "roundDomains": {
        "defaultValue": null,
        "description": "",
        "name": "roundDomains",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"value\" | \"time\" | \"category\" | \"duration\""
        }
      },
      "position": {
        "defaultValue": null,
        "description": "",
        "name": "position",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\""
        }
      },
      "tickSeries": {
        "defaultValue": null,
        "description": "",
        "name": "tickSeries",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisTickSeriesProps, FC<Partial<LinearAxisTickSeriesProps>>>"
        }
      },
      "axisLine": {
        "defaultValue": null,
        "description": "",
        "name": "axisLine",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<LinearAxisLineProps, FC<Partial<LinearAxisLineProps>>>"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "visibility": {
        "defaultValue": null,
        "description": "",
        "name": "visibility",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"visible\" | \"hidden\""
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "onDimensionsChange": {
        "defaultValue": null,
        "description": "",
        "name": "onDimensionsChange",
        "parent": {
          "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
          "name": "LinearAxisProps"
        },
        "declarations": [
          {
            "fileName": "reaviz/src/common/Axis/LinearAxis/LinearAxis.tsx",
            "name": "LinearAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: LinearAxisDimensionChanged) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/RadialAxis/RadialAxis.tsx",
    "description": "",
    "displayName": "RadialAxis",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": null,
        "description": "Height of the axis.",
        "name": "height",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
          "name": "RadialAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
            "name": "RadialAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "Width of the axis.",
        "name": "width",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
          "name": "RadialAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
            "name": "RadialAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "xScale": {
        "defaultValue": null,
        "description": "Scale to use for the axis.",
        "name": "xScale",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
          "name": "RadialAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
            "name": "RadialAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "Inner radius of the axis.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
          "name": "RadialAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
            "name": "RadialAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "Type of the axis.",
        "name": "type",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
          "name": "RadialAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
            "name": "RadialAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"value\" | \"time\" | \"category\""
        }
      },
      "arcs": {
        "defaultValue": null,
        "description": "Arc element to render.",
        "name": "arcs",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
          "name": "RadialAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
            "name": "RadialAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAxisArcSeriesProps, FC<Partial<RadialAxisArcSeriesProps>>>"
        }
      },
      "ticks": {
        "defaultValue": null,
        "description": "Tick element to render.",
        "name": "ticks",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
          "name": "RadialAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
            "name": "RadialAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAxisTickSeriesProps, FC<Partial<RadialAxisTickSeriesProps>>>"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
          "name": "RadialAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
            "name": "RadialAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
          "name": "RadialAxisProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxis.tsx",
            "name": "RadialAxisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/legends/DiscreteLegend/DiscreteLegend.tsx",
    "description": "",
    "displayName": "DiscreteLegend",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "CSS Class name.",
        "name": "className",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegend.tsx",
          "name": "DiscreteLegendProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegend.tsx",
            "name": "DiscreteLegendProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS Styles.",
        "name": "style",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegend.tsx",
          "name": "DiscreteLegendProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegend.tsx",
            "name": "DiscreteLegendProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "orientation": {
        "defaultValue": {
          "value": "vertical"
        },
        "description": "Orientation of the legend.",
        "name": "orientation",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegend.tsx",
          "name": "DiscreteLegendProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegend.tsx",
            "name": "DiscreteLegendProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "entries": {
        "defaultValue": null,
        "description": "Entry components to show in the legend.",
        "name": "entries",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegend.tsx",
          "name": "DiscreteLegendProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegend.tsx",
            "name": "DiscreteLegendProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<DiscreteLegendEntryProps, FC<Partial<DiscreteLegendEntryProps>>>[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
    "description": "",
    "displayName": "DiscreteLegendEntry",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Label for the entry.",
        "name": "label",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
          "name": "DiscreteLegendEntryProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
            "name": "DiscreteLegendEntryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color for the entry.",
        "name": "color",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
          "name": "DiscreteLegendEntryProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
            "name": "DiscreteLegendEntryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "symbol": {
        "defaultValue": {
          "value": "<DiscreteLegendSymbol />"
        },
        "description": "Symbol for the entry.",
        "name": "symbol",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
          "name": "DiscreteLegendEntryProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
            "name": "DiscreteLegendEntryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<DiscreteLegendSymbolProps, FC<Partial<DiscreteLegendSymbolProps>>> | ReactNode"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS Styles.",
        "name": "style",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
          "name": "DiscreteLegendEntryProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
            "name": "DiscreteLegendEntryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS Class names.",
        "name": "className",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
          "name": "DiscreteLegendEntryProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
            "name": "DiscreteLegendEntryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "HTML Title Attribute.",
        "name": "title",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
          "name": "DiscreteLegendEntryProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
            "name": "DiscreteLegendEntryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "orientation": {
        "defaultValue": {
          "value": "horizontal"
        },
        "description": "Orientation of the entry set internally by `DiscreteLegend`.",
        "name": "orientation",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
          "name": "DiscreteLegendEntryProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
            "name": "DiscreteLegendEntryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Mouse enter event.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
          "name": "DiscreteLegendEntryProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
            "name": "DiscreteLegendEntryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Mouse leave event.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
          "name": "DiscreteLegendEntryProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
            "name": "DiscreteLegendEntryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "On click event.",
        "name": "onClick",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
          "name": "DiscreteLegendEntryProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendEntry.tsx",
            "name": "DiscreteLegendEntryProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<HTMLDivElement, MouseEvent>) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/legends/DiscreteLegend/DiscreteLegendSymbol.tsx",
    "description": "",
    "displayName": "DiscreteLegendSymbol",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Color for the symbol set by the `DiscreteLegendEntry`.",
        "name": "color",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendSymbol.tsx",
          "name": "DiscreteLegendSymbolProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendSymbol.tsx",
            "name": "DiscreteLegendSymbolProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS Class names.",
        "name": "className",
        "parent": {
          "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendSymbol.tsx",
          "name": "DiscreteLegendSymbolProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/DiscreteLegend/DiscreteLegendSymbol.tsx",
            "name": "DiscreteLegendSymbolProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
    "description": "",
    "displayName": "SequentialLegend",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "CSS Class name.",
        "name": "className",
        "parent": {
          "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
          "name": "SequentialLegendProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
            "name": "SequentialLegendProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "gradientClassName": {
        "defaultValue": null,
        "description": "CSS Class name for the gradient element.",
        "name": "gradientClassName",
        "parent": {
          "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
          "name": "SequentialLegendProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
            "name": "SequentialLegendProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS Styles.",
        "name": "style",
        "parent": {
          "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
          "name": "SequentialLegendProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
            "name": "SequentialLegendProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "orientation": {
        "defaultValue": {
          "value": "vertical"
        },
        "description": "Orientation of the legend.",
        "name": "orientation",
        "parent": {
          "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
          "name": "SequentialLegendProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
            "name": "SequentialLegendProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data to use to render the scale.",
        "name": "data",
        "parent": {
          "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
          "name": "SequentialLegendProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
            "name": "SequentialLegendProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ChartDataShape[]"
        }
      },
      "colorScheme": {
        "defaultValue": {
          "value": "['rgba(28, 107, 86, 0.5)', '#2da283']"
        },
        "description": "Color scheme for the scale.",
        "name": "colorScheme",
        "parent": {
          "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
          "name": "SequentialLegendProps"
        },
        "declarations": [
          {
            "fileName": "src/common/legends/SequentialLegend/SequentialLegend.tsx",
            "name": "SequentialLegendProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
    "description": "",
    "displayName": "RadialAxisArc",
    "methods": [],
    "props": {
      "index": {
        "defaultValue": null,
        "description": "Index of the arc.",
        "name": "index",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
          "name": "RadialAxisArcProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
            "name": "RadialAxisArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "Scale to use for the arc.",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
          "name": "RadialAxisArcProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
            "name": "RadialAxisArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "stroke": {
        "defaultValue": null,
        "description": "Stroke color of the arc.",
        "name": "stroke",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
          "name": "RadialAxisArcProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
            "name": "RadialAxisArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ((index: number) => string)"
        }
      },
      "strokeDasharray": {
        "defaultValue": null,
        "description": "Stroke dash array of the arc.",
        "name": "strokeDasharray",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
          "name": "RadialAxisArcProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
            "name": "RadialAxisArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ((index: number) => string)"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
          "name": "RadialAxisArcProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
            "name": "RadialAxisArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
          "name": "RadialAxisArcProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArc.tsx",
            "name": "RadialAxisArcProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcLine.tsx",
    "description": "",
    "displayName": "RadialAxisArcLine",
    "methods": [],
    "props": {
      "stroke": {
        "defaultValue": null,
        "description": "Stroke color of the arc.",
        "name": "stroke",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcLine.tsx",
          "name": "RadialAxisArcLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcLine.tsx",
            "name": "RadialAxisArcLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ((index: number) => string)"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data to render the line.",
        "name": "data",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcLine.tsx",
          "name": "RadialAxisArcLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcLine.tsx",
            "name": "RadialAxisArcLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "{ x: number; y: number; }[]"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the arc.",
        "name": "index",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcLine.tsx",
          "name": "RadialAxisArcLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcLine.tsx",
            "name": "RadialAxisArcLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
    "description": "",
    "displayName": "RadialAxisArcSeries",
    "methods": [],
    "props": {
      "arc": {
        "defaultValue": null,
        "description": "Arc element to render.",
        "name": "arc",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
          "name": "RadialAxisArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
            "name": "RadialAxisArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAxisArcProps, FC<Partial<RadialAxisArcProps>>>"
        }
      },
      "line": {
        "defaultValue": null,
        "description": "Line element to render.",
        "name": "line",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
          "name": "RadialAxisArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
            "name": "RadialAxisArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAxisArcLineProps, FC<Partial<RadialAxisArcLineProps>>>"
        }
      },
      "count": {
        "defaultValue": null,
        "description": "Number of arcs to render.",
        "name": "count",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
          "name": "RadialAxisArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
            "name": "RadialAxisArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "Inner radius of the arc.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
          "name": "RadialAxisArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
            "name": "RadialAxisArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "Outer radius of the arc.",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
          "name": "RadialAxisArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
            "name": "RadialAxisArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tickValues": {
        "defaultValue": null,
        "description": "Calculated tick values by the Radial Axis.",
        "name": "tickValues",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
          "name": "RadialAxisArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
            "name": "RadialAxisArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
          "name": "RadialAxisArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
            "name": "RadialAxisArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
          "name": "RadialAxisArcSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisArcSeries/RadialAxisArcSeries.tsx",
            "name": "RadialAxisArcSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
    "description": "",
    "displayName": "RadialAxisTick",
    "methods": [],
    "props": {
      "scale": {
        "defaultValue": null,
        "description": "Scale to use for the tick.",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
          "name": "RadialAxisTickProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
            "name": "RadialAxisTickProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "outerRadius": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Outer radius of the arc.",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
          "name": "RadialAxisTickProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
            "name": "RadialAxisTickProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "Inner radius of the arc.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
          "name": "RadialAxisTickProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
            "name": "RadialAxisTickProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padding": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Padding between the tick and the label.",
        "name": "padding",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
          "name": "RadialAxisTickProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
            "name": "RadialAxisTickProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "data": {
        "defaultValue": null,
        "description": "Data to render.",
        "name": "data",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
          "name": "RadialAxisTickProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
            "name": "RadialAxisTickProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the tick.",
        "name": "index",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
          "name": "RadialAxisTickProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
            "name": "RadialAxisTickProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "line": {
        "defaultValue": {
          "value": "<RadialAxisTickLine />"
        },
        "description": "Line element to render.",
        "name": "line",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
          "name": "RadialAxisTickProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
            "name": "RadialAxisTickProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAxisTickLineProps, FC<Partial<RadialAxisTickLineProps>>>"
        }
      },
      "label": {
        "defaultValue": {
          "value": "<RadialAxisTickLabel />"
        },
        "description": "Label element to render.",
        "name": "label",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
          "name": "RadialAxisTickProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
            "name": "RadialAxisTickProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<RadialAxisTickLabelProps, FC<Partial<RadialAxisTickLabelProps>>>"
        }
      },
      "startAngle": {
        "defaultValue": null,
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
          "name": "RadialAxisTickProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
            "name": "RadialAxisTickProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": null,
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
          "name": "RadialAxisTickProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTick.tsx",
            "name": "RadialAxisTickProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
    "description": "",
    "displayName": "RadialAxisTickLabel",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "Data to render.",
        "name": "data",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "lineSize": {
        "defaultValue": null,
        "description": "Size of the line.",
        "name": "lineSize",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fill": {
        "defaultValue": {
          "value": "#71808d"
        },
        "description": "Color of the text.",
        "name": "fill",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fontSize": {
        "defaultValue": {
          "value": "11"
        },
        "description": "Font size of the text.",
        "name": "fontSize",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "rotation": {
        "defaultValue": null,
        "description": "Rotation of the text.",
        "name": "rotation",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fontFamily": {
        "defaultValue": {
          "value": "sans-serif"
        },
        "description": "Font family of the text.",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Index of the tick.",
        "name": "index",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "padding": {
        "defaultValue": {
          "value": "15"
        },
        "description": "Padding of the tick.",
        "name": "padding",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "point": {
        "defaultValue": null,
        "description": "Point of the tick.",
        "name": "point",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "autoRotate": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Auto rotate the text.",
        "name": "autoRotate",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "format": {
        "defaultValue": null,
        "description": "Format of the label.",
        "name": "format",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: any, index: number) => any"
        }
      },
      "formatTooltip": {
        "defaultValue": null,
        "description": "Format tooltip title on hover label.",
        "name": "formatTooltip",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
          "name": "RadialAxisTickLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLabel.tsx",
            "name": "RadialAxisTickLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: any, index: number) => any"
        }
      },
      "string": {
        "defaultValue": null,
        "description": "",
        "name": "string",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "suppressHydrationWarning": {
        "defaultValue": null,
        "description": "",
        "name": "suppressHydrationWarning",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "height": {
        "defaultValue": null,
        "description": "",
        "name": "height",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "lang": {
        "defaultValue": null,
        "description": "",
        "name": "lang",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "",
        "name": "max",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "media": {
        "defaultValue": null,
        "description": "",
        "name": "media",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "method": {
        "defaultValue": null,
        "description": "",
        "name": "method",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "",
        "name": "min",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "",
        "name": "target",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "",
        "name": "type",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "width": {
        "defaultValue": null,
        "description": "",
        "name": "width",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "",
        "name": "role",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "tabIndex": {
        "defaultValue": null,
        "description": "",
        "name": "tabIndex",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "crossOrigin": {
        "defaultValue": null,
        "description": "",
        "name": "crossOrigin",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "CrossOrigin"
        }
      },
      "accentHeight": {
        "defaultValue": null,
        "description": "",
        "name": "accentHeight",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "accumulate": {
        "defaultValue": null,
        "description": "",
        "name": "accumulate",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"none\" | \"sum\""
        }
      },
      "additive": {
        "defaultValue": null,
        "description": "",
        "name": "additive",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"sum\" | \"replace\""
        }
      },
      "alignmentBaseline": {
        "defaultValue": null,
        "description": "",
        "name": "alignmentBaseline",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"alphabetic\" | \"hanging\" | \"ideographic\" | \"mathematical\" | \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" | \"text-after-edge\" | \"inherit\""
        }
      },
      "allowReorder": {
        "defaultValue": null,
        "description": "",
        "name": "allowReorder",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"no\" | \"yes\""
        }
      },
      "alphabetic": {
        "defaultValue": null,
        "description": "",
        "name": "alphabetic",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "amplitude": {
        "defaultValue": null,
        "description": "",
        "name": "amplitude",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "arabicForm": {
        "defaultValue": null,
        "description": "",
        "name": "arabicForm",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"initial\" | \"medial\" | \"terminal\" | \"isolated\""
        }
      },
      "ascent": {
        "defaultValue": null,
        "description": "",
        "name": "ascent",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "attributeName": {
        "defaultValue": null,
        "description": "",
        "name": "attributeName",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "attributeType": {
        "defaultValue": null,
        "description": "",
        "name": "attributeType",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoReverse": {
        "defaultValue": null,
        "description": "",
        "name": "autoReverse",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "azimuth": {
        "defaultValue": null,
        "description": "",
        "name": "azimuth",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "baseFrequency": {
        "defaultValue": null,
        "description": "",
        "name": "baseFrequency",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "baselineShift": {
        "defaultValue": null,
        "description": "",
        "name": "baselineShift",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "baseProfile": {
        "defaultValue": null,
        "description": "",
        "name": "baseProfile",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "bbox": {
        "defaultValue": null,
        "description": "",
        "name": "bbox",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "begin": {
        "defaultValue": null,
        "description": "",
        "name": "begin",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "bias": {
        "defaultValue": null,
        "description": "",
        "name": "bias",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "by": {
        "defaultValue": null,
        "description": "",
        "name": "by",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "calcMode": {
        "defaultValue": null,
        "description": "",
        "name": "calcMode",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "capHeight": {
        "defaultValue": null,
        "description": "",
        "name": "capHeight",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "clip": {
        "defaultValue": null,
        "description": "",
        "name": "clip",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "clipPath": {
        "defaultValue": null,
        "description": "",
        "name": "clipPath",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clipPathUnits": {
        "defaultValue": null,
        "description": "",
        "name": "clipPathUnits",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "clipRule": {
        "defaultValue": null,
        "description": "",
        "name": "clipRule",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "colorInterpolation": {
        "defaultValue": null,
        "description": "",
        "name": "colorInterpolation",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "colorInterpolationFilters": {
        "defaultValue": null,
        "description": "",
        "name": "colorInterpolationFilters",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"auto\" | \"inherit\" | \"sRGB\" | \"linearRGB\""
        }
      },
      "colorProfile": {
        "defaultValue": null,
        "description": "",
        "name": "colorProfile",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "colorRendering": {
        "defaultValue": null,
        "description": "",
        "name": "colorRendering",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "contentScriptType": {
        "defaultValue": null,
        "description": "",
        "name": "contentScriptType",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "contentStyleType": {
        "defaultValue": null,
        "description": "",
        "name": "contentStyleType",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "cursor": {
        "defaultValue": null,
        "description": "",
        "name": "cursor",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "cx": {
        "defaultValue": null,
        "description": "",
        "name": "cx",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "cy": {
        "defaultValue": null,
        "description": "",
        "name": "cy",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "d": {
        "defaultValue": null,
        "description": "",
        "name": "d",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "decelerate": {
        "defaultValue": null,
        "description": "",
        "name": "decelerate",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "descent": {
        "defaultValue": null,
        "description": "",
        "name": "descent",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "diffuseConstant": {
        "defaultValue": null,
        "description": "",
        "name": "diffuseConstant",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "",
        "name": "direction",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "display": {
        "defaultValue": null,
        "description": "",
        "name": "display",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "divisor": {
        "defaultValue": null,
        "description": "",
        "name": "divisor",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "dominantBaseline": {
        "defaultValue": null,
        "description": "",
        "name": "dominantBaseline",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "dur": {
        "defaultValue": null,
        "description": "",
        "name": "dur",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "dx": {
        "defaultValue": null,
        "description": "",
        "name": "dx",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "dy": {
        "defaultValue": null,
        "description": "",
        "name": "dy",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "edgeMode": {
        "defaultValue": null,
        "description": "",
        "name": "edgeMode",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "elevation": {
        "defaultValue": null,
        "description": "",
        "name": "elevation",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "enableBackground": {
        "defaultValue": null,
        "description": "",
        "name": "enableBackground",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "",
        "name": "end",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "exponent": {
        "defaultValue": null,
        "description": "",
        "name": "exponent",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "externalResourcesRequired": {
        "defaultValue": null,
        "description": "",
        "name": "externalResourcesRequired",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "fillOpacity": {
        "defaultValue": null,
        "description": "",
        "name": "fillOpacity",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "fillRule": {
        "defaultValue": null,
        "description": "",
        "name": "fillRule",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"inherit\" | \"nonzero\" | \"evenodd\""
        }
      },
      "filter": {
        "defaultValue": null,
        "description": "",
        "name": "filter",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "filterRes": {
        "defaultValue": null,
        "description": "",
        "name": "filterRes",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "filterUnits": {
        "defaultValue": null,
        "description": "",
        "name": "filterUnits",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "floodColor": {
        "defaultValue": null,
        "description": "",
        "name": "floodColor",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "floodOpacity": {
        "defaultValue": null,
        "description": "",
        "name": "floodOpacity",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "focusable": {
        "defaultValue": null,
        "description": "",
        "name": "focusable",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"auto\" | Booleanish"
        }
      },
      "fontSizeAdjust": {
        "defaultValue": null,
        "description": "",
        "name": "fontSizeAdjust",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "fontStretch": {
        "defaultValue": null,
        "description": "",
        "name": "fontStretch",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "fontStyle": {
        "defaultValue": null,
        "description": "",
        "name": "fontStyle",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "fontVariant": {
        "defaultValue": null,
        "description": "",
        "name": "fontVariant",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "fontWeight": {
        "defaultValue": null,
        "description": "",
        "name": "fontWeight",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "fr": {
        "defaultValue": null,
        "description": "",
        "name": "fr",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "from": {
        "defaultValue": null,
        "description": "",
        "name": "from",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "fx": {
        "defaultValue": null,
        "description": "",
        "name": "fx",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "fy": {
        "defaultValue": null,
        "description": "",
        "name": "fy",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "g1": {
        "defaultValue": null,
        "description": "",
        "name": "g1",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "g2": {
        "defaultValue": null,
        "description": "",
        "name": "g2",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "glyphName": {
        "defaultValue": null,
        "description": "",
        "name": "glyphName",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "glyphOrientationHorizontal": {
        "defaultValue": null,
        "description": "",
        "name": "glyphOrientationHorizontal",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "glyphOrientationVertical": {
        "defaultValue": null,
        "description": "",
        "name": "glyphOrientationVertical",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "glyphRef": {
        "defaultValue": null,
        "description": "",
        "name": "glyphRef",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "gradientTransform": {
        "defaultValue": null,
        "description": "",
        "name": "gradientTransform",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "gradientUnits": {
        "defaultValue": null,
        "description": "",
        "name": "gradientUnits",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hanging": {
        "defaultValue": null,
        "description": "",
        "name": "hanging",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "horizAdvX": {
        "defaultValue": null,
        "description": "",
        "name": "horizAdvX",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "horizOriginX": {
        "defaultValue": null,
        "description": "",
        "name": "horizOriginX",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "href": {
        "defaultValue": null,
        "description": "",
        "name": "href",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ideographic": {
        "defaultValue": null,
        "description": "",
        "name": "ideographic",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "imageRendering": {
        "defaultValue": null,
        "description": "",
        "name": "imageRendering",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "in2": {
        "defaultValue": null,
        "description": "",
        "name": "in2",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "in": {
        "defaultValue": null,
        "description": "",
        "name": "in",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "intercept": {
        "defaultValue": null,
        "description": "",
        "name": "intercept",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "k1": {
        "defaultValue": null,
        "description": "",
        "name": "k1",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "k2": {
        "defaultValue": null,
        "description": "",
        "name": "k2",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "k3": {
        "defaultValue": null,
        "description": "",
        "name": "k3",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "k4": {
        "defaultValue": null,
        "description": "",
        "name": "k4",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "k": {
        "defaultValue": null,
        "description": "",
        "name": "k",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "kernelMatrix": {
        "defaultValue": null,
        "description": "",
        "name": "kernelMatrix",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "kernelUnitLength": {
        "defaultValue": null,
        "description": "",
        "name": "kernelUnitLength",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "kerning": {
        "defaultValue": null,
        "description": "",
        "name": "kerning",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "keyPoints": {
        "defaultValue": null,
        "description": "",
        "name": "keyPoints",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "keySplines": {
        "defaultValue": null,
        "description": "",
        "name": "keySplines",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "keyTimes": {
        "defaultValue": null,
        "description": "",
        "name": "keyTimes",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "lengthAdjust": {
        "defaultValue": null,
        "description": "",
        "name": "lengthAdjust",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "letterSpacing": {
        "defaultValue": null,
        "description": "",
        "name": "letterSpacing",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "lightingColor": {
        "defaultValue": null,
        "description": "",
        "name": "lightingColor",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "limitingConeAngle": {
        "defaultValue": null,
        "description": "",
        "name": "limitingConeAngle",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "local": {
        "defaultValue": null,
        "description": "",
        "name": "local",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "markerEnd": {
        "defaultValue": null,
        "description": "",
        "name": "markerEnd",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "markerHeight": {
        "defaultValue": null,
        "description": "",
        "name": "markerHeight",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "markerMid": {
        "defaultValue": null,
        "description": "",
        "name": "markerMid",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "markerStart": {
        "defaultValue": null,
        "description": "",
        "name": "markerStart",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "markerUnits": {
        "defaultValue": null,
        "description": "",
        "name": "markerUnits",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "markerWidth": {
        "defaultValue": null,
        "description": "",
        "name": "markerWidth",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "mask": {
        "defaultValue": null,
        "description": "",
        "name": "mask",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maskContentUnits": {
        "defaultValue": null,
        "description": "",
        "name": "maskContentUnits",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "maskUnits": {
        "defaultValue": null,
        "description": "",
        "name": "maskUnits",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "mathematical": {
        "defaultValue": null,
        "description": "",
        "name": "mathematical",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "mode": {
        "defaultValue": null,
        "description": "",
        "name": "mode",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "numOctaves": {
        "defaultValue": null,
        "description": "",
        "name": "numOctaves",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "offset": {
        "defaultValue": null,
        "description": "",
        "name": "offset",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "opacity": {
        "defaultValue": null,
        "description": "",
        "name": "opacity",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "operator": {
        "defaultValue": null,
        "description": "",
        "name": "operator",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "order": {
        "defaultValue": null,
        "description": "",
        "name": "order",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "orient": {
        "defaultValue": null,
        "description": "",
        "name": "orient",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "orientation": {
        "defaultValue": null,
        "description": "",
        "name": "orientation",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "origin": {
        "defaultValue": null,
        "description": "",
        "name": "origin",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "overflow": {
        "defaultValue": null,
        "description": "",
        "name": "overflow",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "overlinePosition": {
        "defaultValue": null,
        "description": "",
        "name": "overlinePosition",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "overlineThickness": {
        "defaultValue": null,
        "description": "",
        "name": "overlineThickness",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "paintOrder": {
        "defaultValue": null,
        "description": "",
        "name": "paintOrder",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "panose1": {
        "defaultValue": null,
        "description": "",
        "name": "panose1",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "path": {
        "defaultValue": null,
        "description": "",
        "name": "path",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "pathLength": {
        "defaultValue": null,
        "description": "",
        "name": "pathLength",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "patternContentUnits": {
        "defaultValue": null,
        "description": "",
        "name": "patternContentUnits",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "patternTransform": {
        "defaultValue": null,
        "description": "",
        "name": "patternTransform",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "patternUnits": {
        "defaultValue": null,
        "description": "",
        "name": "patternUnits",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "pointerEvents": {
        "defaultValue": null,
        "description": "",
        "name": "pointerEvents",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "points": {
        "defaultValue": null,
        "description": "",
        "name": "points",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "pointsAtX": {
        "defaultValue": null,
        "description": "",
        "name": "pointsAtX",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "pointsAtY": {
        "defaultValue": null,
        "description": "",
        "name": "pointsAtY",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "pointsAtZ": {
        "defaultValue": null,
        "description": "",
        "name": "pointsAtZ",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "preserveAlpha": {
        "defaultValue": null,
        "description": "",
        "name": "preserveAlpha",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "preserveAspectRatio": {
        "defaultValue": null,
        "description": "",
        "name": "preserveAspectRatio",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "primitiveUnits": {
        "defaultValue": null,
        "description": "",
        "name": "primitiveUnits",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "r": {
        "defaultValue": null,
        "description": "",
        "name": "r",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "radius": {
        "defaultValue": null,
        "description": "",
        "name": "radius",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "refX": {
        "defaultValue": null,
        "description": "",
        "name": "refX",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "refY": {
        "defaultValue": null,
        "description": "",
        "name": "refY",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "renderingIntent": {
        "defaultValue": null,
        "description": "",
        "name": "renderingIntent",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "repeatCount": {
        "defaultValue": null,
        "description": "",
        "name": "repeatCount",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "repeatDur": {
        "defaultValue": null,
        "description": "",
        "name": "repeatDur",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "requiredExtensions": {
        "defaultValue": null,
        "description": "",
        "name": "requiredExtensions",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "requiredFeatures": {
        "defaultValue": null,
        "description": "",
        "name": "requiredFeatures",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "restart": {
        "defaultValue": null,
        "description": "",
        "name": "restart",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "result": {
        "defaultValue": null,
        "description": "",
        "name": "result",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rotate": {
        "defaultValue": null,
        "description": "",
        "name": "rotate",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "rx": {
        "defaultValue": null,
        "description": "",
        "name": "rx",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "ry": {
        "defaultValue": null,
        "description": "",
        "name": "ry",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "",
        "name": "scale",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "seed": {
        "defaultValue": null,
        "description": "",
        "name": "seed",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "shapeRendering": {
        "defaultValue": null,
        "description": "",
        "name": "shapeRendering",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "slope": {
        "defaultValue": null,
        "description": "",
        "name": "slope",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "spacing": {
        "defaultValue": null,
        "description": "",
        "name": "spacing",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "specularConstant": {
        "defaultValue": null,
        "description": "",
        "name": "specularConstant",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "specularExponent": {
        "defaultValue": null,
        "description": "",
        "name": "specularExponent",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "speed": {
        "defaultValue": null,
        "description": "",
        "name": "speed",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "spreadMethod": {
        "defaultValue": null,
        "description": "",
        "name": "spreadMethod",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "startOffset": {
        "defaultValue": null,
        "description": "",
        "name": "startOffset",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "stdDeviation": {
        "defaultValue": null,
        "description": "",
        "name": "stdDeviation",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "stemh": {
        "defaultValue": null,
        "description": "",
        "name": "stemh",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "stemv": {
        "defaultValue": null,
        "description": "",
        "name": "stemv",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "stitchTiles": {
        "defaultValue": null,
        "description": "",
        "name": "stitchTiles",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "stopColor": {
        "defaultValue": null,
        "description": "",
        "name": "stopColor",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "stopOpacity": {
        "defaultValue": null,
        "description": "",
        "name": "stopOpacity",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "strikethroughPosition": {
        "defaultValue": null,
        "description": "",
        "name": "strikethroughPosition",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "strikethroughThickness": {
        "defaultValue": null,
        "description": "",
        "name": "strikethroughThickness",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "stroke": {
        "defaultValue": null,
        "description": "",
        "name": "stroke",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "strokeDasharray": {
        "defaultValue": null,
        "description": "",
        "name": "strokeDasharray",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "strokeDashoffset": {
        "defaultValue": null,
        "description": "",
        "name": "strokeDashoffset",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "strokeLinecap": {
        "defaultValue": null,
        "description": "",
        "name": "strokeLinecap",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"inherit\" | \"butt\" | \"round\" | \"square\""
        }
      },
      "strokeLinejoin": {
        "defaultValue": null,
        "description": "",
        "name": "strokeLinejoin",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"inherit\" | \"round\" | \"miter\" | \"bevel\""
        }
      },
      "strokeMiterlimit": {
        "defaultValue": null,
        "description": "",
        "name": "strokeMiterlimit",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "strokeOpacity": {
        "defaultValue": null,
        "description": "",
        "name": "strokeOpacity",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "strokeWidth": {
        "defaultValue": null,
        "description": "",
        "name": "strokeWidth",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "surfaceScale": {
        "defaultValue": null,
        "description": "",
        "name": "surfaceScale",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "systemLanguage": {
        "defaultValue": null,
        "description": "",
        "name": "systemLanguage",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "tableValues": {
        "defaultValue": null,
        "description": "",
        "name": "tableValues",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "targetX": {
        "defaultValue": null,
        "description": "",
        "name": "targetX",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "targetY": {
        "defaultValue": null,
        "description": "",
        "name": "targetY",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "textAnchor": {
        "defaultValue": null,
        "description": "",
        "name": "textAnchor",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "textDecoration": {
        "defaultValue": null,
        "description": "",
        "name": "textDecoration",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "textLength": {
        "defaultValue": null,
        "description": "",
        "name": "textLength",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "textRendering": {
        "defaultValue": null,
        "description": "",
        "name": "textRendering",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "to": {
        "defaultValue": null,
        "description": "",
        "name": "to",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "transform": {
        "defaultValue": null,
        "description": "",
        "name": "transform",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "u1": {
        "defaultValue": null,
        "description": "",
        "name": "u1",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "u2": {
        "defaultValue": null,
        "description": "",
        "name": "u2",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "underlinePosition": {
        "defaultValue": null,
        "description": "",
        "name": "underlinePosition",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "underlineThickness": {
        "defaultValue": null,
        "description": "",
        "name": "underlineThickness",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "unicode": {
        "defaultValue": null,
        "description": "",
        "name": "unicode",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "unicodeBidi": {
        "defaultValue": null,
        "description": "",
        "name": "unicodeBidi",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "unicodeRange": {
        "defaultValue": null,
        "description": "",
        "name": "unicodeRange",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "unitsPerEm": {
        "defaultValue": null,
        "description": "",
        "name": "unitsPerEm",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "vAlphabetic": {
        "defaultValue": null,
        "description": "",
        "name": "vAlphabetic",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "values": {
        "defaultValue": null,
        "description": "",
        "name": "values",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "vectorEffect": {
        "defaultValue": null,
        "description": "",
        "name": "vectorEffect",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "version": {
        "defaultValue": null,
        "description": "",
        "name": "version",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "vertAdvY": {
        "defaultValue": null,
        "description": "",
        "name": "vertAdvY",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "vertOriginX": {
        "defaultValue": null,
        "description": "",
        "name": "vertOriginX",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "vertOriginY": {
        "defaultValue": null,
        "description": "",
        "name": "vertOriginY",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "vHanging": {
        "defaultValue": null,
        "description": "",
        "name": "vHanging",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "vIdeographic": {
        "defaultValue": null,
        "description": "",
        "name": "vIdeographic",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "viewBox": {
        "defaultValue": null,
        "description": "",
        "name": "viewBox",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "viewTarget": {
        "defaultValue": null,
        "description": "",
        "name": "viewTarget",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "visibility": {
        "defaultValue": null,
        "description": "",
        "name": "visibility",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "vMathematical": {
        "defaultValue": null,
        "description": "",
        "name": "vMathematical",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "widths": {
        "defaultValue": null,
        "description": "",
        "name": "widths",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "wordSpacing": {
        "defaultValue": null,
        "description": "",
        "name": "wordSpacing",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "writingMode": {
        "defaultValue": null,
        "description": "",
        "name": "writingMode",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "x1": {
        "defaultValue": null,
        "description": "",
        "name": "x1",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "x2": {
        "defaultValue": null,
        "description": "",
        "name": "x2",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "x": {
        "defaultValue": null,
        "description": "",
        "name": "x",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "xChannelSelector": {
        "defaultValue": null,
        "description": "",
        "name": "xChannelSelector",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xHeight": {
        "defaultValue": null,
        "description": "",
        "name": "xHeight",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "xlinkActuate": {
        "defaultValue": null,
        "description": "",
        "name": "xlinkActuate",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xlinkArcrole": {
        "defaultValue": null,
        "description": "",
        "name": "xlinkArcrole",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xlinkHref": {
        "defaultValue": null,
        "description": "",
        "name": "xlinkHref",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xlinkRole": {
        "defaultValue": null,
        "description": "",
        "name": "xlinkRole",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xlinkShow": {
        "defaultValue": null,
        "description": "",
        "name": "xlinkShow",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xlinkTitle": {
        "defaultValue": null,
        "description": "",
        "name": "xlinkTitle",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xlinkType": {
        "defaultValue": null,
        "description": "",
        "name": "xlinkType",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xmlBase": {
        "defaultValue": null,
        "description": "",
        "name": "xmlBase",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xmlLang": {
        "defaultValue": null,
        "description": "",
        "name": "xmlLang",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xmlns": {
        "defaultValue": null,
        "description": "",
        "name": "xmlns",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xmlnsXlink": {
        "defaultValue": null,
        "description": "",
        "name": "xmlnsXlink",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "xmlSpace": {
        "defaultValue": null,
        "description": "",
        "name": "xmlSpace",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "y1": {
        "defaultValue": null,
        "description": "",
        "name": "y1",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "y2": {
        "defaultValue": null,
        "description": "",
        "name": "y2",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "y": {
        "defaultValue": null,
        "description": "",
        "name": "y",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "yChannelSelector": {
        "defaultValue": null,
        "description": "",
        "name": "yChannelSelector",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "z": {
        "defaultValue": null,
        "description": "",
        "name": "z",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "zoomAndPan": {
        "defaultValue": null,
        "description": "",
        "name": "zoomAndPan",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "SVGAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "SVGAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-activedescendant": {
        "defaultValue": null,
        "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
        "name": "aria-activedescendant",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-atomic": {
        "defaultValue": null,
        "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
        "name": "aria-atomic",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-autocomplete": {
        "defaultValue": null,
        "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
        "name": "aria-autocomplete",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"list\" | \"none\" | \"inline\" | \"both\""
        }
      },
      "aria-braillelabel": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element, which is intended to be converted into Braille.\n@see aria-label.",
        "name": "aria-braillelabel",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-brailleroledescription": {
        "defaultValue": null,
        "description": "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n@see aria-roledescription.",
        "name": "aria-brailleroledescription",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-busy": {
        "defaultValue": null,
        "description": "",
        "name": "aria-busy",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-checked": {
        "defaultValue": null,
        "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
        "name": "aria-checked",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"mixed\""
        }
      },
      "aria-colcount": {
        "defaultValue": null,
        "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
        "name": "aria-colcount",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-colindex": {
        "defaultValue": null,
        "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
        "name": "aria-colindex",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-colindextext": {
        "defaultValue": null,
        "description": "Defines a human readable text alternative of aria-colindex.\n@see aria-rowindextext.",
        "name": "aria-colindextext",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-colspan": {
        "defaultValue": null,
        "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
        "name": "aria-colspan",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-controls": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
        "name": "aria-controls",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-current": {
        "defaultValue": null,
        "description": "Indicates the element that represents the current item within a container or set of related elements.",
        "name": "aria-current",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\""
        }
      },
      "aria-describedby": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
        "name": "aria-describedby",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-description": {
        "defaultValue": null,
        "description": "Defines a string value that describes or annotates the current element.\n@see related aria-describedby.",
        "name": "aria-description",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-details": {
        "defaultValue": null,
        "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
        "name": "aria-details",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-disabled": {
        "defaultValue": null,
        "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
        "name": "aria-disabled",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-dropeffect": {
        "defaultValue": null,
        "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
        "name": "aria-dropeffect",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
        }
      },
      "aria-errormessage": {
        "defaultValue": null,
        "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
        "name": "aria-errormessage",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-expanded": {
        "defaultValue": null,
        "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
        "name": "aria-expanded",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-flowto": {
        "defaultValue": null,
        "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
        "name": "aria-flowto",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-grabbed": {
        "defaultValue": null,
        "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
        "name": "aria-grabbed",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-haspopup": {
        "defaultValue": null,
        "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
        "name": "aria-haspopup",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"dialog\" | \"grid\" | \"listbox\" | \"menu\" | \"tree\" | \"true\" | \"false\""
        }
      },
      "aria-hidden": {
        "defaultValue": null,
        "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
        "name": "aria-hidden",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-invalid": {
        "defaultValue": null,
        "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
        "name": "aria-invalid",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
        }
      },
      "aria-keyshortcuts": {
        "defaultValue": null,
        "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
        "name": "aria-keyshortcuts",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
        "name": "aria-label",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-level": {
        "defaultValue": null,
        "description": "Defines the hierarchical level of an element within a structure.",
        "name": "aria-level",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-live": {
        "defaultValue": null,
        "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
        "name": "aria-live",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"off\" | \"assertive\" | \"polite\""
        }
      },
      "aria-modal": {
        "defaultValue": null,
        "description": "Indicates whether an element is modal when displayed.",
        "name": "aria-modal",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-multiline": {
        "defaultValue": null,
        "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
        "name": "aria-multiline",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-multiselectable": {
        "defaultValue": null,
        "description": "Indicates that the user may select more than one item from the current selectable descendants.",
        "name": "aria-multiselectable",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-orientation": {
        "defaultValue": null,
        "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
        "name": "aria-orientation",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "aria-owns": {
        "defaultValue": null,
        "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
        "name": "aria-owns",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-placeholder": {
        "defaultValue": null,
        "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
        "name": "aria-placeholder",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-posinset": {
        "defaultValue": null,
        "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
        "name": "aria-posinset",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-pressed": {
        "defaultValue": null,
        "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
        "name": "aria-pressed",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"mixed\""
        }
      },
      "aria-readonly": {
        "defaultValue": null,
        "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
        "name": "aria-readonly",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-relevant": {
        "defaultValue": null,
        "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
        "name": "aria-relevant",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text\" | \"text additions\" | \"text removals\""
        }
      },
      "aria-required": {
        "defaultValue": null,
        "description": "Indicates that user input is required on the element before a form may be submitted.",
        "name": "aria-required",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-roledescription": {
        "defaultValue": null,
        "description": "Defines a human-readable, author-localized description for the role of an element.",
        "name": "aria-roledescription",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-rowcount": {
        "defaultValue": null,
        "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
        "name": "aria-rowcount",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-rowindex": {
        "defaultValue": null,
        "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
        "name": "aria-rowindex",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-rowindextext": {
        "defaultValue": null,
        "description": "Defines a human readable text alternative of aria-rowindex.\n@see aria-colindextext.",
        "name": "aria-rowindextext",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-rowspan": {
        "defaultValue": null,
        "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
        "name": "aria-rowspan",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-selected": {
        "defaultValue": null,
        "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
        "name": "aria-selected",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-setsize": {
        "defaultValue": null,
        "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
        "name": "aria-setsize",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-sort": {
        "defaultValue": null,
        "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
        "name": "aria-sort",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "\"none\" | \"ascending\" | \"descending\" | \"other\""
        }
      },
      "aria-valuemax": {
        "defaultValue": null,
        "description": "Defines the maximum allowed value for a range widget.",
        "name": "aria-valuemax",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-valuemin": {
        "defaultValue": null,
        "description": "Defines the minimum allowed value for a range widget.",
        "name": "aria-valuemin",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-valuenow": {
        "defaultValue": null,
        "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
        "name": "aria-valuenow",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-valuetext": {
        "defaultValue": null,
        "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
        "name": "aria-valuetext",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "AriaAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "AriaAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "dangerouslySetInnerHTML": {
        "defaultValue": null,
        "description": "",
        "name": "dangerouslySetInnerHTML",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "{ __html: string | TrustedHTML; }"
        }
      },
      "onCopy": {
        "defaultValue": null,
        "description": "",
        "name": "onCopy",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<SVGTextElement>"
        }
      },
      "onCopyCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCopyCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<SVGTextElement>"
        }
      },
      "onCut": {
        "defaultValue": null,
        "description": "",
        "name": "onCut",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<SVGTextElement>"
        }
      },
      "onCutCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCutCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<SVGTextElement>"
        }
      },
      "onPaste": {
        "defaultValue": null,
        "description": "",
        "name": "onPaste",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<SVGTextElement>"
        }
      },
      "onPasteCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPasteCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<SVGTextElement>"
        }
      },
      "onCompositionEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionEnd",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "CompositionEventHandler<SVGTextElement>"
        }
      },
      "onCompositionEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionEndCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "CompositionEventHandler<SVGTextElement>"
        }
      },
      "onCompositionStart": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionStart",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "CompositionEventHandler<SVGTextElement>"
        }
      },
      "onCompositionStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionStartCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "CompositionEventHandler<SVGTextElement>"
        }
      },
      "onCompositionUpdate": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionUpdate",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "CompositionEventHandler<SVGTextElement>"
        }
      },
      "onCompositionUpdateCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionUpdateCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "CompositionEventHandler<SVGTextElement>"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "",
        "name": "onFocus",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FocusEventHandler<SVGTextElement>"
        }
      },
      "onFocusCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onFocusCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FocusEventHandler<SVGTextElement>"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "",
        "name": "onBlur",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FocusEventHandler<SVGTextElement>"
        }
      },
      "onBlurCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onBlurCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FocusEventHandler<SVGTextElement>"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onChangeCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onBeforeInput": {
        "defaultValue": null,
        "description": "",
        "name": "onBeforeInput",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onBeforeInputCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onBeforeInputCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onInput": {
        "defaultValue": null,
        "description": "",
        "name": "onInput",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onInputCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onInputCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onReset": {
        "defaultValue": null,
        "description": "",
        "name": "onReset",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onResetCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onResetCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onSubmit": {
        "defaultValue": null,
        "description": "",
        "name": "onSubmit",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onSubmitCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSubmitCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onInvalid": {
        "defaultValue": null,
        "description": "",
        "name": "onInvalid",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onInvalidCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onInvalidCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "FormEventHandler<SVGTextElement>"
        }
      },
      "onLoad": {
        "defaultValue": null,
        "description": "",
        "name": "onLoad",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onLoadCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onError": {
        "defaultValue": null,
        "description": "",
        "name": "onError",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onErrorCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onErrorCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onKeyDown": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyDown",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<SVGTextElement>"
        }
      },
      "onKeyDownCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyDownCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<SVGTextElement>"
        }
      },
      "onKeyPress": {
        "defaultValue": null,
        "description": "@deprecated Use `onKeyUp` or `onKeyDown` instead",
        "name": "onKeyPress",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<SVGTextElement>"
        }
      },
      "onKeyPressCapture": {
        "defaultValue": null,
        "description": "@deprecated Use `onKeyUpCapture` or `onKeyDownCapture` instead",
        "name": "onKeyPressCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<SVGTextElement>"
        }
      },
      "onKeyUp": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyUp",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<SVGTextElement>"
        }
      },
      "onKeyUpCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyUpCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<SVGTextElement>"
        }
      },
      "onAbort": {
        "defaultValue": null,
        "description": "",
        "name": "onAbort",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onAbortCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAbortCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onCanPlay": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlay",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onCanPlayCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlayCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onCanPlayThrough": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlayThrough",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onCanPlayThroughCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlayThroughCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onDurationChange": {
        "defaultValue": null,
        "description": "",
        "name": "onDurationChange",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onDurationChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDurationChangeCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onEmptied": {
        "defaultValue": null,
        "description": "",
        "name": "onEmptied",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onEmptiedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onEmptiedCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onEncrypted": {
        "defaultValue": null,
        "description": "",
        "name": "onEncrypted",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onEncryptedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onEncryptedCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onEnded": {
        "defaultValue": null,
        "description": "",
        "name": "onEnded",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onEndedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onEndedCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onLoadedData": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedData",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onLoadedDataCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedDataCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onLoadedMetadata": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedMetadata",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onLoadedMetadataCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedMetadataCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onLoadStart": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadStart",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onLoadStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadStartCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onPause": {
        "defaultValue": null,
        "description": "",
        "name": "onPause",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onPauseCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPauseCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onPlay": {
        "defaultValue": null,
        "description": "",
        "name": "onPlay",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onPlayCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPlayCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onPlaying": {
        "defaultValue": null,
        "description": "",
        "name": "onPlaying",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onPlayingCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPlayingCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onProgress": {
        "defaultValue": null,
        "description": "",
        "name": "onProgress",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onProgressCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onProgressCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onRateChange": {
        "defaultValue": null,
        "description": "",
        "name": "onRateChange",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onRateChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onRateChangeCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onResize": {
        "defaultValue": null,
        "description": "",
        "name": "onResize",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onResizeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onResizeCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onSeeked": {
        "defaultValue": null,
        "description": "",
        "name": "onSeeked",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onSeekedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSeekedCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onSeeking": {
        "defaultValue": null,
        "description": "",
        "name": "onSeeking",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onSeekingCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSeekingCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onStalled": {
        "defaultValue": null,
        "description": "",
        "name": "onStalled",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onStalledCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onStalledCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onSuspend": {
        "defaultValue": null,
        "description": "",
        "name": "onSuspend",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onSuspendCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSuspendCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onTimeUpdate": {
        "defaultValue": null,
        "description": "",
        "name": "onTimeUpdate",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onTimeUpdateCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTimeUpdateCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onVolumeChange": {
        "defaultValue": null,
        "description": "",
        "name": "onVolumeChange",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onVolumeChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onVolumeChangeCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onWaiting": {
        "defaultValue": null,
        "description": "",
        "name": "onWaiting",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onWaitingCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onWaitingCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onAuxClick": {
        "defaultValue": null,
        "description": "",
        "name": "onAuxClick",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onAuxClickCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAuxClickCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "",
        "name": "onClick",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onClickCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onClickCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onContextMenu": {
        "defaultValue": null,
        "description": "",
        "name": "onContextMenu",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onContextMenuCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onContextMenuCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onDoubleClick": {
        "defaultValue": null,
        "description": "",
        "name": "onDoubleClick",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onDoubleClickCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDoubleClickCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onDrag": {
        "defaultValue": null,
        "description": "",
        "name": "onDrag",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onDragEnd",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragEndCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragEnter": {
        "defaultValue": null,
        "description": "",
        "name": "onDragEnter",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragEnterCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragEnterCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragExit": {
        "defaultValue": null,
        "description": "",
        "name": "onDragExit",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragExitCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragExitCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragLeave": {
        "defaultValue": null,
        "description": "",
        "name": "onDragLeave",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragLeaveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragLeaveCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragOver": {
        "defaultValue": null,
        "description": "",
        "name": "onDragOver",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragOverCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragOverCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragStart": {
        "defaultValue": null,
        "description": "",
        "name": "onDragStart",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDragStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragStartCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDrop": {
        "defaultValue": null,
        "description": "",
        "name": "onDrop",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onDropCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDropCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "DragEventHandler<SVGTextElement>"
        }
      },
      "onMouseDown": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseDown",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseDownCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseDownCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseMove": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseMove",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseMoveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseMoveCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseOut": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOut",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseOutCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOutCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseOver": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOver",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseOverCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOverCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseUp": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseUp",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onMouseUpCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseUpCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "MouseEventHandler<SVGTextElement>"
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "",
        "name": "onSelect",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onSelectCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSelectCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactEventHandler<SVGTextElement>"
        }
      },
      "onTouchCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchCancel",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "TouchEventHandler<SVGTextElement>"
        }
      },
      "onTouchCancelCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchCancelCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "TouchEventHandler<SVGTextElement>"
        }
      },
      "onTouchEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchEnd",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "TouchEventHandler<SVGTextElement>"
        }
      },
      "onTouchEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchEndCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "TouchEventHandler<SVGTextElement>"
        }
      },
      "onTouchMove": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchMove",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "TouchEventHandler<SVGTextElement>"
        }
      },
      "onTouchMoveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchMoveCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "TouchEventHandler<SVGTextElement>"
        }
      },
      "onTouchStart": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchStart",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "TouchEventHandler<SVGTextElement>"
        }
      },
      "onTouchStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchStartCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "TouchEventHandler<SVGTextElement>"
        }
      },
      "onPointerDown": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerDown",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerDownCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerDownCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerMove": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerMove",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerMoveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerMoveCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerUp": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerUp",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerUpCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerUpCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerCancel",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerCancelCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerCancelCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerEnter": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerEnter",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerLeave": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerLeave",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerOver": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOver",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerOverCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOverCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerOut": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOut",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onPointerOutCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOutCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onGotPointerCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onGotPointerCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onGotPointerCaptureCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onGotPointerCaptureCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onLostPointerCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLostPointerCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onLostPointerCaptureCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLostPointerCaptureCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "PointerEventHandler<SVGTextElement>"
        }
      },
      "onScroll": {
        "defaultValue": null,
        "description": "",
        "name": "onScroll",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "UIEventHandler<SVGTextElement>"
        }
      },
      "onScrollCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onScrollCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "UIEventHandler<SVGTextElement>"
        }
      },
      "onWheel": {
        "defaultValue": null,
        "description": "",
        "name": "onWheel",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "WheelEventHandler<SVGTextElement>"
        }
      },
      "onWheelCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onWheelCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "WheelEventHandler<SVGTextElement>"
        }
      },
      "onAnimationStart": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationStart",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "AnimationEventHandler<SVGTextElement>"
        }
      },
      "onAnimationStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationStartCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "AnimationEventHandler<SVGTextElement>"
        }
      },
      "onAnimationEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationEnd",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "AnimationEventHandler<SVGTextElement>"
        }
      },
      "onAnimationEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationEndCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "AnimationEventHandler<SVGTextElement>"
        }
      },
      "onAnimationIteration": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationIteration",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "AnimationEventHandler<SVGTextElement>"
        }
      },
      "onAnimationIterationCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationIterationCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "AnimationEventHandler<SVGTextElement>"
        }
      },
      "onTransitionEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onTransitionEnd",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "TransitionEventHandler<SVGTextElement>"
        }
      },
      "onTransitionEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTransitionEndCapture",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "DOMAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "DOMAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "TransitionEventHandler<SVGTextElement>"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).\n@see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}",
        "name": "ref",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "RefAttributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "RefAttributes"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<SVGTextElement>"
        }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "parent": {
          "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
          "name": "Attributes"
        },
        "declarations": [
          {
            "fileName": "reaviz/node_modules/@types/react/ts5.0/index.d.ts",
            "name": "Attributes"
          }
        ],
        "required": false,
        "type": {
          "name": "Key"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
    "description": "",
    "displayName": "RadialAxisTickLine",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "Size of the tick line.",
        "name": "size",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
          "name": "RadialAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
            "name": "RadialAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "stroke": {
        "defaultValue": null,
        "description": "Stroke color of the tick line.",
        "name": "stroke",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
          "name": "RadialAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
            "name": "RadialAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "Inner radius of the arc.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
          "name": "RadialAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
            "name": "RadialAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "Outer radius of the arc.",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
          "name": "RadialAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
            "name": "RadialAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "position": {
        "defaultValue": null,
        "description": "Position of the tick line.",
        "name": "position",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
          "name": "RadialAxisTickLineProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickLine.tsx",
            "name": "RadialAxisTickLineProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"inside\" | \"outside\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
    "description": "",
    "displayName": "RadialAxisTickSeries",
    "methods": [],
    "props": {
      "scale": {
        "defaultValue": null,
        "description": "Scale to use for the tick.",
        "name": "scale",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
          "name": "RadialAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
            "name": "RadialAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "count": {
        "defaultValue": {
          "value": "12"
        },
        "description": "Number of ticks to render.",
        "name": "count",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
          "name": "RadialAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
            "name": "RadialAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "interval": {
        "defaultValue": null,
        "description": "Interval between ticks.",
        "name": "interval",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
          "name": "RadialAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
            "name": "RadialAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number | TimeInterval"
        }
      },
      "tickValues": {
        "defaultValue": null,
        "description": "Tick values to render.",
        "name": "tickValues",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
          "name": "RadialAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
            "name": "RadialAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any[]"
        }
      },
      "outerRadius": {
        "defaultValue": null,
        "description": "Outer radius of the arc.",
        "name": "outerRadius",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
          "name": "RadialAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
            "name": "RadialAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "type": {
        "defaultValue": {
          "value": "time"
        },
        "description": "Type of the axis.",
        "name": "type",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
          "name": "RadialAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
            "name": "RadialAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"value\" | \"category\" | \"time\" | \"duration\""
        }
      },
      "innerRadius": {
        "defaultValue": null,
        "description": "Inner radius of the arc.",
        "name": "innerRadius",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
          "name": "RadialAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
            "name": "RadialAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tick": {
        "defaultValue": {
          "value": "<RadialAxisTick />"
        },
        "description": "Tick element to render.",
        "name": "tick",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
          "name": "RadialAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
            "name": "RadialAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "((tick: TickCallback) => ReactElement<RadialAxisTickProps, FC<Partial<RadialAxisTickProps>>>) | ReactElement<...>"
        }
      },
      "startAngle": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Start angle for the first value.",
        "name": "startAngle",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
          "name": "RadialAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
            "name": "RadialAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "endAngle": {
        "defaultValue": {
          "value": "2 * Math.PI"
        },
        "description": "End angle for the last value.",
        "name": "endAngle",
        "parent": {
          "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
          "name": "RadialAxisTickSeriesProps"
        },
        "declarations": [
          {
            "fileName": "src/common/Axis/RadialAxis/RadialAxisTickSeries/RadialAxisTickSeries.tsx",
            "name": "RadialAxisTickSeriesProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  }
]