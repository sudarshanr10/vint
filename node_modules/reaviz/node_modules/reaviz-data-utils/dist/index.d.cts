import { ChartDataTypes, ChartShallowDataShape, ChartNestedDataShape } from 'reaviz';
import bigInt from 'big-integer';
import React from 'react';

declare const areaSingleSeriesSimpleData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaSingleSeriesNonZeroData: {
    key: Date;
    data: [ChartDataTypes, ChartDataTypes];
}[];
declare const areaCircleSeriesV1Data: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaCircleSeriesV2Data: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaCircleSeriesV3Data: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaSingleSeriesInterpolationSmoothData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaSingleSeriesInterpolationStepData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaGridlineAllData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaGridlineXData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaGridlineYData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaCircleSeriesShapesData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaLeftRightAxisData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const areaTopBottomAxisData: {
    id: string;
    key: Date;
    data: number;
}[];

declare const areaMultiSeriesSimpleData: {
    key: string;
    data: {
        key: Date;
        id: string;
        data: number;
    }[];
}[];
declare const areaMultiSeriesInterpolationStepData: {
    key: string;
    data: {
        key: Date;
        id: string;
        data: number;
    }[];
}[];
declare const areaMultiSeriesInterpolationSmoothData: {
    key: string;
    data: {
        key: Date;
        id: string;
        data: number;
    }[];
}[];

declare const lineSingleSeriesSimpleData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const lineSingleSeriesInterpolationSmoothData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const lineSingleSeriesInterpolationStepData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const lineCircleSeriesV1Data: {
    id: string;
    key: Date;
    data: number;
}[];
declare const lineCircleSeriesV2Data: {
    id: string;
    key: Date;
    data: number;
}[];
declare const lineCircleSeriesV3Data: {
    id: string;
    key: Date;
    data: number;
}[];
declare const lineCircleSeriesShapesData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const lineGridlineAllData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const lineGridlineXData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const lineGridlineYData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const lineSingleSeriesLargeData: {
    id: string;
    key: Date;
    data: number;
}[];

declare const lineMultiSeriesSimpleData: {
    key: string;
    data: {
        key: Date;
        id: string;
        data: number;
    }[];
}[];
declare const lineMultiSeriesStackedData: {
    key: string;
    data: {
        key: Date;
        id: string;
        data: number;
    }[];
}[];

declare const generateBinnedData: (count: number, minVal?: number, maxVal?: number, dataKeyToZero?: string) => {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const binnedDateData: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const binnedDatePositiveOnly: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const binnedDateNegativeOnly: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];

declare const simpleBubbleData: ChartShallowDataShape[];
declare const mediumBubbleData: ChartShallowDataShape[];
declare const largeBubbleData: ChartShallowDataShape[];

declare const generateCategoryData: (count: number) => {
    key: string;
    data: number;
}[];
declare const categoryDataStackedArcs: ({
    key: string;
    data: number;
} | {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
})[];
declare const categoryData: {
    key: string;
    data: number;
}[];
declare const mediumCategoryData: {
    key: string;
    data: number;
}[];
declare const labelsData: {
    key: string;
    data: number;
}[];
declare const durationCategoryData: {
    key: string;
    data: number;
}[];
declare const nonZeroCategoryData: any;
declare const largeCategoryData2: {
    key: string;
    data: number;
}[];
declare const largeCategoryData: {
    key: string;
    data: number;
}[];
declare const multiCategory: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const multiCategoryXSmallBlock: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const multiCategorySmallBlock: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];

declare const generateData: (count: number, minVal?: number, maxVal?: number) => {
    id: string;
    key: Date;
    data: number;
}[];
declare const largeDateData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const nonZeroDateData: {
    key: Date;
    data: number[];
}[];
declare const medDateData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const smallDateData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const singleDateData: {
    id: string;
    key: Date;
    data: number;
}[];
declare const multiDateData: {
    key: string;
    data: {
        key: Date;
        id: string;
        data: number;
    }[];
}[];
declare const singleDateBigIntData: {
    key: Date;
    data: bigInt.BigInteger;
}[];
declare const mediumMultiDateData: {
    key: string;
    data: {
        key: Date;
        data: number;
    }[];
}[];

declare const simpleFunnelData: {
    key: string;
    data: number;
}[];
declare const largeFunnelData: {
    key: string;
    data: number;
}[];

declare const simpleRadialGaugeData: {
    key: string;
    data: number;
}[];

declare const heatmapSimpleData: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const heatmapCalendarData: {
    key: Date;
    data: number;
}[];
declare const janHeatMapData: {
    key: Date;
    data: number;
}[];
declare const febHeatMapData: {
    key: Date;
    data: number;
}[];
declare const marchHeatMapData: {
    key: Date;
    data: number;
}[];
declare const heatmapCalendarOffsetData: {
    key: Date;
    data: number;
}[];
declare const heatmapXSmallSimpleBlocksData: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const heatmapSmallSimpleBlocksData: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const heatmapXSmallBlocksData: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const heatmapSmallBlocksData: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const heatmapMediumSimpleBlocksData: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const heatmapMediumBlocksData: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const heatmapLargeBlocksData: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];

declare const nodes: {
    x: number;
    y: number;
    value: string;
    count: number;
}[];
declare const links: {
    color: string;
    source: {
        x: number;
        y: number;
        value: string;
        count: number;
    };
    target: {
        x: number;
        y: number;
        value: string;
        count: number;
    };
}[];

declare const longMultiDateData: {
    key: string;
    data: {
        key: Date;
        data: number;
    }[];
}[];

declare const mitreData: {
    key: string;
    data: number;
}[];

declare const numberData: {
    key: number;
    data: number;
}[];
declare const browserData: {
    key: string;
    data: number;
}[];
declare const histogramNumberData: {
    key: number;
    data: number;
}[];

interface ChartDataItem extends ChartShallowDataShape<number> {
    key: string;
    metadata: {
        description: string;
        Icon?: React.ComponentType;
    };
}
declare const pieLabelData: ChartDataItem[];

declare const simpleSankeyNodes: {
    title: string;
    id: string;
}[];
declare const simpleSankeyLinks: {
    source: string;
    target: string;
    value: number;
}[];
declare const sankeyNodes: {
    title: string;
}[];
declare const sankeyLinks: {
    source: number;
    target: number;
    value: number;
}[];

declare const signalStages: string[];
declare const largeSignalChartData: {
    key: Date;
    data: number;
    metadata: {
        id: string;
        category: string;
        contentType: string;
        description: string;
        name: string;
        severity: number;
        timestamp: Date;
    };
    id: string;
}[];
declare const signalStageData: {
    key: Date;
    data: string;
    metadata: {
        id: string;
        category: string;
        contentType: string;
        description: string;
        name: string;
        severity: number;
        timestamp: Date;
    };
    id: string;
}[];
declare const signalChartData: {
    key: Date;
    data: number;
    metadata: {
        id: string;
        category: string;
        contentType: string;
        description: string;
        name: string;
        severity: number;
        timestamp: Date;
    };
    id: string;
}[];
declare const medSignalChartData: {
    key: Date;
    data: number;
    metadata: {
        id: string;
        category: string;
        contentType: string;
        description: string;
        name: string;
        severity: number;
        timestamp: Date;
    };
    id: string;
}[];

declare const generateDateData: (baseData?: {
    offset: number;
    data: number;
}[]) => {
    id: string;
    key: Date;
    data: any;
}[];
declare const binnedData90: {
    key: string;
    data: {
        key: string;
        data: number;
    }[];
}[];
declare const sonarDataEmpties: {
    data: {
        key: string;
        data: number;
    }[];
    key: string;
}[];
declare const sonarData: {
    data: {
        key: string;
        data: number;
    }[];
    key: string;
}[];

declare const simpleTreemapData: ChartShallowDataShape[];
declare const longTreemapData: {
    key: string;
    data: number;
}[];
declare const nestedTreemapData: ChartNestedDataShape[];

declare const randomNumber: (min: number, max: number) => number;
declare const generateDate: (offset: number) => Date;

declare const Chrome: () => React.JSX.Element;
declare const FireFox: () => React.JSX.Element;
declare const Safari: () => React.JSX.Element;
declare const Edge: () => React.JSX.Element;
declare const Github: () => React.JSX.Element;
declare const ReactJs: () => React.JSX.Element;
declare const Android: () => React.JSX.Element;
declare const Apple: () => React.JSX.Element;
declare const Ubuntu: () => React.JSX.Element;
declare const Windows: () => React.JSX.Element;
declare const AWS: () => React.JSX.Element;
declare const Okta: () => React.JSX.Element;
declare const SendGrid: () => React.JSX.Element;
declare const Twillo: () => React.JSX.Element;
declare const PointMarker: () => React.JSX.Element;

declare const icons_AWS: typeof AWS;
declare const icons_Android: typeof Android;
declare const icons_Apple: typeof Apple;
declare const icons_Chrome: typeof Chrome;
declare const icons_Edge: typeof Edge;
declare const icons_FireFox: typeof FireFox;
declare const icons_Github: typeof Github;
declare const icons_Okta: typeof Okta;
declare const icons_PointMarker: typeof PointMarker;
declare const icons_ReactJs: typeof ReactJs;
declare const icons_Safari: typeof Safari;
declare const icons_SendGrid: typeof SendGrid;
declare const icons_Twillo: typeof Twillo;
declare const icons_Ubuntu: typeof Ubuntu;
declare const icons_Windows: typeof Windows;
declare namespace icons {
  export { icons_AWS as AWS, icons_Android as Android, icons_Apple as Apple, icons_Chrome as Chrome, icons_Edge as Edge, icons_FireFox as FireFox, icons_Github as Github, icons_Okta as Okta, icons_PointMarker as PointMarker, icons_ReactJs as ReactJs, icons_Safari as Safari, icons_SendGrid as SendGrid, icons_Twillo as Twillo, icons_Ubuntu as Ubuntu, icons_Windows as Windows };
}

export { type ChartDataItem, areaCircleSeriesShapesData, areaCircleSeriesV1Data, areaCircleSeriesV2Data, areaCircleSeriesV3Data, areaGridlineAllData, areaGridlineXData, areaGridlineYData, areaLeftRightAxisData, areaMultiSeriesInterpolationSmoothData, areaMultiSeriesInterpolationStepData, areaMultiSeriesSimpleData, areaSingleSeriesInterpolationSmoothData, areaSingleSeriesInterpolationStepData, areaSingleSeriesNonZeroData, areaSingleSeriesSimpleData, areaTopBottomAxisData, binnedData90, binnedDateData, binnedDateNegativeOnly, binnedDatePositiveOnly, browserData, categoryData, categoryDataStackedArcs, durationCategoryData, febHeatMapData, generateBinnedData, generateCategoryData, generateData, generateDate, generateDateData, heatmapCalendarData, heatmapCalendarOffsetData, heatmapLargeBlocksData, heatmapMediumBlocksData, heatmapMediumSimpleBlocksData, heatmapSimpleData, heatmapSmallBlocksData, heatmapSmallSimpleBlocksData, heatmapXSmallBlocksData, heatmapXSmallSimpleBlocksData, histogramNumberData, icons, janHeatMapData, labelsData, largeBubbleData, largeCategoryData, largeCategoryData2, largeDateData, largeFunnelData, largeSignalChartData, lineCircleSeriesShapesData, lineCircleSeriesV1Data, lineCircleSeriesV2Data, lineCircleSeriesV3Data, lineGridlineAllData, lineGridlineXData, lineGridlineYData, lineMultiSeriesSimpleData, lineMultiSeriesStackedData, lineSingleSeriesInterpolationSmoothData, lineSingleSeriesInterpolationStepData, lineSingleSeriesLargeData, lineSingleSeriesSimpleData, links, longMultiDateData, longTreemapData, marchHeatMapData, medDateData, medSignalChartData, mediumBubbleData, mediumCategoryData, mediumMultiDateData, mitreData, multiCategory, multiCategorySmallBlock, multiCategoryXSmallBlock, multiDateData, nestedTreemapData, nodes, nonZeroCategoryData, nonZeroDateData, numberData, pieLabelData, randomNumber, sankeyLinks, sankeyNodes, signalChartData, signalStageData, signalStages, simpleBubbleData, simpleFunnelData, simpleRadialGaugeData, simpleSankeyLinks, simpleSankeyNodes, simpleTreemapData, singleDateBigIntData, singleDateData, smallDateData, sonarData, sonarDataEmpties };
