import * as React from "react";
import { useEffect, createContext, useState, useRef, useLayoutEffect, forwardRef, useImperativeHandle, useCallback, Fragment, useMemo, useContext, createElement, Children, isValidElement, cloneElement, Suspense } from "react";
import { jsx, jsxs, Fragment as Fragment$1 } from "react/jsx-runtime";
import { disableBodyScroll, clearAllBodyScrollLocks } from "body-scroll-lock-upgrade";
import { motion, AnimatePresence, useMotionValue, useTransform } from "motion/react";
import { createPortal } from "react-dom";
import { useFloating, autoUpdate, flip, shift, limitShift, size } from "@floating-ui/react";
import { twMerge } from "tailwind-merge";
import { isValid, getDaysInMonth, startOfMonth, getDay, subDays, getDate, getISODay, format, isSameDay, isSameMonth, addDays, min, max, isBefore, isAfter, isWithinInterval, isToday, getMonth, getYear, startOfDecade, endOfDecade, sub, subYears, add, addYears, setMonth, setYear, addMonths, parse, differenceInSeconds, formatDistance } from "date-fns";
import FocusTrap from "focus-trap-react";
import classNames from "classnames";
import getInitials from "name-initials";
import { generateColor } from "@marko19907/string-to-color";
import ellipsize from "ellipsize";
import { keys } from "ctrl-keys";
import Highlighter from "react-highlight-words";
import { useFuzzy } from "@reaviz/react-use-fuzzy";
import isEqual from "react-fast-compare";
import TextareaAutosize from "react-textarea-autosize";
import pluralizeLib from "pluralize";
import humanFormat from "human-format";
import coverup from "coverup";
import chroma from "chroma-js";
import creteGlobalStateHook from "create-global-state-hook";
const useExitListener = ({
  ref,
  open = true,
  onClickOutside,
  onEscape
}) => {
  useEffect(() => {
    if (!open) {
      return;
    }
    const handleClick = (event) => {
      if (ref.current && !ref.current.contains(event.target)) {
        onClickOutside == null ? void 0 : onClickOutside(event);
      }
    };
    const handleKey = (event) => {
      if (event.code === "Escape") {
        onEscape == null ? void 0 : onEscape(event);
      }
    };
    if (onClickOutside) {
      document.addEventListener("mousedown", handleClick);
      document.addEventListener("touchstart", handleClick);
    }
    if (onEscape) {
      document.addEventListener("keydown", handleKey);
    }
    return () => {
      if (onClickOutside) {
        document.removeEventListener("mousedown", handleClick);
        document.removeEventListener("touchstart", handleClick);
      }
      if (onEscape) {
        document.removeEventListener("keydown", handleKey);
      }
    };
  }, [ref, onClickOutside, onEscape, open]);
};
const OverlayContext = createContext({
  close: () => void 0
});
let id = 0;
const genId = () => `ref-${++id}`;
const useId = (idFromProps) => {
  const [id2] = useState(idFromProps || genId());
  return `${id2}`;
};
const useUnmount = (fn) => {
  const fnRef = useRef(fn);
  fnRef.current = fn;
  useLayoutEffect(() => () => fnRef.current(), []);
};
const Portal = forwardRef(
  ({ children, className, style, element = "div", onMount, onUnmount }, ref) => {
    const elementRef = useRef(null);
    const mounted = useRef(false);
    useEffect(() => {
      var _a;
      if (className && elementRef.current) {
        elementRef.current.setAttribute("class", `${className} rdk-portal`);
      }
      if (style && elementRef.current) {
        (_a = Object.keys(style)) == null ? void 0 : _a.forEach(
          (key) => {
            var _a2;
            return (_a2 = elementRef.current.style) == null ? void 0 : _a2.setProperty(key, style[key]);
          }
        );
      }
    }, [className, style, elementRef.current]);
    useLayoutEffect(() => {
      elementRef.current = document.createElement(element);
      onMount == null ? void 0 : onMount();
    }, []);
    useUnmount(() => {
      onUnmount == null ? void 0 : onUnmount();
      const ref2 = elementRef.current;
      if (ref2 && document.body.contains(ref2)) {
        document.body.removeChild(ref2);
      }
    });
    useImperativeHandle(ref, () => elementRef.current);
    if (!elementRef.current) {
      return null;
    }
    if (!mounted.current) {
      mounted.current = true;
      elementRef.current.classList.add("rdk-portal");
      document.body.appendChild(elementRef.current);
    }
    return createPortal(children, elementRef.current);
  }
);
const portals = [];
const START_INDEX = 990;
const OverlayPortal = forwardRef(
  ({
    className,
    children,
    onMount,
    onUnmount,
    appendToBody = true,
    id: id2,
    style
  }, ref) => {
    let portalId = useId(id2);
    const [portalIndex, setPortalIndex] = useState(null);
    const [overlayIndex, setOverlayIndex] = useState(null);
    const portalRef = useRef(null);
    useImperativeHandle(ref, () => portalRef.current);
    return /* @__PURE__ */ jsx(
      Portal,
      {
        className,
        ref: portalRef,
        style,
        appendToBody,
        onMount: () => {
          portals.push(portalId);
          let pidx = portals.indexOf(portalId);
          setPortalIndex(pidx);
          const overlayIdx = START_INDEX + pidx * 2 + 1;
          setOverlayIndex(overlayIdx);
          onMount == null ? void 0 : onMount({
            portalId,
            overlayIndex: overlayIdx,
            portalIndex: pidx,
            backdropIndex: overlayIdx
          });
        },
        onUnmount: () => {
          onUnmount == null ? void 0 : onUnmount();
          portals.splice(portals.indexOf(portalId), 1);
          setPortalIndex(null);
          setOverlayIndex(null);
        },
        children: children({
          overlayIndex,
          portalIndex,
          backdropIndex: overlayIndex,
          portalId
        })
      }
    );
  }
);
const Backdrop = ({
  zIndex = 998,
  portalIndex = 0,
  className,
  theme: customTheme,
  onClick
}) => {
  const theme2 = useComponentTheme("backdrop", customTheme);
  return /* @__PURE__ */ jsx(
    motion.div,
    {
      className: cn(theme2.base, className),
      initial: { opacity: 0 },
      animate: { opacity: theme2.opacity - portalIndex / 10 },
      exit: { opacity: 0 },
      style: { zIndex },
      onClick
    }
  );
};
const backdropTheme = {
  base: "fixed top-0 left-0 w-full h-full opacity-0 select-none bg-black",
  opacity: 0.8
};
const legacyBackdropTheme = {
  base: "fixed top-0 left-0 w-full h-full opacity-0 select-none bg-[var(--color-layer-transparent)]",
  opacity: 0.8
};
const GlobalOverlay = ({
  open,
  hasBackdrop = true,
  closeOnEscape = true,
  closeOnBackdropClick = true,
  backdropClassName,
  children,
  onClose
}) => {
  const overlayRef = useRef(null);
  const onBackdropClick = useCallback(() => {
    if (closeOnBackdropClick) {
      onClose == null ? void 0 : onClose();
    }
  }, [closeOnBackdropClick, onClose]);
  useExitListener({
    ref: overlayRef,
    open,
    onEscape: () => closeOnEscape && (onClose == null ? void 0 : onClose())
  });
  useEffect(() => {
    if (open && overlayRef.current !== void 0) {
      disableBodyScroll(overlayRef.current, {
        // allowTouchMove determines which elements to allow touchmove events for iOS
        // Reference: https://github.com/rick-liruixin/body-scroll-lock-upgrade?tab=readme-ov-file#allowtouchmove
        // NOTE: allowTouchMove is typed wrong: https://github.com/rick-liruixin/body-scroll-lock-upgrade/issues/21
        allowTouchMove: (el) => {
          while (el && el !== document.body) {
            if (el.getAttribute("body-scroll-lock-ignore") !== null) {
              return true;
            }
            if (el.parentElement !== null) {
              el = el.parentElement;
            }
          }
          return false;
        }
      });
    } else {
      clearAllBodyScrollLocks();
    }
    return () => {
      clearAllBodyScrollLocks();
    };
  }, [children, open]);
  return /* @__PURE__ */ jsx(OverlayContext.Provider, { value: { close: () => onClose == null ? void 0 : onClose() }, children: /* @__PURE__ */ jsx(AnimatePresence, { children: open && /* @__PURE__ */ jsx(OverlayPortal, { ref: overlayRef, children: ({ overlayIndex, portalIndex }) => /* @__PURE__ */ jsxs(Fragment, { children: [
    hasBackdrop && /* @__PURE__ */ jsx(
      Backdrop,
      {
        zIndex: overlayIndex,
        portalIndex,
        onClick: onBackdropClick,
        className: backdropClassName
      }
    ),
    /* @__PURE__ */ jsx("div", { "body-scroll-lock-ignore": "true", children: children({ overlayIndex, portalIndex }) })
  ] }) }) }) });
};
const OverlayTrigger = forwardRef(
  ({
    children,
    className,
    elementType = "span",
    trigger = ["click"],
    onOpen = () => void 0,
    onClose = () => void 0
  }, ref) => {
    const hasTrigger = useCallback(
      (type) => {
        if (Array.isArray(trigger)) {
          return trigger.includes(type);
        } else {
          return type === trigger;
        }
      },
      [trigger]
    );
    const onFocus = useCallback(
      (event) => {
        if (hasTrigger("focus")) {
          onOpen({ type: "focus", nativeEvent: event });
        }
      },
      [onOpen, hasTrigger]
    );
    const onBlur = useCallback(
      (event) => {
        if (hasTrigger("focus")) {
          onClose({ type: "focus", nativeEvent: event });
        }
      },
      [onClose, hasTrigger]
    );
    const onMouseEnter = useCallback(
      (event) => {
        if (hasTrigger("hover")) {
          onOpen({ type: "hover", nativeEvent: event });
        }
      },
      [onOpen, hasTrigger]
    );
    const onMouseLeave = useCallback(
      (event) => {
        if (hasTrigger("hover")) {
          onClose({ type: "hover", nativeEvent: event });
        }
      },
      [onClose, hasTrigger]
    );
    const onClick = useCallback(
      (event) => {
        if (hasTrigger("click")) {
          onOpen({ type: "click", nativeEvent: event });
        }
        if (!hasTrigger("click")) {
          onClose({ type: "hover", nativeEvent: event });
        }
      },
      [onOpen, onClose, hasTrigger]
    );
    const onContextMenu = useCallback(
      (event) => {
        if (hasTrigger("contextmenu")) {
          event.preventDefault();
          onOpen({ type: "contextmenu", nativeEvent: event });
        }
      },
      [hasTrigger, onOpen]
    );
    const tabIndex = hasTrigger("focus") ? -1 : void 0;
    const Component = elementType;
    return /* @__PURE__ */ jsx(
      Component,
      {
        ref,
        tabIndex,
        onMouseEnter,
        onMouseLeave,
        onFocus,
        onBlur,
        onClick,
        onContextMenu,
        className,
        children
      }
    );
  }
);
const usePosition = ({
  reference,
  floating,
  followCursor,
  placement = "top",
  modifiers = [flip(), shift({ limiter: limitShift() })]
} = {}) => {
  const isVirtualElement = useMemo(
    () => !(reference == null ? void 0 : reference.nodeType),
    [reference]
  );
  const { refs, floatingStyles, update } = useFloating({
    open: true,
    placement,
    middleware: modifiers,
    elements: {
      reference: isVirtualElement ? null : reference,
      floating
    },
    whileElementsMounted: autoUpdate
  });
  useEffect(() => {
    if (isVirtualElement && reference && !followCursor) {
      const refObject = reference;
      refs.setPositionReference({
        getBoundingClientRect() {
          return {
            width: refObject.width,
            height: refObject.height,
            x: refObject.left,
            y: refObject.top,
            left: refObject.left,
            top: refObject.top,
            right: refObject.left + refObject.width,
            bottom: refObject.top + refObject.height
          };
        }
      });
    }
  }, [reference, refs, isVirtualElement, followCursor]);
  const onMouseMove = useCallback(
    ({ clientX, clientY }) => {
      refs.setPositionReference({
        getBoundingClientRect() {
          return {
            width: 0,
            height: 0,
            x: clientX,
            y: clientY,
            left: clientX,
            top: clientY,
            right: clientX,
            bottom: clientY
          };
        }
      });
    },
    [refs]
  );
  useLayoutEffect(() => {
    if (followCursor) {
      window.addEventListener("mousemove", onMouseMove);
    }
    return () => {
      window.removeEventListener("mousemove", onMouseMove);
    };
  }, [followCursor, onMouseMove]);
  return {
    refs,
    anchorRef: refs.reference,
    floatingRef: refs.floating,
    floatingStyles,
    update
  };
};
const ConnectedOverlayContent = forwardRef(
  ({
    triggerRef,
    children,
    portalClassName,
    closeOnBodyClick = true,
    closeOnEscape = true,
    elementType,
    appendToBody = true,
    followCursor,
    modifiers,
    placement = "bottom",
    onClose
  }, ref) => {
    const id2 = useId();
    const [overlayIndex, setOverlayIndex] = useState(null);
    const { refs, floatingStyles, update } = usePosition({
      reference: triggerRef.current ?? triggerRef,
      followCursor,
      modifiers,
      placement
    });
    useImperativeHandle(ref, () => ({
      updatePosition: () => {
        update();
      }
    }));
    const onClickOutside = useCallback(
      (event) => {
        if (closeOnBodyClick) {
          let ref2 = null;
          if (triggerRef.current) {
            ref2 = triggerRef.current;
          } else if (triggerRef.contains !== void 0) {
            ref2 = triggerRef;
          }
          const container = event.target.closest(".rdk-portal");
          const isLast = portals.indexOf(id2) === portals.length - 1;
          if (!(ref2 == null ? void 0 : ref2.contains(event.target)) && (isLast || !container)) {
            onClose == null ? void 0 : onClose(event);
          }
        }
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [closeOnBodyClick, onClose]
    );
    const onEscape = useCallback(() => {
      if (closeOnEscape) {
        onClose == null ? void 0 : onClose();
      }
    }, [closeOnEscape, onClose]);
    useExitListener({
      open: true,
      ref: refs.floating,
      onClickOutside,
      onEscape
    });
    return /* @__PURE__ */ jsx(
      OverlayPortal,
      {
        id: id2,
        ref: refs.setFloating,
        style: { ...floatingStyles, "z-index": overlayIndex },
        className: portalClassName,
        elementType,
        appendToBody,
        onMount: (event) => setOverlayIndex(event.overlayIndex),
        onUnmount: () => setOverlayIndex(null),
        children
      }
    );
  }
);
const ConnectedOverlay = forwardRef(
  ({
    reference,
    children,
    open,
    content,
    triggerElement,
    triggerClassName,
    trigger = "click",
    onOpen,
    onClose,
    ...rest
  }, ref) => {
    const mounted = useRef(false);
    const overlayTriggerRef = useRef(null);
    const contentRef = useRef(null);
    const triggerRef = reference || overlayTriggerRef;
    useImperativeHandle(ref, () => ({
      updatePosition: () => {
        var _a;
        (_a = contentRef.current) == null ? void 0 : _a.updatePosition();
      }
    }));
    useEffect(() => {
      if (mounted.current) {
        if (!open) {
          onClose == null ? void 0 : onClose();
        } else {
          onOpen == null ? void 0 : onOpen();
        }
      }
    }, [open]);
    useEffect(() => {
      if (!mounted.current) {
        mounted.current = true;
      }
    });
    const providerValue = useMemo(
      () => ({
        close: () => onClose == null ? void 0 : onClose()
      }),
      [onClose]
    );
    return /* @__PURE__ */ jsxs(OverlayContext.Provider, { value: providerValue, children: [
      children && /* @__PURE__ */ jsx(Fragment, { children: trigger ? /* @__PURE__ */ jsx(
        OverlayTrigger,
        {
          elementType: triggerElement,
          ref: overlayTriggerRef,
          className: triggerClassName,
          trigger,
          onOpen,
          onClose,
          children
        }
      ) : children }),
      /* @__PURE__ */ jsx(AnimatePresence, { children: open && /* @__PURE__ */ jsx(
        ConnectedOverlayContent,
        {
          ...rest,
          ref: contentRef,
          triggerRef,
          onClose,
          children: content
        }
      ) })
    ] });
  }
);
const useOverlay = () => {
  const context = useContext(OverlayContext);
  if (context === void 0) {
    throw new Error(
      "`useOverlay` hook can only be used inside a overlay component."
    );
  }
  return context;
};
const baseTheme$H = {
  base: "inline-flex whitespace-no-wrap select-none items-center justify-center px-2.5 py-1 rounded-sm font-sans",
  disabled: "disabled:cursor-not-allowed",
  fullWidth: "flex w-full",
  group: "rounded-none first:rounded-s last:rounded-e border-s-0 first:border-s",
  groupText: "border border-y-transparent border-l-transparent last:border-r-transparent hover:bg-initial",
  adornment: {
    base: "flex",
    start: "pr-1",
    end: "pl-1",
    sizes: {
      small: "[&>svg]:w-3 [&>svg]:h-3",
      medium: "[&>svg]:w-4 [&>svg]:h-4",
      large: "[&>svg]:w-5 [&>svg]:h-5"
    }
  },
  sizes: {
    small: "text-sm px-2 py-1 leading-[normal]",
    medium: "text-base px-4 py-2 leading-[normal]",
    large: "text-xl px-5 py-2.5 leading-[normal]"
  },
  iconSizes: {
    small: "px-2 py-1",
    medium: "px-4 py-2",
    large: "px-5 py-2.5"
  }
};
const buttonTheme = {
  base: [baseTheme$H.base, "text-text-primary font-semibold"].join(" "),
  disabled: [
    baseTheme$H.disabled,
    "data-[variant=filled]:disabled:bg-gray-600 disabled:text-gray-400 border-gray-500"
  ].join(" "),
  fullWidth: baseTheme$H.fullWidth,
  group: baseTheme$H.group,
  groupText: baseTheme$H.groupText,
  adornment: baseTheme$H.adornment,
  sizes: baseTheme$H.sizes,
  iconSizes: baseTheme$H.iconSizes,
  variants: {
    filled: "bg-secondary hover:bg-border-secondary-hover border-secondary light:text-gray-100",
    outline: "bg-opacity-0 border-grey border",
    text: "bg-opacity-0 border-0"
  },
  colors: {
    default: {
      filled: "bg-gray-800 hover:bg-gray-700 border-gray-800",
      outline: "border-secondary border",
      text: "text-text-primary"
    },
    primary: {
      filled: "bg-primary hover:bg-primary-hover border-primary text-text-primary",
      outline: "border border-primary",
      text: "text-primary hover:text-primary-hover"
    },
    secondary: {
      filled: "bg-secondary hover:bg-secondary-hover !text-text-primary",
      outline: "border border-secondary",
      text: "text-secondary hover:text-secondary-hover"
    },
    success: {
      filled: "bg-success hover:bg-success-hover border-success text-text-primary",
      outline: "border border-success",
      text: "text-success hover:text-success-hover"
    },
    warning: {
      filled: "bg-warning hover:bg-warning-hover border-warning text-text-primary",
      outline: "border border-warning",
      text: "text-warning hover:text-warning-hover"
    },
    error: {
      filled: "bg-error hover:bg-error-hover border-error text-text-primary",
      outline: "border border-error",
      text: "text-error hover:text-error-hover"
    }
  }
};
const legacyButtonTheme = {
  base: [
    baseTheme$H.base,
    "[border:_var(--button-border)] rounded-[var(--button-border)] [font-family:_var(--button-font-family)] [font-weight:_var(--button-font-weight)]"
  ].join(" "),
  disabled: [
    baseTheme$H.disabled,
    "data-[variant=filled]:disabled:bg-[var(--disabled-background)] disabled:text-[var(--button-disabled-color-on-background)] border-[var(--disabled-background)]"
  ].join(" "),
  fullWidth: baseTheme$H.fullWidth,
  group: baseTheme$H.group,
  groupText: baseTheme$H.groupText,
  sizes: {
    small: "[font-size:_var(--font-size-sm)] p-[var(--button-spacing-sm)]",
    medium: "[font-size:_var(--font-size-md)] p-[var(--button-spacing-md)]",
    large: "[font-size:_var(--font-size-lg)] p-[var(--button-spacing-lg)]"
  },
  iconSizes: {
    small: "[font-size:_var(--font-size-sm)] p-[var(--button-spacing-sm)]",
    medium: "[font-size:_var(--font-size-md)] p-[var(--button-spacing-md)]",
    large: "[font-size:_var(--font-size-lg)] p-[var(--button-spacing-lg)]"
  },
  adornment: {
    ...baseTheme$H.adornment,
    start: [
      baseTheme$H.adornment.start,
      "[padding-right:_calc(var(--list-item-spacing)_/_2)]"
    ].join(" "),
    end: [
      baseTheme$H.adornment.start,
      "[padding-left:_calc(var(--list-item-spacing)_/_2)]"
    ].join(" "),
    sizes: {
      small: "[&>svg]:w-[var(--button-adornment-size-sm)] [&>svg]:h-[var(--button-adornment-size-sm)]",
      medium: "[&>svg]:w-[var(--button-adornment-size-md)] [&>svg]:h-[var(--button-adornment-size-md)]",
      large: "[&>svg]:w-[var(--button-adornment-size-lg)] [&>svg]:h-[var(--button-adornment-size-lg)]"
    }
  },
  variants: {
    filled: "bg-[var(--button-background)] text-[var(--button-color-on-background)] hover:bg-[var(--button-background-hover)] border-[var(--button-background)] hover:border-[var(--button-background-hover)]",
    outline: "bg-opacity-0 border-[var(--button-background)] hover:border-[var(--button-background-hover)] text-[var(--button-color)] hover:text-[var(--button-color-hover)] border",
    text: "bg-opacity-0 border-0"
  },
  colors: {
    default: {
      filled: "bg-[var(--button-background)] text-[var(--button-color-on-background)] hover:bg-[var(--button-background-hover)] border-[var(--button-background)] hover:border-[var(--button-background-hover)]",
      outline: "",
      text: "text-[var(--button-color)] hover:text-[var(--button-color-hover)]"
    },
    primary: {
      filled: "bg-[var(--primary-background)] hover:bg-[var(--primary-background-hover)] border-[var(--primary-background)] border-[var(--primary-background-hover)] text-[var(--button-color-on-background)]",
      outline: "",
      text: "text-[var(--primary-color)] hover:text-[var(--primary-color-hover)]"
    },
    secondary: {
      filled: "bg-[var(--secondary-background)] hover:bg-[var(--secondary-background-hover)] border-[var(--secondary-background)] hover:border-[var(--secondary-background-hover)] text-[var(--button-color-on-background)]",
      outline: "",
      text: "text-[var(--secondary-color)] hover:text-[var(--secondary-color-hover)]"
    },
    success: {
      filled: "bg-[var(--success-background)] hover:bg-[var(--success-background-hover)] border-[var(--success-background)] hover:border-[var(--success-background-hover)] text-[var(--button-color-on-background)]",
      outline: "",
      text: "text-[var(--success-color)] hover:text-[var(--success-color-hover)]"
    },
    warning: {
      filled: "bg-[var(--warning-background)] hover:bg-[var(--warning-background-hover)] border-[var(--warning-background)] hover:border-[var(--warning-background-hover)] text-[var(--button-color-on-background)]",
      outline: "",
      text: "text-[var(--warning-color)] hover:text-[var(--warning-color-hover)]"
    },
    error: {
      filled: "bg-[var(--error-background)] hover:bg-[var(--error-background-hover)] border-[var(--error-background)] hover:border-[var(--error-background-hover)] text-[var(--button-color-on-background)]",
      outline: "",
      text: "text-[var(--error-color)] hover:text-[var(--warning-error-hover)]"
    }
  }
};
const ButtonGroupContext = createContext({
  variant: null,
  size: null
});
const Button = forwardRef(
  ({
    color = "default",
    variant = "filled",
    children,
    fullWidth,
    size: size2 = "medium",
    disableAnimation,
    className,
    disableMargins,
    disablePadding,
    disabled,
    startAdornment,
    endAdornment,
    theme: customTheme,
    type = "button",
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("button", customTheme);
    const { variant: groupVariant, size: groupSize } = useContext(ButtonGroupContext);
    const isGroup = !!groupVariant && !!groupSize;
    return /* @__PURE__ */ jsxs(
      motion.button,
      {
        ...rest,
        type,
        disabled,
        ref,
        whileTap: { scale: disabled || disableAnimation ? 1 : 0.9 },
        "data-variant": groupVariant || variant,
        className: twMerge(
          theme2.base,
          theme2.disabled,
          fullWidth && theme2.fullWidth,
          theme2.variants[groupVariant || variant],
          theme2.colors[color][groupVariant || variant],
          theme2.sizes[groupSize || size2],
          isGroup && theme2.group,
          isGroup && groupVariant === "text" && theme2.groupText,
          disableMargins && "m-0",
          disablePadding && "p-0",
          className
        ),
        children: [
          startAdornment && /* @__PURE__ */ jsx(
            "div",
            {
              className: twMerge(
                theme2.adornment.base,
                theme2.adornment.start,
                theme2.adornment.sizes[size2]
              ),
              children: startAdornment
            }
          ),
          children,
          endAdornment && /* @__PURE__ */ jsx(
            "div",
            {
              className: twMerge(
                theme2.adornment.base,
                theme2.adornment.end,
                theme2.adornment.sizes[size2]
              ),
              children: endAdornment
            }
          )
        ]
      }
    );
  }
);
const ButtonGroup = ({
  children,
  className,
  variant,
  size: size2
}) => {
  const values = useMemo(
    () => ({
      variant: variant || "filled",
      size: size2 || "medium"
    }),
    [size2, variant]
  );
  return /* @__PURE__ */ jsx(ButtonGroupContext.Provider, { value: values, children: /* @__PURE__ */ jsx("div", { className, children }) });
};
const Chip = forwardRef(
  ({
    children,
    color = "default",
    variant = "filled",
    size: size2 = "medium",
    selected,
    disabled,
    className,
    disableMargins,
    start,
    end,
    onClick,
    theme: customTheme,
    ...rest
  }, ref) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
    const theme2 = useComponentTheme("chip", customTheme);
    return /* @__PURE__ */ jsxs(
      "div",
      {
        ...rest,
        ref,
        tabIndex: onClick ? 0 : -1,
        onClick: !disabled ? onClick : void 0,
        className: twMerge(
          theme2.base,
          theme2.variants[variant],
          (_a = theme2.colors[color]) == null ? void 0 : _a.base,
          (_c = (_b = theme2.colors[color]) == null ? void 0 : _b.variants) == null ? void 0 : _c[variant],
          theme2.sizes[size2],
          theme2.focus,
          !!onClick && !disabled && ((_e = (_d = theme2.colors[color]) == null ? void 0 : _d.selectable) == null ? void 0 : _e.base),
          !!onClick && !disabled && ((_i = (_h = (_g = (_f = theme2.colors[color]) == null ? void 0 : _f.selectable) == null ? void 0 : _g.variants) == null ? void 0 : _h[variant]) == null ? void 0 : _i.base),
          selected && ((_m = (_l = (_k = (_j = theme2.colors[color]) == null ? void 0 : _j.selectable) == null ? void 0 : _k.variants) == null ? void 0 : _l[variant]) == null ? void 0 : _m.selected),
          disableMargins && "m-0",
          "transition-colors duration-300 ease [&>svg]:transition-[fill] [&>svg]:will-change-[fill]",
          className,
          disabled && theme2.disabled
        ),
        "aria-disabled": disabled,
        children: [
          start && /* @__PURE__ */ jsx(
            "div",
            {
              className: twMerge(
                theme2.adornment.base,
                theme2.adornment.start,
                theme2.adornment.sizes[size2]
              ),
              children: start
            }
          ),
          /* @__PURE__ */ jsx("div", { className: "flex items-center", children }),
          end && /* @__PURE__ */ jsx(
            "div",
            {
              className: twMerge(
                theme2.adornment.base,
                theme2.adornment.end,
                theme2.adornment.sizes[size2]
              ),
              children: end
            }
          )
        ]
      }
    );
  }
);
function getMonthNames(locale, format2 = "short") {
  if (!locale && typeof window !== "undefined") {
    locale = navigator.language;
  }
  const formatter = new Intl.DateTimeFormat(locale, {
    month: format2,
    timeZone: "UTC"
  });
  const months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((month) => {
    const mm = month < 10 ? `0${month}` : month;
    return /* @__PURE__ */ new Date(`2017-${mm}-01T00:00:00+00:00`);
  });
  return months.map((date) => formatter.format(date));
}
const monthNames = getMonthNames();
function getDayLabels(locale) {
  return Array.from({ length: 7 }, (_, i) => {
    if (!locale && typeof window !== "undefined") {
      locale = navigator.language;
    }
    return new Intl.DateTimeFormat(locale, {
      weekday: "short"
    }).format(new Date(1970, 0, 4 + i));
  });
}
const daysOfWeek = getDayLabels();
function getWeeks(date, options = { format: "MM/dd/yyyy" }) {
  if (!date) {
    throw new Error("A date is required");
  } else if (!isValid(date)) {
    console.warn("Invalid date - setting to today", date);
    date = /* @__PURE__ */ new Date();
  }
  const daysInMonth = getDaysInMonth(date);
  let day = startOfMonth(date);
  let offset = getDay(day);
  const numOfWeeks = Math.ceil((daysInMonth + offset) / 7);
  const weeks = Array.apply(null, {
    length: numOfWeeks
  }).map(() => []);
  const current = /* @__PURE__ */ new Date();
  const [firstWeek] = weeks;
  for (let i = offset; i > 0; i--) {
    const offsetDay = subDays(day, i);
    firstWeek.push({
      date: offsetDay,
      dayOfMonth: getDate(offsetDay),
      isWeekendDay: getISODay(offsetDay) > 5,
      isPreviousMonth: true,
      isNextMonth: false,
      isToday: false,
      formattedDate: format(offsetDay, options.format)
    });
  }
  for (let i = 0, week = weeks[i]; i < numOfWeeks; i++, week = weeks[i]) {
    for (let dayOfWeek = offset; dayOfWeek < 7; dayOfWeek++) {
      week.push({
        date: day,
        dayOfMonth: getDate(day),
        isPreviousMonth: false,
        isToday: isSameDay(day, current),
        isNextMonth: !isSameMonth(day, date),
        isWeekendDay: getISODay(day) > 5,
        formattedDate: format(day, options.format)
      });
      day = addDays(day, 1);
    }
    offset = 0;
  }
  return weeks;
}
function getDayAttributes(day, current, hover, isRange) {
  let isActive = false;
  let isRangeStart = false;
  let isRangeEnd = false;
  const isInRange = (date, range) => {
    const startDate = min(range);
    const endDate = max(range);
    return isWithinInterval(date, { start: startDate, end: endDate });
  };
  const isSelectionStarted = Array.isArray(current) && isValid(current[0]);
  const isSelectionComplete = isSelectionStarted && isValid(current[1]);
  if (!isRange && isValid(current)) {
    isActive = isSameDay(day, current);
  } else if (!isSelectionStarted) {
    isActive = isSameDay(day, hover);
    isRangeStart = isActive;
    isRangeEnd = isActive;
  } else if (isSelectionComplete) {
    isActive = isInRange(day, current);
    isRangeStart = isSameDay(day, current[0]);
    isRangeEnd = isSameDay(day, current[1]);
  } else {
    const activeRange = [current[0], hover ?? current[0]];
    isActive = isInRange(day, activeRange);
    isRangeStart = isSameDay(day, min(activeRange));
    isRangeEnd = isSameDay(day, max(activeRange));
  }
  return { isActive, isRangeStart, isRangeEnd };
}
function isNextWeekEmpty(day, range, hideNextMonth) {
  const nextWeek = addDays(day, 7);
  const nextWeekInRange = isBefore(nextWeek, max(range)) || isSameDay(nextWeek, max(range));
  return !(nextWeekInRange && (isSameMonth(day, nextWeek) || !hideNextMonth));
}
function isPreviousWeekEmpty(day, range, hidePrevMonth) {
  const prevWeek = addDays(day, -7);
  const prevWeekInRange = isAfter(prevWeek, min(range)) || isSameDay(prevWeek, min(range));
  return !(prevWeekInRange && (isSameMonth(day, prevWeek) || !hidePrevMonth));
}
const CalendarDays = ({
  value,
  current,
  hover = null,
  isRange,
  disabled,
  min: minLimit,
  max: max2,
  animated,
  xAnimation = 0,
  showDayOfWeek,
  showToday,
  dayOfWeekLabels = daysOfWeek,
  hidePrevMonthDays,
  hideNextMonthDays,
  onChange,
  onHover,
  theme: customTheme
}) => {
  const { days } = useComponentTheme("calendar", customTheme);
  const [hoveringDate, setHoveringDate] = useState(hover);
  const weeks = useMemo(() => getWeeks(value), [value]);
  const maxLimit = useMemo(() => max2 === "now" ? /* @__PURE__ */ new Date() : max2, [max2]);
  const renderDay = useCallback(
    (day) => {
      if (day.isPreviousMonth && hidePrevMonthDays || day.isNextMonth && hideNextMonthDays) {
        return /* @__PURE__ */ jsx("div", {}, day.dayOfMonth);
      }
      const handleHover = (value2) => {
        if (onHover) {
          onHover(value2);
        } else {
          setHoveringDate(value2);
        }
      };
      const isDisabled = disabled || minLimit && isBefore(day.date, minLimit) || maxLimit && isAfter(day.date, maxLimit);
      const currentHover = hover || hoveringDate;
      const { isActive, isRangeStart, isRangeEnd } = getDayAttributes(
        day.date,
        current,
        currentHover,
        isRange
      );
      const currentRange = Array.isArray(current) ? [current[0], current[1] ?? currentHover] : [current ?? hoveringDate, current ?? hoveringDate];
      const isRangeMiddle = isRange && isActive && !isRangeStart && !isRangeEnd;
      const rangeConnectsBottom = isRangeStart && isNextWeekEmpty(day.date, currentRange, hideNextMonthDays);
      const rangeConnectsTop = isRangeEnd && isPreviousWeekEmpty(day.date, currentRange, hidePrevMonthDays);
      const colorVariant = isActive ? "primary" : "default";
      const buttonVariant = isActive ? "filled" : "text";
      return /* @__PURE__ */ jsx(
        Button,
        {
          className: cn(days.day, {
            [days.outside]: !isActive && (day.isNextMonth || day.isPreviousMonth),
            [days.today]: showToday && isToday(day.date),
            [days.selected]: isActive,
            [days.hover]: day.date === currentHover,
            [days.range]: isRangeMiddle,
            [days.startRangeDate]: isRange && isRangeStart && !isRangeEnd,
            [days.cornerStartDateBottom]: isRange && isActive && !rangeConnectsBottom,
            [days.endRangeDate]: isRange && isRangeEnd && !isRangeStart,
            [days.cornerEndDateTop]: isRange && isActive && !rangeConnectsTop
          }),
          onMouseEnter: () => handleHover(day.date),
          onMouseLeave: () => handleHover(null),
          variant: buttonVariant,
          color: colorVariant,
          disableMargins: true,
          disabled: isDisabled,
          title: day.formattedDate,
          onClick: () => onChange(day.date),
          children: day.dayOfMonth
        },
        day.formattedDate
      );
    },
    [
      disabled,
      minLimit,
      maxLimit,
      current,
      hover,
      isRange,
      onChange,
      onHover,
      hoveringDate,
      days,
      hideNextMonthDays,
      hidePrevMonthDays,
      showToday
    ]
  );
  return /* @__PURE__ */ jsx(AnimatePresence, { mode: "popLayout", children: /* @__PURE__ */ jsxs(
    motion.div,
    {
      initial: { opacity: 0, x: xAnimation },
      animate: { opacity: 1, x: 0 },
      transition: {
        x: { type: animated ? "keyframes" : false },
        opacity: { duration: 0.2, type: animated ? "tween" : false }
      },
      children: [
        showDayOfWeek && /* @__PURE__ */ jsx("div", { className: days.header, children: dayOfWeekLabels.map((day) => /* @__PURE__ */ jsx("div", { className: days.dayOfWeek, children: day.substring(0, 2) }, `day-${day}`)) }),
        weeks.map((week, i) => /* @__PURE__ */ jsx("div", { className: days.week, children: week.map(renderDay) }, `week-${i}`))
      ]
    },
    value.toString()
  ) });
};
const CalendarMonths = ({
  value,
  onChange,
  theme: customTheme
}) => {
  const { months } = useComponentTheme("calendar", customTheme);
  return /* @__PURE__ */ jsx("div", { className: months.root, children: monthNames.map((month, i) => /* @__PURE__ */ jsx(
    Button,
    {
      className: cn(months.month, { [months.selected]: value === i }),
      color: value === i ? "primary" : "default",
      variant: value === i ? "filled" : "text",
      disableMargins: true,
      title: month,
      onClick: () => onChange(i),
      children: month
    },
    month
  )) });
};
const CalendarYears = ({
  decadeStart,
  decadeEnd,
  value,
  animated,
  xAnimation = 0,
  onChange,
  theme: customTheme
}) => {
  const { years } = useComponentTheme("calendar", customTheme);
  const yearDates = useMemo(() => {
    const arr = [];
    const start = decadeStart.getFullYear();
    const end = decadeEnd.getFullYear();
    for (let i = start - 1; i < end + 2; i++) {
      arr.push(i);
    }
    return arr;
  }, [decadeEnd, decadeStart]);
  return /* @__PURE__ */ jsx(AnimatePresence, { mode: "popLayout", children: /* @__PURE__ */ jsx(
    motion.div,
    {
      className: years.root,
      initial: { opacity: 0, x: xAnimation },
      animate: { opacity: 1, x: 0 },
      transition: {
        x: { type: animated ? "keyframes" : false },
        opacity: { duration: 0.2, type: animated ? "tween" : false }
      },
      children: yearDates.map((year) => /* @__PURE__ */ jsx(
        Button,
        {
          className: cn(years.year, { [years.selected]: value === year }),
          color: value === year ? "primary" : "default",
          variant: value === year ? "filled" : "text",
          disableMargins: true,
          title: year,
          onClick: () => onChange(year),
          children: year
        },
        year
      ))
    },
    `${decadeStart.toString()}-${decadeEnd.toString()}`
  ) });
};
const PageTitle = forwardRef(
  ({
    children,
    color = "default",
    variant = "default",
    disableMargins = false,
    className,
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("typography", customTheme);
    return /* @__PURE__ */ jsx(
      "h1",
      {
        ref,
        className: twMerge(
          theme2.colors[color],
          theme2.variant[variant],
          theme2.pageTitle,
          disableMargins && theme2.disableMargins,
          className
        ),
        ...rest,
        children
      }
    );
  }
);
const PrimaryHeading = forwardRef(
  ({
    children,
    color = "default",
    variant = "default",
    disableMargins = false,
    className,
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme(
      "typography",
      customTheme
    );
    return /* @__PURE__ */ jsx(
      "h2",
      {
        ref,
        className: twMerge(
          theme2.colors[color],
          theme2.variant[variant],
          theme2.primaryHeading,
          disableMargins && theme2.disableMargins,
          className
        ),
        ...rest,
        children
      }
    );
  }
);
const SecondaryHeading = forwardRef(
  ({
    children,
    color = "default",
    variant = "default",
    disableMargins = false,
    className,
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme(
      "typography",
      customTheme
    );
    return /* @__PURE__ */ jsx(
      "h3",
      {
        ref,
        className: twMerge(
          theme2.colors[color],
          theme2.variant[variant],
          theme2.secondaryHeading,
          disableMargins && theme2.disableMargins,
          className
        ),
        ...rest,
        children
      }
    );
  }
);
const SmallHeading = forwardRef(
  ({
    children,
    color = "default",
    variant = "default",
    disableMargins = false,
    className,
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("typography", customTheme);
    return /* @__PURE__ */ jsx(
      "h5",
      {
        ref,
        className: twMerge(
          theme2.colors[color],
          theme2.variant[variant],
          theme2.smallHeading,
          disableMargins && theme2.disableMargins,
          className
        ),
        ...rest,
        children
      }
    );
  }
);
const Sub = forwardRef(
  ({
    color = "default",
    variant = "default",
    disableMargins = false,
    children,
    className,
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("typography", customTheme);
    return /* @__PURE__ */ jsx(
      "h6",
      {
        ref,
        className: twMerge(
          theme2.colors[color],
          theme2.variant[variant],
          theme2.sub,
          disableMargins && theme2.disableMargins,
          className
        ),
        ...rest,
        children
      }
    );
  }
);
const Text = forwardRef(
  ({
    color = "default",
    variant = "default",
    fontStyle = "default",
    children,
    className,
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("typography", customTheme);
    return /* @__PURE__ */ jsx(
      "span",
      {
        ref,
        className: twMerge(
          theme2.colors[color],
          theme2.variant[variant],
          theme2.text[fontStyle],
          className
        ),
        ...rest,
        children
      }
    );
  }
);
const baseTheme$G = {
  text: {
    thin: "font-thin",
    bold: "font-semibold",
    extraBold: "font-extrabold",
    italic: "italic"
  },
  variant: {
    default: "",
    mono: "font-mono"
  },
  colors: {
    primary: "text-primary",
    secondary: "text-secondary",
    success: "text-success",
    warning: "text-warning",
    error: "text-error",
    info: "text-info"
  },
  sub: "text-sm font-semibold mb-0.5",
  smallHeading: "text-base font-normal mb-1",
  secondaryHeading: "text-3xl font-normal mb-1",
  primaryHeading: "text-3xl font-extrabold mb-1",
  pageTitle: "text-[40px] font-semibold mb-5",
  disableMargins: "m-0"
};
const typographyTheme = {
  ...baseTheme$G
};
const legacyTypographyTheme = {
  ...baseTheme$G,
  colors: {
    primary: "text-[var(--primary-color)]",
    secondary: "text-[var(--secondary-color)]",
    success: "text-[var(--success-color)]",
    warning: "text-[var(--warning-color)]",
    error: "text-[var(--error-color)]",
    info: "text-[var(--info-color)]"
  },
  pageTitle: "[font-family:_var(--font-family)] [font-size:_var(--page-title-font-size)] [font-weight:_var(--page-title-font-weight)] color-[var(--page-title-color)] m-[var(--page-title-margin)]",
  primaryHeading: "[font-family:_var(--font-family)] [font-size:_var(--primary-heading-font-size)] [font-weight:_var(--primary-heading-font-weight)] text-[var(--primary-heading-color)] m-[var(--primary-heading-margin)]",
  secondaryHeading: "[font-family:_var(--font-family)] [font-size:_var(--secondary-heading-font-size)] [font-weight:_var(--secondary-heading-font-weight)] text-[var(--secondary-heading-color)] m-[var(--secondary-heading-margin)]",
  smallHeading: "[font-family:_var(--font-family)] [font-size:_var(--small-heading-font-size)] [font-weight:_var(--small-heading-font-weight)] text-[var(--small-heading-color)] m-[var(--small-heading-margin)]",
  sub: "[font-size:_var(--sub-font-size)] [font-weight:_var(--sub-font-weight)] text-[var(--sub-color)] m-[var(--sub-margin)]",
  text: {
    ...baseTheme$G.text,
    thin: "[font-weight:_var(--font-weight-thin)]",
    bold: "[font-weight:_var(--font-weight-bold)]",
    extraBold: "[font-weight:_var(--font-weight-extraBold)]"
  }
};
const Divider = ({
  className,
  disableMargins = false,
  orientation = "horizontal",
  variant = "primary",
  theme: customTheme,
  ...rest
}) => {
  const theme2 = useComponentTheme("divider", customTheme);
  return /* @__PURE__ */ jsx(
    "hr",
    {
      ...rest,
      className: twMerge(
        theme2.base,
        theme2.variant[variant],
        theme2.orientation[orientation],
        disableMargins && theme2.disableMargins,
        className
      )
    }
  );
};
const baseTheme$F = {
  base: "border-none",
  orientation: {
    horizontal: "h-px w-full my-2.5",
    vertical: "w-px h-full mx-2.5"
  },
  variant: {
    primary: "bg-surface",
    secondary: "bg-gradient-to-r from-transparent to-transparent via-blue-500"
  },
  disableMargins: "my-0 mx-0"
};
const dividerTheme = {
  ...baseTheme$F
};
const legacyDividerTheme = {
  ...baseTheme$F,
  base: [baseTheme$F.base, "bg-[var(--divider-background)]"].join(" "),
  orientation: {
    horizontal: [
      baseTheme$F.orientation.horizontal,
      "my-[var(--divider-spacing)]"
    ].join(" "),
    vertical: [
      baseTheme$F.orientation.vertical,
      " mx-[var(--divider-spacing)]"
    ].join(" ")
  }
};
const Calendar = ({
  min: min$1,
  max: max$1,
  value,
  disabled,
  isRange,
  previousArrow = "‹",
  nextArrow = "›",
  showDayOfWeek,
  showToday,
  animated = true,
  onChange,
  onViewChange,
  theme: customTheme
}) => {
  const theme2 = useComponentTheme("calendar", customTheme);
  const date = useMemo(
    () => Array.isArray(value) ? value[0] : value ?? /* @__PURE__ */ new Date(),
    [value]
  );
  const rangeStart = useMemo(
    () => isRange && Array.isArray(value) ? value == null ? void 0 : value[0] : void 0,
    [isRange, value]
  );
  const rangeEnd = useMemo(
    () => isRange && Array.isArray(value) ? value == null ? void 0 : value[1] : void 0,
    [isRange, value]
  );
  const [viewValue, setViewValue] = useState(date);
  const [monthValue, setMonthValue] = useState(getMonth(date));
  const [yearValue, setYearValue] = useState(getYear(date));
  const [decadeStart, setDecadeStart] = useState(startOfDecade(date));
  const [decadeEnd, setDecadeEnd] = useState(endOfDecade(date));
  const [view, setView] = useState("days");
  const [scrollDirection, setScrollDirection] = useState(null);
  const previousClickHandler = useCallback(() => {
    setScrollDirection("back");
    if (view === "days") {
      setViewValue(sub(viewValue, { months: 1 }));
    } else if (view === "months") {
      setYearValue(yearValue - 1);
    } else {
      setDecadeStart(subYears(decadeStart, 10));
      setDecadeEnd(subYears(decadeEnd, 10));
    }
  }, [decadeEnd, decadeStart, view, viewValue, yearValue]);
  const nextClickHandler = useCallback(() => {
    setScrollDirection("forward");
    if (view === "days") {
      setViewValue(add(viewValue, { months: 1 }));
    } else if (view === "months") {
      setYearValue(yearValue + 1);
    } else {
      setDecadeStart(addYears(decadeStart, 10));
      setDecadeEnd(addYears(decadeEnd, 10));
    }
  }, [decadeEnd, decadeStart, view, viewValue, yearValue]);
  const headerClickHandler = useCallback(() => {
    const newView = view === "days" ? "months" : "years";
    setScrollDirection(null);
    setView(newView);
    onViewChange == null ? void 0 : onViewChange(newView);
  }, [onViewChange, view]);
  const dateChangeHandler = useCallback(
    (date2) => {
      if (!isRange) {
        onChange == null ? void 0 : onChange(date2);
        setMonthValue(getMonth(date2));
        setYearValue(getYear(date2));
      } else if (!rangeStart) {
        onChange == null ? void 0 : onChange([date2, void 0]);
      } else if (!rangeEnd) {
        const range = [rangeStart, date2];
        onChange == null ? void 0 : onChange([min(range), max(range)]);
      } else {
        onChange == null ? void 0 : onChange([date2, void 0]);
      }
    },
    [isRange, onChange, rangeEnd, rangeStart]
  );
  const monthsChangeHandler = useCallback(
    (month) => {
      setViewValue(setMonth(setYear(min$1 || /* @__PURE__ */ new Date(), yearValue), month));
      setMonthValue(month);
      setView("days");
      onViewChange == null ? void 0 : onViewChange("days");
    },
    [min$1, yearValue, onViewChange]
  );
  const yearChangeHandler = useCallback(
    (year) => {
      setViewValue(setYear(min$1 || /* @__PURE__ */ new Date(), year));
      setYearValue(year);
      setView("months");
      onViewChange == null ? void 0 : onViewChange("months");
    },
    [min$1, onViewChange]
  );
  const xAnimation = useMemo(() => {
    switch (scrollDirection) {
      case "forward":
        return "100%";
      case "back":
        return "-100%";
      default:
        return 0;
    }
  }, [scrollDirection]);
  return /* @__PURE__ */ jsxs("div", { className: twMerge(theme2.base), children: [
    /* @__PURE__ */ jsxs("header", { className: twMerge(theme2.header.base), children: [
      /* @__PURE__ */ jsx(
        Button,
        {
          variant: "text",
          disabled,
          onClick: previousClickHandler,
          className: theme2.header.prev,
          disablePadding: true,
          children: previousArrow
        }
      ),
      /* @__PURE__ */ jsx(
        Button,
        {
          disabled,
          variant: "text",
          onClick: headerClickHandler,
          className: theme2.header.mid,
          disablePadding: true,
          fullWidth: true,
          children: /* @__PURE__ */ jsxs(SmallHeading, { disableMargins: true, className: theme2.title, children: [
            view === "days" && format(viewValue, "MMMM"),
            view === "months" && /* @__PURE__ */ jsx(Fragment$1, { children: yearValue }),
            view === "years" && /* @__PURE__ */ jsxs(Fragment$1, { children: [
              decadeStart.getFullYear(),
              "-",
              decadeEnd.getFullYear()
            ] })
          ] })
        }
      ),
      /* @__PURE__ */ jsx(
        Button,
        {
          variant: "text",
          disabled,
          onClick: nextClickHandler,
          className: theme2.header.next,
          disablePadding: true,
          children: nextArrow
        }
      )
    ] }),
    /* @__PURE__ */ jsx(Divider, {}),
    /* @__PURE__ */ jsx(AnimatePresence, { initial: false, mode: "wait", children: /* @__PURE__ */ jsxs(
      motion.div,
      {
        className: twMerge(theme2.content),
        initial: { scale: 0, opacity: 0 },
        animate: { scale: 1, opacity: 1 },
        exit: { scale: 0, opacity: 1 },
        transition: {
          x: { type: animated ? "keyframes" : false },
          opacity: { duration: 0.2, type: animated ? "tween" : false },
          scale: { type: animated ? "tween" : false }
        },
        children: [
          view === "days" && /* @__PURE__ */ jsx(
            CalendarDays,
            {
              value: viewValue,
              min: min$1,
              max: max$1,
              disabled,
              isRange,
              current: isRange ? [rangeStart, rangeEnd] : value,
              showDayOfWeek,
              showToday,
              xAnimation,
              animated,
              onChange: dateChangeHandler
            }
          ),
          view === "months" && /* @__PURE__ */ jsx(
            CalendarMonths,
            {
              value: monthValue,
              animated,
              onChange: monthsChangeHandler
            }
          ),
          view === "years" && /* @__PURE__ */ jsx(
            CalendarYears,
            {
              decadeStart,
              decadeEnd,
              animated,
              value: yearValue,
              xAnimation,
              onChange: yearChangeHandler
            }
          )
        ]
      },
      view
    ) })
  ] });
};
const VARIANTS$1 = {
  open: {
    opacity: 1,
    height: "auto"
  },
  collapsed: {
    opacity: 0,
    height: 0
  }
};
const TRANSITION = {
  duration: 0.5,
  ease: [0.04, 0.62, 0.23, 0.98],
  when: "beforeChildren"
};
const Collapse = ({
  children,
  expanded,
  className,
  theme: customTheme,
  ...rest
}) => {
  const theme2 = useComponentTheme("collapse", customTheme);
  return /* @__PURE__ */ jsx(AnimatePresence, { initial: false, children: expanded && /* @__PURE__ */ createElement(
    motion.section,
    {
      ...rest,
      className: twMerge(theme2.base, className),
      key: "content",
      initial: "collapsed",
      animate: "open",
      exit: "collapsed",
      variants: VARIANTS$1,
      transition: TRANSITION
    },
    typeof children === "function" ? children() : children
  ) });
};
const baseTheme$E = {
  base: "will-change-[height,opacity] overflow-hidden"
};
const collapseTheme = {
  ...baseTheme$E
};
const legacyCollapseTheme = {
  ...baseTheme$E
};
const groupVariants = {
  initial: {
    transition: {
      staggerChildren: 0.05,
      staggerDirection: -1
    }
  },
  animate: {
    transition: {
      staggerChildren: 0.07,
      delayChildren: 0.2
    }
  }
};
const MotionGroup = ({ children, ...rest }) => /* @__PURE__ */ jsx(
  motion.div,
  {
    variants: groupVariants,
    initial: "initial",
    animate: "animate",
    ...rest,
    children
  }
);
const verticalVariant = {
  initial: {
    y: -20,
    opacity: 0,
    transition: {
      when: "beforeChildren"
    }
  },
  animate: {
    y: 0,
    opacity: 1,
    transition: {
      when: "beforeChildren"
    }
  },
  exit: {
    y: -20,
    opacity: 0
  }
};
const horizontalVariants = {
  initial: {
    x: "-100%",
    opacity: 0,
    transition: {
      when: "beforeChildren",
      x: { stiffness: 10 }
    }
  },
  animate: {
    x: "0%",
    opacity: 1,
    transition: {
      x: { stiffness: 10, velocity: -100 },
      when: "beforeChildren",
      opacity: { duration: 1 }
    }
  },
  exit: {
    x: "-100%",
    opacity: 0,
    transition: {
      x: { stiffness: 10 }
    }
  }
};
const MotionItem = ({
  children,
  direction = "vertical",
  ...rest
}) => /* @__PURE__ */ jsx(
  motion.div,
  {
    variants: direction === "vertical" ? verticalVariant : horizontalVariants,
    ...rest,
    children
  }
);
const List = forwardRef(({ className, children, theme: customTheme, ...rest }, ref) => {
  const theme2 = useComponentTheme("list", customTheme);
  return /* @__PURE__ */ jsx(
    "div",
    {
      ...rest,
      ref,
      role: "list",
      className: twMerge(theme2.base, className),
      children
    }
  );
});
const ListItem = forwardRef(
  ({
    className,
    contentClassName,
    children,
    active,
    disabled,
    disablePadding,
    disableGutters,
    start,
    end,
    dense,
    onClick,
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("list", customTheme);
    return /* @__PURE__ */ jsxs(
      "div",
      {
        ...rest,
        ref,
        role: onClick ? "button" : "listitem",
        tabIndex: onClick ? 0 : void 0,
        onClick: (e) => !disabled && (onClick == null ? void 0 : onClick(e)),
        className: cn(
          theme2.listItem.base,
          dense && theme2.listItem.dense.base,
          disabled && theme2.listItem.disabled,
          active && theme2.listItem.active,
          onClick && !disabled && theme2.listItem.clickable,
          disablePadding && theme2.listItem.disablePadding,
          disableGutters && theme2.listItem.disableGutters,
          className
        ),
        children: [
          start && /* @__PURE__ */ jsx(
            "div",
            {
              className: cn(
                theme2.listItem.adornment.base,
                theme2.listItem.adornment.start,
                { [theme2.listItem.dense.startAdornment]: dense }
              ),
              children: start
            }
          ),
          /* @__PURE__ */ jsx(
            "div",
            {
              className: cn(
                theme2.listItem.content,
                {
                  [theme2.listItem.dense.content]: dense
                },
                contentClassName
              ),
              children
            }
          ),
          end && /* @__PURE__ */ jsx(
            "div",
            {
              className: cn(
                theme2.listItem.adornment.base,
                theme2.listItem.adornment.end,
                { [theme2.listItem.dense.endAdornment]: dense }
              ),
              children: end
            }
          )
        ]
      }
    );
  }
);
const ListHeader = ({
  className,
  children,
  theme: customTheme,
  ...rest
}) => {
  const theme2 = useComponentTheme("list", customTheme);
  return /* @__PURE__ */ jsx(Sub, { ...rest, className: twMerge(className, theme2.header), children });
};
const baseTheme$D = {
  base: "flex flex-col",
  header: "pl-2 pr-2",
  listItem: {
    base: "items-center flex p-2.5 relative rounded-none",
    disabled: "cursor-not-allowed pointer-events-none",
    active: "",
    clickable: "cursor-pointer transition-color duration-300 ease-linear transition-bg duration-300 ease-linear hover:color-inherit hover:bg-transparent",
    disablePadding: "p-0",
    disableGutters: "pl-0 pr-0",
    dense: {
      base: "p-1",
      content: "",
      startAdornment: "pr-[calc(5/2)]",
      endAdornment: "pl-[calc(5/2)]"
    },
    adornment: {
      base: "items-center flex",
      start: "pr-1",
      end: "pl-1",
      svg: "fill-current"
    },
    content: "overflow-wrap break-word word-wrap break-all flex-1"
  }
};
const listTheme = {
  ...baseTheme$D,
  base: [baseTheme$D.base, "text-text-primary"].join(" "),
  header: [baseTheme$D.header, "text-text-primary"].join(" "),
  listItem: {
    ...baseTheme$D.listItem,
    base: [
      baseTheme$D.listItem.base,
      "hover:bg-panel-accent hover:text-mystic light:hover:bg-vulcan/5 light:hover:text-text-secondary [&:has(h3)]:hover:bg-transparent"
    ].join(" "),
    active: [
      baseTheme$D.listItem.active,
      "text-primary-active hover:text-mystic"
    ].join(" "),
    disabled: [
      baseTheme$D.listItem.disabled,
      "opacity-40 text-text-secondary"
    ].join(" ")
  }
};
const legacyListTheme = {
  ...baseTheme$D,
  base: [baseTheme$D.base, "text-[var(--list-item-color)]"].join(" "),
  header: [
    baseTheme$D.header,
    "pl-[var(--spacing-md)] pr-[var(--spacing-md)]"
  ].join(" "),
  listItem: {
    ...baseTheme$D.listItem,
    base: [
      baseTheme$D.listItem.base,
      "p-[var(--list-item-spacing)] text-[var(--list-item-color)] rounded-[var(--list-item-border-radius)]"
    ].join(" "),
    clickable: [
      baseTheme$D.listItem.clickable,
      "hover:text-[var(--list-item-color-active)] hover:bg-[var(--list-item-background-active)]"
    ].join(" "),
    dense: {
      ...baseTheme$D.listItem.dense,
      base: [
        baseTheme$D.listItem.dense.base,
        "[padding:_var(--list-item-dense-spacing)]"
      ].join(" "),
      startAdornment: [
        baseTheme$D.listItem.dense.startAdornment,
        "[padding-right:_calc(var(--spacing-md)_/_2)]"
      ].join(" "),
      endAdornment: [
        baseTheme$D.listItem.dense.endAdornment,
        "[padding-left:_calc(var(--spacing-md)_/_2)]"
      ].join(" ")
    },
    adornment: {
      ...baseTheme$D.listItem.adornment,
      start: [
        baseTheme$D.listItem.adornment.start,
        "[padding-right:_calc(var(--spacing-sm)_/_2)]"
      ].join(" "),
      end: [
        baseTheme$D.listItem.adornment.start,
        "[padding-left:_calc(var(--spacing-sm)_/_2)]"
      ].join(" "),
      svg: [
        baseTheme$D.listItem.adornment.svg,
        "fill:[var(--list-item-adornment-fill)]"
      ].join(" ")
    }
  }
};
const Block = ({
  label,
  children,
  disableMargin,
  labelClassName,
  className,
  required,
  direction = "vertical",
  alignment = "start",
  onTitleClick,
  theme: customTheme,
  ...rest
}) => {
  const theme2 = useComponentTheme("block", customTheme);
  return /* @__PURE__ */ jsxs(
    "section",
    {
      ...rest,
      className: twMerge(
        theme2.base,
        disableMargin && theme2.disableMargin,
        direction === "horizontal" && theme2.horizontal.base,
        direction === "vertical" && theme2.vertical.base,
        alignment === "end" && theme2.endAlign,
        alignment === "center" && theme2.centerAlign,
        className
      ),
      children: [
        label && /* @__PURE__ */ jsxs(
          "label",
          {
            className: twMerge(
              theme2.label,
              direction === "horizontal" && theme2.horizontal.label,
              direction === "vertical" && theme2.vertical.label,
              labelClassName
            ),
            onClick: onTitleClick,
            children: [
              label,
              `${required ? " *" : ""}`
            ]
          }
        ),
        children
      ]
    }
  );
};
const baseTheme$C = {
  base: "mb-2.5",
  disableMargin: "mb-0",
  label: "text-sm",
  centerAlign: "items-center",
  endAlign: "items-end",
  horizontal: {
    base: "flex flex-row items-baseline",
    label: "mr-0.5 whitespace-nowrap"
  },
  vertical: {
    base: "block",
    label: "block mb-0.5"
  }
};
const blockTheme = {
  ...baseTheme$C
};
const legacyBlockTheme = {
  ...baseTheme$C,
  base: "mb-[var(--block-spacing)]",
  label: [
    baseTheme$C.label,
    "[font-size:_var(--block-label-size)] [font-weight:_var(--block-label-weight)]"
  ].join(" "),
  horizontal: {
    ...baseTheme$C.horizontal,
    label: [baseTheme$C.horizontal.label, "mr-[var(--block-label-spacing)]"].join(
      " "
    )
  },
  vertical: {
    ...baseTheme$C.vertical,
    label: [baseTheme$C.vertical.label, "mb-[var(--block-label-spacing)]"].join(
      " "
    )
  }
};
const baseTheme$B = {
  base: "relative flex flex-col p-7 rounded-sm",
  disablePadding: "p-0",
  header: "flex items-center",
  headerText: "text-sm font-medium mt-0 mb-1",
  content: "flex-1"
};
const cardTheme = {
  ...baseTheme$B,
  base: [
    baseTheme$B.base,
    "bg-panel border border-panel-accent text-text-primary"
  ].join(" ")
};
const legacyCardTheme = {
  ...baseTheme$B,
  base: [
    baseTheme$B.base,
    "[padding:_var(--card-spacing)] bg-[var(--card-background)] text-[var(--card-color)] [border:_var(--card-border)] rounded-[var(--card-border-radius)]"
  ].join(" "),
  headerText: [baseTheme$B.headerText, "mb-[var(--spacing-md)]"].join(" ")
};
const Card = forwardRef(
  ({
    children,
    disablePadding,
    className,
    header,
    headerClassName,
    contentClassName,
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("card", customTheme);
    return /* @__PURE__ */ jsxs(
      "section",
      {
        ...rest,
        ref,
        className: twMerge(
          theme2.base,
          disablePadding && theme2.disablePadding,
          className
        ),
        children: [
          header && /* @__PURE__ */ jsx("header", { className: twMerge(theme2.header, headerClassName), children: header && typeof header === "string" ? /* @__PURE__ */ jsx("h3", { className: theme2.headerText, children: header }) : header }),
          /* @__PURE__ */ jsx("div", { className: twMerge(theme2.content, contentClassName), children })
        ]
      }
    );
  }
);
const Stack = forwardRef(
  ({
    children,
    className,
    direction = "row",
    dense = false,
    inline = false,
    alignItems = "center",
    justifyContent = "start",
    theme: customTheme,
    ...otherProps
  }, ref) => {
    const theme2 = useComponentTheme("stack", customTheme);
    return /* @__PURE__ */ jsx(
      "div",
      {
        className: twMerge(
          theme2.base,
          dense && theme2.dense,
          inline && theme2.inline,
          theme2.direction[direction],
          theme2.alignItems[alignItems],
          theme2.justifyContent[justifyContent],
          className
        ),
        ref,
        ...otherProps,
        children
      }
    );
  }
);
const baseTheme$A = {
  base: "flex items-center gap-2.5",
  dense: "gap-1",
  inline: "inline-flex",
  direction: {
    row: "flex-row",
    column: "flex-col",
    rowReverse: "flex-row-reverse",
    columnReverse: "flex-col-reverse"
  },
  alignItems: {
    start: "items-start",
    end: "items-end",
    center: "items-center",
    stretch: "items-stretch"
  },
  justifyContent: {
    start: "justify-start",
    end: "justify-end",
    center: "justify-center",
    spaceBetween: "justify-between"
  }
};
const stackTheme = {
  ...baseTheme$A,
  base: [baseTheme$A.base, "text-text-primary"].join(" ")
};
const legacyStackTheme = {
  ...baseTheme$A,
  base: [baseTheme$A.base, "gap-[var(--stack-gap)]"].join(" "),
  dense: [baseTheme$A.dense, "gap-[var(--stack-dense-gap)]"].join(" ")
};
const Arrow = ({
  direction = "down",
  className,
  theme: customTheme
}) => {
  const theme2 = useComponentTheme("arrow", customTheme);
  return /* @__PURE__ */ jsx(
    "svg",
    {
      className: twMerge(theme2.base, theme2[direction], className),
      xmlns: "http://www.w3.org/2000/svg",
      x: "0px",
      y: "0px",
      width: "50",
      height: "50",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      children: /* @__PURE__ */ jsx("path", { d: "M 4.21875 10.78125 L 2.78125 12.21875 L 15.28125 24.71875 L 16 25.40625 L 16.71875 24.71875 L 29.21875 12.21875 L 27.78125 10.78125 L 16 22.5625 Z" })
    }
  );
};
const baseTheme$z = {
  base: "",
  up: "rotate-180",
  down: "",
  left: "rotate-90",
  right: "-rotate-90"
};
const arrowTheme = {
  ...baseTheme$z,
  base: [baseTheme$z.base, "text-text-primary"].join(" ")
};
const legacyArrowTheme = {
  ...baseTheme$z,
  base: [baseTheme$z.base].join(" ")
};
const TreeContext = createContext({
  collapsedIcon: null,
  expandedIcon: null
});
const Tree = ({
  children,
  className,
  expandedIcon,
  collapsedIcon,
  theme: customTheme,
  ...rest
}) => {
  const theme2 = useComponentTheme("tree", customTheme);
  expandedIcon = expandedIcon ?? /* @__PURE__ */ jsx(Arrow, { direction: "down", className: theme2.arrow });
  collapsedIcon = collapsedIcon ?? /* @__PURE__ */ jsx(Arrow, { direction: "right", className: theme2.arrow });
  const values = useMemo(
    () => ({
      expandedIcon,
      collapsedIcon
    }),
    [collapsedIcon, expandedIcon]
  );
  return /* @__PURE__ */ jsx(TreeContext.Provider, { value: values, children: /* @__PURE__ */ jsx("div", { className: twMerge(theme2.tree, className), ...rest, children: /* @__PURE__ */ jsx("ul", { className: theme2.base, children }) }) });
};
const TreeNode = ({
  children,
  className,
  label,
  disabled,
  expanded: expandedProp,
  onExpand,
  onCollapse,
  theme: customTheme
}) => {
  const { expandedIcon, collapsedIcon } = useContext(TreeContext);
  const [expanded, setExpanded] = useState(expandedProp);
  const hasChildren = children && Children.toArray(children).length > 0;
  useEffect(() => {
    setExpanded(expandedProp);
  }, [expandedProp]);
  const onButtonClick = useCallback(() => {
    const newState = !expanded;
    setExpanded(newState);
    if (newState) {
      onExpand == null ? void 0 : onExpand();
    } else {
      onCollapse == null ? void 0 : onCollapse();
    }
  }, [expanded, onCollapse, onExpand]);
  const theme2 = useComponentTheme("tree", customTheme);
  return /* @__PURE__ */ jsxs("li", { className: twMerge(theme2.node.base, className), children: [
    /* @__PURE__ */ jsxs("div", { className: theme2.nodeBlock, children: [
      hasChildren && /* @__PURE__ */ jsx(
        Button,
        {
          size: "small",
          disabled,
          variant: "text",
          title: expanded ? "Collapse" : "Expand",
          className: twMerge(
            theme2.node.button.base,
            disabled && theme2.node.disabled
          ),
          onClick: onButtonClick,
          children: expanded ? expandedIcon : collapsedIcon
        }
      ),
      /* @__PURE__ */ jsx(
        "span",
        {
          className: twMerge(
            theme2.node.label,
            !hasChildren && theme2.node.leaf,
            disabled && theme2.node.disabled
          ),
          children: label
        }
      )
    ] }),
    hasChildren && /* @__PURE__ */ jsx(Collapse, { expanded, children: () => /* @__PURE__ */ jsx("ul", { className: theme2.subtree, children }) })
  ] });
};
const baseTheme$y = {
  base: "relative m-0 p-0 list-none",
  tree: "border pt-1 pb-1 px-3 border-solid border-transparent",
  arrow: "w-3 h-3",
  node: {
    base: "pt-0.5 m-0 list-style-none first:pt-0 last:pb-0",
    collapsed: "-rotate-90",
    disabled: "opacity-60",
    leaf: "pl-4",
    label: "",
    button: {
      base: "min-w-[auto] min-h-[auto] w-auto h-auto transition-transform duration-100 ease-in-out ml-0 mr-1 my-0 p-0",
      icon: "align-middle block h-2 w-2 m-0.5"
    }
  },
  nodeBlock: "flex items-center",
  subtree: "relative ml-5 mr-0 mt-1 mb-0 p-0"
};
const treeTheme = {
  ...baseTheme$y,
  arrow: [baseTheme$y.arrow, "fill-text-primary"].join(" "),
  node: {
    ...baseTheme$y.node,
    base: [baseTheme$y.node.base, "text-text-primary"].join(" "),
    button: {
      ...baseTheme$y.node.button,
      icon: [baseTheme$y.node.button.icon, "fill-text-primary"].join(" ")
    }
  }
};
const legacyTreeTheme = {
  ...baseTheme$y,
  node: {
    ...baseTheme$y.node,
    button: {
      ...baseTheme$y.node.button,
      icon: [baseTheme$y.node.button.icon, "fill-[var(--white)]"].join(" ")
    }
  }
};
function isObject(item) {
  return item !== null && typeof item === "object" && item.constructor === Object;
}
function cloneDeep(source) {
  if (!isObject(source)) {
    return source;
  }
  const output = {};
  for (const key in source) {
    output[key] = cloneDeep(source[key]);
  }
  return output;
}
function mergeDeep(target, source) {
  if (isObject(source) && Object.keys(source).length === 0) {
    return cloneDeep({ ...target, ...source });
  }
  const output = { ...target, ...source };
  if (isObject(source) && isObject(target)) {
    for (const key in source) {
      if (isObject(source[key]) && key in target && isObject(target[key])) {
        output[key] = mergeDeep(
          target[key],
          source[key]
        );
      } else {
        output[key] = isObject(source[key]) ? cloneDeep(source[key]) : source[key];
      }
    }
  }
  return output;
}
function cn(...args) {
  return twMerge(classNames(args));
}
const ThemeContext = createContext(null);
const ThemeProvider = ({ children, theme: theme$1 }) => {
  const [activeTheme, setActiveTheme] = useState(theme$1);
  useEffect(() => {
    if (theme$1) {
      setActiveTheme(mergeDeep(theme, theme$1));
    }
  }, [theme$1]);
  const updateTheme = (newTheme) => {
    setActiveTheme({ ...activeTheme, ...newTheme });
  };
  return /* @__PURE__ */ jsx(ThemeContext.Provider, { value: { theme: activeTheme, updateTheme }, children });
};
const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    return null;
  }
  return context;
};
const useComponentTheme = (component, customTheme) => {
  const context = useTheme();
  if (customTheme) {
    return customTheme;
  }
  if (!context) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  const componentTheme = context.theme.components[component];
  if (!componentTheme) {
    throw new Error(`Component ${component} does not exist in theme`);
  }
  return componentTheme;
};
const Ellipsis = ({
  value,
  className,
  title,
  removeLinebreaks = true,
  expandable = true,
  limit = 256,
  lines,
  moreText = "...",
  lessText = "Show less",
  theme: customTheme
}) => {
  const [expanded, setExpanded] = useState(false);
  const [isTruncated, setIsTruncated] = useState(false);
  const [isMeasured, setIsMeasured] = useState(false);
  const [truncatedText, setTruncatedText] = useState(value);
  const contentRef = useRef(null);
  const theme2 = useComponentTheme("ellipsis", customTheme);
  const substr = useMemo(() => {
    const formatted = removeLinebreaks ? value.replace(/(\r\n|\n|\r)/gm, " ") : value;
    return ellipsize(formatted, limit, { ellipse: expandable ? "" : "..." });
  }, [expandable, limit, value, removeLinebreaks]);
  const measureText = useCallback(() => {
    if (lines === void 0) {
      if (substr.length !== value.length) {
        setTruncatedText(substr);
        setIsTruncated(true);
      }
      setIsMeasured(true);
      return;
    }
    if (!contentRef.current) {
      return;
    }
    const content = contentRef.current;
    const lineHeight = parseInt(window.getComputedStyle(content).lineHeight);
    const maxHeight = lines ? lineHeight * lines : content.clientHeight;
    content.style.maxHeight = `${maxHeight}px`;
    content.style.overflow = "hidden";
    let truncated = value;
    content.textContent = truncated + moreText;
    if (content.scrollHeight > maxHeight) {
      setIsTruncated(true);
      while (content.scrollHeight > maxHeight && truncated.length > 0) {
        truncated = truncated.slice(0, -1).trim();
        content.textContent = truncated + moreText;
      }
      setTruncatedText(truncated);
    } else {
      setIsTruncated(false);
      setTruncatedText(value);
    }
    content.style.maxHeight = "";
    content.style.overflow = "";
    setIsMeasured(true);
  }, [lines, value, moreText, substr]);
  useEffect(() => {
    measureText();
    if (lines !== void 0 && typeof window !== "undefined") {
      window.addEventListener("resize", measureText);
      return () => window.removeEventListener("resize", measureText);
    }
  }, [measureText, lines]);
  const toggleExpand = (event) => {
    event.stopPropagation();
    setExpanded(!expanded);
  };
  return /* @__PURE__ */ jsxs("div", { className, children: [
    !isMeasured && lines !== void 0 && /* @__PURE__ */ jsx("div", { ref: contentRef, className: "invisible", children: value }),
    isMeasured && /* @__PURE__ */ jsxs(Fragment$1, { children: [
      /* @__PURE__ */ jsx("span", { title: title !== false ? title || value : void 0, children: expanded ? value : truncatedText }),
      expandable && isTruncated && /* @__PURE__ */ jsxs(Fragment$1, { children: [
        expanded ? " " : "",
        /* @__PURE__ */ jsx(
          "button",
          {
            type: "button",
            title: expanded ? "Click to show less" : "Click to view rest of content",
            className: theme2.dots,
            onClick: toggleExpand,
            children: expanded ? lessText : moreText
          }
        )
      ] })
    ] })
  ] });
};
const baseTheme$x = {
  dots: "cursor-pointer opacity-50 text-[unset] p-0 border-[none] outline-none"
};
const ellipsisTheme = {
  ...baseTheme$x
};
const legacyEllipsisTheme = {
  ...baseTheme$x
};
const useInfinityList = ({
  items,
  threshold = 3,
  size: size2 = 10,
  nextSize
}) => {
  const [index, setIndex] = useState(0);
  const data = useMemo(() => [...items].slice(0, index), [index, items]);
  const hasMore = index < items.length;
  const remaining = items.length - index;
  const showNext = useCallback(
    (amount) => {
      if (hasMore) {
        const nextAmount = nextSize === Infinity ? remaining : nextSize || amount || size2;
        const newIndex = Math.min(items.length, index + nextAmount);
        setIndex(newIndex);
      }
    },
    [hasMore, index, size2, items, remaining, nextSize]
  );
  useEffect(() => {
    const len = (items == null ? void 0 : items.length) || 0;
    const endIdx = len <= size2 + threshold ? size2 + threshold : Math.min(len, size2);
    setIndex(endIdx);
  }, [items.length, size2, threshold]);
  return {
    data,
    hasMore,
    remaining,
    showNext
  };
};
const InfinityList = ({
  children,
  size: size2 = 10,
  threshold = 3,
  nextSize,
  buttonClassName
}) => {
  const arr = Children.toArray(children);
  const { data, hasMore, remaining, showNext } = useInfinityList({
    items: arr,
    size: size2,
    threshold,
    nextSize
  });
  return /* @__PURE__ */ jsxs(Fragment$1, { children: [
    data.map((child, i) => /* @__PURE__ */ jsx(Fragment, { children: child }, i)),
    hasMore && /* @__PURE__ */ jsxs(
      "button",
      {
        className: buttonClassName,
        onClick: (event) => {
          event.stopPropagation();
          showNext();
        },
        children: [
          "Show ",
          Math.min(size2, remaining),
          " more"
        ]
      }
    )
  ] });
};
const JsonTreeNode = ({
  depth,
  data,
  expandDepth,
  className,
  showCount,
  showEmpty,
  showAll,
  showAllLimit,
  ellipsisText,
  ellipsisTextLength,
  theme: customTheme
}) => {
  const theme2 = useComponentTheme("jsonTree", customTheme);
  const type = data.type;
  const isList = type === "array" || type === "object";
  const {
    data: listData,
    hasMore,
    showNext
  } = useInfinityList({
    items: isList ? data.data : [],
    size: showAll ? Infinity : showAllLimit,
    threshold: 3,
    nextSize: Infinity
  });
  const renderExpandableNode = useCallback(() => {
    const label = type === "array" ? "items" : "keys";
    const symbol = type === "array" ? "[]" : "{}";
    return /* @__PURE__ */ jsxs(Fragment$1, { children: [
      /* @__PURE__ */ jsx("span", { className: twMerge(theme2.node.label), children: data.label }),
      /* @__PURE__ */ jsx("span", { className: twMerge(theme2.node.symbol), children: symbol }),
      showCount && /* @__PURE__ */ jsx("span", { className: twMerge(theme2.node.count), children: `(${data.data.length.toLocaleString()} ${label})` })
    ] });
  }, [data, theme2, type, showCount]);
  const renderPrimativeNode = useCallback(() => {
    var _a;
    const ellipsis = type === "string" && ellipsisText;
    const showDelimeter = data.label !== null && data.label !== void 0;
    const isEmpty = data.data === null || data.data === void 0;
    const isEmptyString = data.data === "";
    let valueLabel = (_a = data.data) == null ? void 0 : _a.toString();
    if (showEmpty) {
      if (isEmptyString) {
        valueLabel = '""';
      } else if (isEmpty) {
        valueLabel = "null";
      }
    }
    if (!showEmpty && (isEmpty || isEmptyString)) {
      return null;
    }
    return /* @__PURE__ */ jsxs(Fragment$1, { children: [
      /* @__PURE__ */ jsx("span", { className: twMerge(theme2.node.label), children: data.label }),
      showDelimeter && /* @__PURE__ */ jsx("span", { className: twMerge(theme2.node.delimiter), children: ":" }),
      /* @__PURE__ */ jsx("span", { className: twMerge(theme2.node.value), children: ellipsis && !isEmptyString ? /* @__PURE__ */ jsx(
        Ellipsis,
        {
          value: data.data,
          limit: ellipsisTextLength,
          className: "inline"
        }
      ) : valueLabel })
    ] });
  }, [data, showEmpty, ellipsisText, ellipsisTextLength, theme2, type]);
  const isNestedData = useMemo(
    () => data.type === "array" || data.type === "object",
    [data.type]
  );
  const isNestedDataEmpty = useMemo(() => {
    if (isNestedData) {
      return data.type === "array" ? data.data.length === 0 : Object.keys(data.data).length === 0;
    }
    return false;
  }, [data.data, data.type, isNestedData]);
  if (!showEmpty && isNestedDataEmpty) {
    return null;
  }
  return /* @__PURE__ */ jsxs(
    TreeNode,
    {
      className,
      expanded: depth < expandDepth,
      label: /* @__PURE__ */ jsx(Fragment$1, { children: type === "array" || type === "object" ? renderExpandableNode() : renderPrimativeNode() }),
      children: [
        isNestedData && !isNestedDataEmpty && /* @__PURE__ */ jsx(Fragment$1, { children: listData.map((item) => /* @__PURE__ */ jsx(
          JsonTreeNode,
          {
            data: item,
            depth: depth + 1,
            expandDepth,
            type: item.type,
            ellipsisText,
            ellipsisTextLength,
            showCount,
            showEmpty,
            showAll,
            showAllLimit
          },
          item.id
        )) }),
        isList && hasMore && /* @__PURE__ */ jsx("span", { className: twMerge(theme2.pager), onClick: () => showNext(), children: "Show all" })
      ]
    }
  );
};
function getDataType(data) {
  if (data === null || data === void 0) {
    return "nil";
  }
  if (data instanceof Date) {
    return "date";
  }
  if (Array.isArray(data)) {
    return "array";
  }
  if (data != null && data.constructor.name === "Object") {
    return "object";
  }
  if (typeof data === "string") {
    return "string";
  }
  if (typeof data === "number") {
    return "number";
  }
  if (typeof data === "boolean") {
    return "boolean";
  }
  return "unknown";
}
function parseJsonTree({
  id: id2 = "root",
  data,
  index,
  label,
  showEmpty = true
}) {
  const type = getDataType(data);
  if (type === "object") {
    const keys2 = Object.keys(data);
    const result = keys2.reduce((parsedItems, key, idx) => {
      const value = data[key];
      const childParsed = parseJsonTree({
        data: value,
        id: `${id2}.${key}`,
        index: idx,
        label: key,
        showEmpty
      });
      if (showEmpty || !showEmpty && childParsed !== null) {
        parsedItems.push(childParsed);
      }
      return parsedItems;
    }, []);
    let labelValue = index !== void 0 ? `${index}` : "root";
    if (label !== void 0) {
      labelValue = label;
    }
    return {
      type,
      id: id2,
      data: result,
      label: labelValue,
      index
    };
  } else if (type === "array") {
    const result = data.map(
      (item, idx) => parseJsonTree({
        data: item,
        id: `${id2}[${idx}]`,
        index: idx,
        showEmpty
      })
    );
    return {
      type,
      id: id2,
      data: result,
      label,
      index
    };
  } else {
    return {
      type,
      id: id2,
      data,
      label,
      index
    };
  }
}
const JsonTree = ({
  data,
  className,
  expandDepth = 2,
  showEmpty = true,
  showCount = true,
  showAll = false,
  showAllLimit = 10,
  ellipsisText = true,
  ellipsisTextLength = 150,
  root = true,
  ...rest
}) => {
  var _a;
  const tree = parseJsonTree({ data, showEmpty });
  return /* @__PURE__ */ jsx("div", { tabIndex: -1, children: /* @__PURE__ */ jsxs(Tree, { className, ...rest, children: [
    root && /* @__PURE__ */ jsx(
      JsonTreeNode,
      {
        depth: 1,
        data: tree,
        showEmpty,
        showCount,
        expandDepth,
        ellipsisText,
        ellipsisTextLength,
        showAll,
        showAllLimit
      },
      `node-${tree.id}`
    ),
    !root && ((_a = tree == null ? void 0 : tree.data) == null ? void 0 : _a.map((item) => /* @__PURE__ */ jsx(
      JsonTreeNode,
      {
        depth: 1,
        data: item,
        showEmpty,
        showCount,
        expandDepth,
        ellipsisText,
        ellipsisTextLength,
        showAll,
        showAllLimit
      },
      `node-${item.id}`
    )))
  ] }) });
};
const jsonTreeTheme = {
  node: {
    label: "font-mono text-anakiwa light:text-blue-500",
    delimiter: "pr-1",
    symbol: "px-1 opacity-50 font-mono",
    value: "",
    count: "opacity-50"
  },
  pager: "opacity-50 cursor-pointer pl-4"
};
const legacyJsonTreeTheme = {
  ...jsonTreeTheme
};
const VerticalSpacer = forwardRef(
  ({ space = "md", className, theme: customTheme, ...rest }, ref) => {
    const theme2 = useComponentTheme(
      "verticalSpacer",
      customTheme
    );
    return /* @__PURE__ */ jsx(
      "div",
      {
        className: twMerge(className, theme2.base, theme2.size[space]),
        ref,
        ...rest
      }
    );
  }
);
const baseTheme$w = {
  base: "",
  size: {
    xs: "h-0.5",
    sm: "h-1.5",
    md: "h-2.5",
    lg: "h-5",
    xl: "h-6",
    xxl: "h-8"
  }
};
const verticalSpacerTheme = {
  ...baseTheme$w
};
const legacyVerticalSpacerTheme = {
  ...baseTheme$w,
  size: {
    xs: "h-[var(--spacing-xs)]",
    sm: "h-[var(--spacing-sm)]",
    md: "h-[var(--spacing-md)]",
    lg: "h-[var(--spacing-lg)]",
    xl: "h-[var(--spacing-xl)]",
    xxl: "h-[var(--spacing-xxl)]"
  }
};
const TabPanel = ({
  children,
  className,
  theme: customTheme
}) => {
  const theme2 = useComponentTheme("tabs", customTheme);
  return /* @__PURE__ */ jsx("section", { role: "tabpanel", className: twMerge(theme2.panel, className), children });
};
const Tab = ({
  children,
  id: id2,
  selected,
  containerClassName,
  className,
  disabled,
  onSelect,
  size: size2 = "medium",
  theme: customTheme
}) => {
  var _a, _b, _c, _d;
  const theme2 = useComponentTheme("tabs", customTheme);
  return /* @__PURE__ */ jsxs("span", { className: cn(theme2.list.tab.base, containerClassName), children: [
    /* @__PURE__ */ jsx(
      Button,
      {
        className: cn(
          theme2.list.tab.button,
          className,
          {
            [theme2.list.tab.disabled]: disabled,
            [theme2.list.tab.selected]: selected
          },
          (_a = theme2.list.tab.size) == null ? void 0 : _a[size2]
        ),
        disabled,
        role: "tab",
        variant: "text",
        "aria-selected": selected ? "true" : "false",
        "aria-disabled": disabled ? "true" : "false",
        onClick: () => {
          if (!disabled && onSelect) {
            onSelect();
          }
        },
        children
      }
    ),
    selected && /* @__PURE__ */ jsx(
      motion.div,
      {
        className: cn(
          (_b = theme2.list.indicator) == null ? void 0 : _b.base,
          (_d = (_c = theme2.list.indicator) == null ? void 0 : _c.size) == null ? void 0 : _d[size2]
        ),
        layoutId: `${id2}-tabs-underline`
      }
    )
  ] });
};
const TabList = ({
  id: id2,
  children,
  direction,
  className,
  selectedIndex,
  onSelect,
  variant = "primary",
  size: size2 = "medium",
  theme: customTheme
}) => {
  const theme2 = useComponentTheme("tabs", customTheme);
  const childs = Children.toArray(children).filter((child) => {
    var _a;
    return ((_a = child.type) == null ? void 0 : _a.name) === Tab.name;
  }).map((child) => child.props);
  return /* @__PURE__ */ jsxs(
    "nav",
    {
      role: "tablist",
      className: twMerge(
        classNames(className, theme2.list.base, {
          "justify-end": direction === "rtl"
        })
      ),
      children: [
        childs.map(({ children: children2, ...rest }, index) => /* @__PURE__ */ jsx(
          Tab,
          {
            ...rest,
            id: id2,
            selected: index === selectedIndex,
            onSelect: () => onSelect(index),
            size: size2,
            children: children2
          },
          index
        )),
        /* @__PURE__ */ jsx(
          "hr",
          {
            className: cn(theme2.list.divider, theme2.list.variant[variant].divider)
          }
        )
      ]
    }
  );
};
const Tabs = ({
  children,
  className,
  style,
  variant = "primary",
  size: size2 = "medium",
  direction = "ltr",
  defaultIndex = 0,
  selectedIndex,
  onSelect,
  theme: customTheme
}) => {
  const id2 = useId();
  const theme2 = useComponentTheme("tabs", customTheme);
  const [internalActive, setInternalActive] = useState(
    selectedIndex || defaultIndex
  );
  useEffect(() => {
    if (selectedIndex !== void 0) {
      setInternalActive(selectedIndex);
    }
  }, [selectedIndex]);
  const [tabList, panels] = useMemo(() => {
    const childs = Children.toArray(children);
    const [tabList2] = childs.filter((child) => {
      var _a;
      return ((_a = child.type) == null ? void 0 : _a.name) === TabList.name;
    }).map((child) => child.props);
    const panels2 = childs.filter((child) => {
      var _a;
      return ((_a = child.type) == null ? void 0 : _a.name) === TabPanel.name;
    }).map((child) => child.props);
    return [tabList2, panels2];
  }, [children]);
  return /* @__PURE__ */ jsxs("div", { className: twMerge(theme2.base, className), style, children: [
    /* @__PURE__ */ jsx(
      TabList,
      {
        ...tabList,
        variant,
        size: size2,
        direction,
        id: id2,
        selectedIndex: internalActive,
        onSelect: (idx) => {
          setInternalActive(idx);
          onSelect == null ? void 0 : onSelect(idx);
        }
      }
    ),
    /* @__PURE__ */ jsx(AnimatePresence, { children: panels.map(({ children: children2, ...rest }, index) => /* @__PURE__ */ jsx(Fragment, { children: internalActive === index && /* @__PURE__ */ jsx(TabPanel, { ...rest, children: children2 }) }, index)) })
  ] });
};
const baseTheme$v = {
  base: "flex flex-col",
  list: {
    base: "flex text-center flex-wrap -mb-px",
    indicator: {
      base: "bg-primary absolute bottom-0 left-0 right-0",
      size: {
        small: "h-0.5",
        medium: "h-0.5",
        large: "h-1"
      }
    },
    divider: "w-full h-px border-0",
    variant: {
      primary: {
        divider: "bg-surface"
      },
      secondary: {
        divider: "bg-gradient-to-r from-transparent to-transparent via-primary"
      }
    },
    tab: {
      base: "relative",
      button: "transition-colors text-text-secondary font-bold hover:text-primary-hover",
      selected: "text-text-primary",
      disabled: "cursor-not-allowed opacity-40",
      size: {
        small: "pb-1 text-sm",
        medium: "pb-2 text-lg",
        large: "pb-4 text-xl"
      }
    }
  },
  panel: "mt-2"
};
const tabsTheme = baseTheme$v;
const legacyTabsTheme = baseTheme$v;
const Breadcrumbs = ({
  theme: customTheme,
  className,
  ...rest
}) => {
  const theme2 = useComponentTheme("breadcrumbs", customTheme);
  return /* @__PURE__ */ jsx(
    "nav",
    {
      className: cn(theme2.base, className),
      "aria-label": (rest == null ? void 0 : rest["aria-label"]) ?? "breadcrumbs",
      ...rest
    }
  );
};
const breadcrumbsTheme = {
  base: "",
  separator: "[&>svg]:size-3.5",
  list: "flex gap-2 items-center",
  link: "hover:text-text-primary text-text-secondary transition-colors",
  activePage: "text-primary pointer-events-none"
};
const legacyBreadcrumbTheme = breadcrumbsTheme;
const BreadcrumbItem = ({
  className,
  ...rest
}) => /* @__PURE__ */ jsx("li", { className: cn("flex gap-2 items-center", className), ...rest });
const BreadcrumbLink = ({
  className,
  theme: customTheme,
  href,
  ...rest
}) => {
  const theme2 = useComponentTheme("breadcrumbs", customTheme);
  return /* @__PURE__ */ jsx("a", { className: cn(theme2.link, className), href, ...rest });
};
const BreadcrumbList = ({
  className,
  theme: customTheme,
  ...rest
}) => {
  const theme2 = useComponentTheme("breadcrumbs", customTheme);
  return /* @__PURE__ */ jsx("ol", { className: cn(theme2.list, className), ...rest });
};
const BreadcrumbSeparator = ({
  children = /* @__PURE__ */ jsx(Arrow, { direction: "right" }),
  className,
  theme: customTheme,
  ...rest
}) => {
  const theme2 = useComponentTheme("breadcrumbs", customTheme);
  return /* @__PURE__ */ jsx(
    "li",
    {
      role: "presentation",
      "aria-hidden": true,
      className: cn(theme2.separator, className),
      ...rest,
      children
    }
  );
};
const BreadcrumbPage = ({
  theme: customTheme,
  className,
  ...rest
}) => {
  const theme2 = useComponentTheme("breadcrumbs", customTheme);
  return /* @__PURE__ */ jsx(
    "span",
    {
      role: "link",
      "aria-disabled": "true",
      "aria-current": "page",
      className: cn(theme2.activePage, className),
      ...rest
    }
  );
};
const Step = ({ children, className }) => /* @__PURE__ */ jsx("div", { className, children });
const Stepper = ({
  className,
  activeStep = 0,
  children,
  variant = "default",
  continuous,
  animated,
  theme: customTheme
}) => {
  const theme2 = useComponentTheme("stepper", customTheme);
  const childrenStepProps = Children.toArray(children).filter((child) => {
    var _a;
    return ((_a = child.type) == null ? void 0 : _a.name) === Step.name;
  }).map((child) => child.props);
  const totalSteps = childrenStepProps.length - 1;
  return /* @__PURE__ */ jsx(
    MotionGroup,
    {
      className: cn(theme2.base, className),
      initial: animated ? "initial" : null,
      animate: animated ? "animate" : null,
      children: childrenStepProps.map((props, index) => /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(
          "div",
          {
            className: cn(theme2.step.base, {
              "border-transparent": index === totalSteps && !continuous,
              [theme2.step.active]: index < activeStep - 1
            }),
            children: /* @__PURE__ */ jsx(MotionItem, { children: /* @__PURE__ */ jsxs("div", { className: theme2.step.marker.container, children: [
              variant === "numbered" && /* @__PURE__ */ jsx(
                "div",
                {
                  className: cn(theme2.step.marker.label.base, {
                    [theme2.step.marker.label.active]: index < activeStep
                  }),
                  children: index + 1
                }
              ),
              variant !== "numbered" && props.label && /* @__PURE__ */ jsxs(
                "div",
                {
                  className: cn(theme2.step.marker.label.base, {
                    [theme2.step.marker.label.active]: index < activeStep
                  }),
                  children: [
                    /* @__PURE__ */ jsx(
                      "div",
                      {
                        className: cn(theme2.step.marker.base, {
                          [theme2.step.marker.active]: index < activeStep
                        })
                      }
                    ),
                    props.label
                  ]
                }
              ),
              variant !== "numbered" && !props.label && /* @__PURE__ */ jsx(
                "div",
                {
                  className: cn(theme2.step.marker.base, {
                    [theme2.step.marker.active]: index < activeStep
                  })
                }
              )
            ] }) })
          }
        ),
        /* @__PURE__ */ jsx(MotionItem, { children: /* @__PURE__ */ jsx(
          Step,
          {
            className: cn(theme2.step.content, props.className),
            ...props
          }
        ) })
      ] }, index))
    }
  );
};
const stepperTheme = {
  base: "grid grid-cols-[min-content_1fr] gap-x-3",
  step: {
    base: "border-l border-solid border-panel-accent translate-x-1/2",
    marker: {
      base: "rounded-full w-[9px] h-[9px] bg-surface",
      container: "w-max pt-1 pb-0.5 backdrop-blur-md -translate-x-[calc(50%+0.5px)]",
      active: "bg-info",
      label: {
        base: "flex flex-row items-center gap-1 border border-solid border-surface px-3 py-1 rounded-[20px]",
        active: "border-info bg-info-background"
      }
    },
    active: "border-primary",
    content: "pb-6"
  }
};
const legacyStepperTheme = stepperTheme;
const CalendarRange = ({
  min: min$1,
  max: max$1,
  value,
  disabled,
  previousArrow = "‹",
  previousYearArrow = "«",
  nextArrow = "›",
  nextYearArrow = "»",
  showDayOfWeek,
  animated = true,
  onChange,
  monthsToDisplay = 2,
  direction = "future",
  headerDateFormat = "MMMM",
  theme: customTheme,
  ...rest
}) => {
  const theme2 = useComponentTheme(
    "calendarRange",
    customTheme
  );
  const date = useMemo(
    () => Array.isArray(value) ? value[0] : /* @__PURE__ */ new Date(),
    [value]
  );
  const rangeStart = useMemo(() => value ? value[0] : void 0, [value]);
  const rangeEnd = useMemo(() => value ? value[1] : void 0, [value]);
  const [viewValue, setViewValue] = useState(date || /* @__PURE__ */ new Date());
  const [scrollDirection, setScrollDirection] = useState(null);
  const [hoveringDate, setHoveringDate] = useState(null);
  const displayMonths = Array.from(Array(monthsToDisplay).keys());
  const showPast = direction === "past";
  if (direction === "past") {
    displayMonths.reverse();
  }
  const dateChangeHandler = useCallback(
    (date2) => {
      if (!rangeStart) {
        onChange == null ? void 0 : onChange([date2, void 0]);
      } else if (!rangeEnd) {
        const range = [rangeStart, date2];
        onChange == null ? void 0 : onChange([min(range), max(range)]);
      } else {
        onChange == null ? void 0 : onChange([date2, void 0]);
      }
    },
    [onChange, rangeEnd, rangeStart]
  );
  const previousClickHandler = useCallback(() => {
    setScrollDirection("back");
    setViewValue(sub(viewValue, { months: 1 }));
  }, [viewValue]);
  const previousYearClickHandler = useCallback(() => {
    setScrollDirection("back");
    setViewValue(sub(viewValue, { years: 1 }));
  }, [viewValue]);
  const nextClickHandler = useCallback(() => {
    setScrollDirection("forward");
    setViewValue(add(viewValue, { months: 1 }));
  }, [viewValue]);
  const nextYearClickHandler = useCallback(() => {
    setScrollDirection("forward");
    setViewValue(add(viewValue, { years: 1 }));
  }, [viewValue]);
  const xAnimation = useMemo(() => {
    switch (scrollDirection) {
      case "forward":
        return "100%";
      case "back":
        return "-100%";
      default:
        return 0;
    }
  }, [scrollDirection]);
  return /* @__PURE__ */ jsxs("div", { className: theme2.base, children: [
    /* @__PURE__ */ jsxs("header", { className: theme2.header.base, children: [
      /* @__PURE__ */ jsxs(Stack, { children: [
        /* @__PURE__ */ jsx(
          Button,
          {
            variant: "text",
            disabled,
            onClick: previousYearClickHandler,
            className: theme2.header.prev,
            disablePadding: true,
            children: previousYearArrow
          }
        ),
        /* @__PURE__ */ jsx(
          Button,
          {
            variant: "text",
            disabled,
            onClick: previousClickHandler,
            className: theme2.header.prev,
            disablePadding: true,
            children: previousArrow
          }
        )
      ] }),
      /* @__PURE__ */ jsx(SmallHeading, { className: theme2.title, disableMargins: true, children: displayMonths.map((i) => /* @__PURE__ */ jsx("span", { children: format(
        addMonths(viewValue, showPast ? -i : i),
        headerDateFormat
      ) }, addMonths(viewValue, showPast ? -i : i).toDateString())) }),
      /* @__PURE__ */ jsxs(Stack, { children: [
        /* @__PURE__ */ jsx(
          Button,
          {
            variant: "text",
            disabled,
            onClick: nextClickHandler,
            className: theme2.header.next,
            disablePadding: true,
            children: nextArrow
          }
        ),
        /* @__PURE__ */ jsx(
          Button,
          {
            variant: "text",
            disabled,
            onClick: nextYearClickHandler,
            className: theme2.header.next,
            disablePadding: true,
            children: nextYearArrow
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsx(Divider, {}),
    /* @__PURE__ */ jsx(AnimatePresence, { initial: false, mode: "wait", children: /* @__PURE__ */ jsx(
      motion.div,
      {
        initial: { scale: 0, opacity: 0 },
        animate: { scale: 1, opacity: 1 },
        exit: { scale: 0, opacity: 1 },
        transition: {
          x: { type: animated ? "keyframes" : false },
          opacity: { duration: 0.2, type: animated ? "tween" : false },
          scale: { type: animated ? "tween" : false }
        },
        children: /* @__PURE__ */ jsx("div", { className: theme2.content, children: displayMonths.map((offset, idx) => /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(
          CalendarDays,
          {
            value: addMonths(viewValue, showPast ? -offset : offset),
            min: min$1,
            max: max$1,
            disabled,
            current: [rangeStart, rangeEnd],
            showDayOfWeek,
            xAnimation,
            animated,
            hover: hoveringDate,
            onHover: setHoveringDate,
            hidePrevMonthDays: idx > 0,
            hideNextMonthDays: idx < monthsToDisplay - 1,
            onChange: dateChangeHandler,
            isRange: true,
            ...rest
          }
        ) }, `calendar-${offset}`)) })
      }
    ) })
  ] });
};
const baseTheme$u = {
  base: "relative overflow-hidden",
  header: {
    base: "flex text-center justify-between mb-2 items-center",
    prev: "text-xl leading-4",
    mid: "",
    next: "text-xl leading-4"
  },
  title: "font-semibold",
  content: "flex",
  days: {
    header: "text-center grid grid-cols-7 mb-1 pt-2 font-medium",
    dayOfWeek: "text-center font-medium",
    week: "grid grid-cols-7",
    day: "font-normal flex p-2 border",
    outside: "",
    startRangeDate: "rounded-tl-md rounded-tr-none rounded-br-none",
    cornerStartDateBottom: "rounded-bl-none",
    endRangeDate: "rounded-br-md rounded-bl-none rounded-tl-none",
    cornerEndDateTop: "rounded-tr-none",
    range: "rounded-none",
    selected: "",
    hover: "rounded",
    today: "rounded border"
  },
  months: {
    root: "grid grid-cols-4 gap-2",
    month: "p-1.5",
    selected: ""
  },
  years: {
    root: "grid grid-cols-4 gap-2",
    year: "p-1.5",
    selected: ""
  }
};
const calendarTheme = {
  ...baseTheme$u,
  header: {
    ...baseTheme$u.header,
    base: [baseTheme$u.header.base, "text-text-secondary"].join(" ")
  },
  days: {
    ...baseTheme$u.days,
    day: [
      baseTheme$u.days.day,
      "border-transparent text-text-secondary opacity-90 hover:bg-primary-hover hover:text-black"
    ].join(" "),
    header: [baseTheme$u.days.header, "text-text-secondary"].join(" "),
    outside: [baseTheme$u.days.outside, "opacity-40 text-text-secondary"].join(
      " "
    ),
    selected: [
      baseTheme$u.days.selected,
      "text-black border-transparent light:text-white light:border-transparent opacity-100"
    ].join(" "),
    hover: [
      baseTheme$u.days.hover,
      "bg-primary-active text-black border-transparent light:text-white opacity-100"
    ].join(" "),
    today: [baseTheme$u.days.today, "border-panel-accent text-text-primary"].join(
      " "
    )
  },
  months: {
    ...baseTheme$u.months,
    month: [
      baseTheme$u.months.month,
      "hover:bg-primary-hover hover:text-black border-transparent text-text-secondary light:hover:text-white"
    ].join(" "),
    selected: [
      baseTheme$u.years.selected,
      "border-transparent text-black light:text-white"
    ].join(" ")
  },
  years: {
    ...baseTheme$u.years,
    year: [
      baseTheme$u.years.year,
      "hover:bg-primary-hover hover:text-black border-transparent text-text-secondary light:hover:text-white"
    ].join(" "),
    selected: [
      baseTheme$u.years.selected,
      "border-transparent text-black light:text-white"
    ].join(" ")
  }
};
const legacyCalendarTheme = {
  ...baseTheme$u,
  header: {
    ...baseTheme$u.header,
    base: [
      baseTheme$u.header.base,
      "mb-[var(--spacing-sm)] mb-[var(--calendar-gap)]"
    ].join(" ")
  },
  days: {
    ...baseTheme$u.days,
    header: [baseTheme$u.days.header, "gap-[var(--calendar-gap)]"].join(" "),
    outside: [baseTheme$u.days.outside, "text-gray-100/60"].join(" ")
  }
};
const baseTheme$t = {
  base: "relative overflow-hidden",
  header: {
    base: "flex text-center justify-between mb-2 items-center",
    prev: "",
    mid: "",
    next: ""
  },
  title: "font-semibold flex grow justify-around",
  content: "flex gap-4"
};
const calendarRangeTheme = {
  base: baseTheme$t.base,
  header: baseTheme$t.header,
  title: baseTheme$t.title,
  content: baseTheme$t.content,
  days: calendarTheme.days
};
const legacyCalendarRangeTheme = {
  base: baseTheme$t.base,
  header: baseTheme$t.header,
  title: baseTheme$t.title,
  content: baseTheme$t.content,
  days: calendarTheme.days
};
const CheckboxLabel = ({
  label,
  size: size2,
  disabled,
  checked,
  onChange,
  labelClassName,
  theme: theme2
}) => /* @__PURE__ */ jsx(
  "span",
  {
    className: twMerge(
      theme2.label.base,
      theme2.label.sizes[size2],
      checked && theme2.label.checked,
      disabled && theme2.label.disabled,
      !disabled && onChange && theme2.label.clickable,
      labelClassName
    ),
    onClick: () => {
      if (!disabled && onChange) {
        onChange();
      }
    },
    children: label
  }
);
const Checkbox = forwardRef(
  ({
    checked = false,
    intermediate = false,
    label,
    disabled,
    size: size2 = "medium",
    labelPosition = "end",
    onChange,
    onBlur,
    className,
    containerClassName,
    labelClassName,
    borderPath = "M 1 0 L 16 0 C 16.552 0 17 0.448 17 1 L 17 15 C 17 15.552 16.552 16 16 16 L 1 16 C 0.448 16 0 15.552 0 15 L 0 1 C 0 0.448 0.448 0 1 0 Z",
    checkedPath = "M 4 8 L 8 12 L 12 4",
    intermediatePath = "M 5.36396 8.17792 L 10.6044 8.17792",
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("checkbox", customTheme);
    const pathLength = useMotionValue(0);
    const opacity = useTransform(pathLength, [0.05, 0.15], [0, 1]);
    const [_, setForceAnimation] = useState(false);
    useEffect(() => {
      if (checked || intermediate) {
        setForceAnimation(true);
      }
    }, []);
    const checkVariants = {
      pressed: (isChecked) => ({ pathLength: isChecked ? 0.85 : 0.3 }),
      checked: { pathLength: 1 },
      unchecked: { pathLength: 0 }
    };
    const handleOnChange = useCallback(() => {
      if (!disabled && onChange) {
        onChange(!checked);
      }
    }, [disabled, onChange, checked]);
    return /* @__PURE__ */ jsxs(
      "div",
      {
        className: twMerge(
          theme2.base,
          containerClassName,
          checked && "checked"
        ),
        children: [
          labelPosition === "start" && label && /* @__PURE__ */ jsx(
            CheckboxLabel,
            {
              label,
              size: size2,
              checked,
              disabled,
              onChange: handleOnChange,
              labelClassName: twMerge("mr-2.5", labelClassName),
              theme: theme2
            }
          ),
          /* @__PURE__ */ jsx(
            motion.div,
            {
              ...rest,
              ref,
              tabIndex: disabled ? -1 : 0,
              className: twMerge(
                theme2.checkbox.base,
                checked && theme2.checkbox.checked,
                disabled && theme2.checkbox.disabled,
                theme2.sizes[size2],
                className
              ),
              onClick: (e) => {
                if (!disabled && onChange) {
                  e.stopPropagation();
                  onChange(!checked);
                }
              },
              onBlur,
              onKeyDown: (event) => {
                if (!disabled && onChange && event.code === "Space") {
                  onChange(!checked);
                }
              },
              children: /* @__PURE__ */ jsxs(
                motion.svg,
                {
                  animate: checked ? "checked" : "unchecked",
                  whileHover: !disabled ? "hover" : void 0,
                  whileTap: !disabled ? "pressed" : void 0,
                  viewBox: "0 0 16 16",
                  width: 16,
                  height: 16,
                  children: [
                    /* @__PURE__ */ jsx(
                      motion.path,
                      {
                        className: twMerge(
                          theme2.border.base,
                          checked && theme2.border.checked,
                          disabled && theme2.border.disabled
                        ),
                        d: borderPath,
                        variants: theme2.boxVariants
                      }
                    ),
                    intermediate ? /* @__PURE__ */ jsx(
                      motion.path,
                      {
                        d: intermediatePath,
                        fill: "transparent",
                        strokeWidth: "1",
                        className: theme2.check.base,
                        variants: checkVariants,
                        style: { pathLength, opacity },
                        custom: checked
                      }
                    ) : /* @__PURE__ */ jsx(
                      motion.path,
                      {
                        d: checkedPath,
                        fill: "transparent",
                        strokeWidth: "1",
                        className: twMerge(
                          theme2.check.base,
                          disabled && theme2.check.disabled,
                          checked && theme2.check.checked
                        ),
                        variants: checkVariants,
                        style: { pathLength, opacity },
                        custom: checked
                      }
                    )
                  ]
                }
              )
            }
          ),
          labelPosition === "end" && label && /* @__PURE__ */ jsx(
            CheckboxLabel,
            {
              label,
              size: size2,
              checked,
              disabled,
              onChange: handleOnChange,
              labelClassName: twMerge("ml-2.5", labelClassName),
              theme: theme2
            }
          )
        ]
      }
    );
  }
);
const baseTheme$s = {
  base: "inline-flex items-center w-full group",
  label: {
    base: "dark:text-gray-400 light:text-gray-700 ml-2.5 w-full",
    checked: "checked dark:text-gray-100 light:text-gray-900",
    disabled: "cursor-not-allowed dark:text-gray-600 light:text-gray-400",
    clickable: "cursor-pointer",
    sizes: {
      small: "text-sm",
      medium: "text-base",
      large: "text-lg"
    }
  },
  check: {
    base: "stroke-white",
    checked: "",
    disabled: "cursor-not-allowed"
  },
  border: {
    base: "stroke-gray-400 light:stroke-gray-700",
    checked: "stroke-blue-500",
    disabled: "cursor-not-allowed stroke-gray-500"
  },
  checkbox: {
    base: "fill-transparent flex items-center justify-center cursor-pointer focus-visible:outline-none",
    checked: "fill-blue-500 checked",
    disabled: "fill-transparent disabled"
  },
  sizes: {
    small: "[&>svg]:w-3 [&>svg]:h-3",
    medium: "[&>svg]:w-4 [&>svg]:h-4",
    large: "[&>svg]:w-5 [&>svg]:h-5"
  }
};
const checkboxTheme = {
  ...baseTheme$s,
  checkbox: {
    ...baseTheme$s.checkbox,
    base: [
      baseTheme$s.checkbox.base,
      "border border-surface",
      "[&.checked.disabled]:fill-gray-400"
    ].join(" "),
    checked: [
      baseTheme$s.checkbox.checked,
      "group-hover:fill-blue-400",
      "light:group-hover:fill-blue-600",
      "light:group-hover:[&.disabled]:fill-gray-400"
    ].join(" "),
    disabled: [
      baseTheme$s.checkbox.disabled,
      "group-hover:transparent",
      "light:group-hover:transparent"
    ].join(" ")
  },
  check: {
    ...baseTheme$s.check,
    base: [
      baseTheme$s.check.base,
      "group-hover:stroke-black light:group-hover:stroke-white"
    ].join(" "),
    disabled: [
      baseTheme$s.check.disabled,
      "stroke-black light:stroke-white group-hover:stroke-black "
    ].join(" ")
  },
  border: {
    ...baseTheme$s.border,
    base: [
      baseTheme$s.border.base,
      "dark:group-hover:stroke-blue-300",
      "light:group-hover:stroke-blue-600"
    ].join(" "),
    disabled: [
      baseTheme$s.border.disabled,
      "dark:group-hover:stroke-gray-500",
      "light:group-hover:stroke-gray-400"
    ].join(" ")
  },
  label: {
    ...baseTheme$s.label,
    base: [
      baseTheme$s.label.base,
      "text-text-primary dark:group-hover:text-blue-300 light:group-hover:text-blue-400"
    ].join(" "),
    checked: [baseTheme$s.label.checked, "group-hover:text-gray-100"].join(" "),
    disabled: [
      baseTheme$s.label.disabled,
      "light:group-hover:text-gray-400",
      "dark:group-hover:text-gray-600"
    ].join(" ")
  },
  boxVariants: {
    hover: {
      strokeWidth: 1
    },
    pressed: { scale: 0.95 }
  }
};
const legacyCheckboxTheme = {
  ...baseTheme$s,
  checkbox: { base: [baseTheme$s.checkbox, "fill-transparent"].join(" ") },
  check: {
    base: [baseTheme$s.check.base, "stroke-[var(--checkbox-check-stroke)]"].join(
      " "
    )
  },
  label: {
    ...baseTheme$s.label,
    base: [
      baseTheme$s.label.base,
      "text-[var(--checkbox-label-color)] ml-[var(--spacing-md)]"
    ].join(" ")
  }
};
const Input = forwardRef(
  ({
    className,
    containerClassname,
    error,
    fullWidth,
    selectOnFocus,
    start,
    end,
    startAdornment,
    endAdornment,
    autoFocus,
    disabled,
    value,
    size: size2 = "medium",
    onFocus,
    onChange,
    onValueChange,
    onBlur,
    theme: customTheme,
    ...rest
  }, ref) => {
    const containerRef = useRef(null);
    const inputRef = useRef(null);
    const [focused, setFocused] = useState(false);
    useImperativeHandle(ref, () => ({
      inputRef,
      containerRef,
      blur: () => {
        var _a;
        return (_a = inputRef.current) == null ? void 0 : _a.blur();
      },
      focus: () => {
        var _a;
        return (_a = inputRef.current) == null ? void 0 : _a.focus();
      },
      select: () => {
        var _a;
        return (_a = inputRef.current) == null ? void 0 : _a.select();
      }
    }));
    useLayoutEffect(() => {
      if (autoFocus) {
        requestAnimationFrame(() => {
          var _a;
          return (_a = inputRef.current) == null ? void 0 : _a.focus();
        });
      }
    }, [autoFocus]);
    const theme2 = useComponentTheme("input", customTheme);
    return /* @__PURE__ */ jsxs(
      "div",
      {
        className: twMerge(
          theme2.base,
          focused && theme2.focused,
          fullWidth && theme2.fullWidth,
          error && theme2.error,
          theme2.sizes[size2],
          disabled && theme2.disabled,
          containerClassname
        ),
        ref: containerRef,
        children: [
          (start || startAdornment) && /* @__PURE__ */ jsx("div", { className: twMerge(theme2.adornment.base, theme2.adornment.start), children: start ?? startAdornment }),
          /* @__PURE__ */ jsx(
            "input",
            {
              ...rest,
              ref: inputRef,
              value,
              disabled,
              className: twMerge(theme2.input, className),
              onFocus: (event) => {
                if (selectOnFocus) {
                  event.target.select();
                }
                setFocused(true);
                onFocus == null ? void 0 : onFocus(event);
              },
              onBlur: (event) => {
                onBlur == null ? void 0 : onBlur(event);
                setFocused(false);
              },
              onChange: (event) => {
                onValueChange == null ? void 0 : onValueChange(event.target.value);
                onChange == null ? void 0 : onChange(event);
              }
            }
          ),
          (end || endAdornment) && /* @__PURE__ */ jsx("div", { className: twMerge(theme2.adornment.base, theme2.adornment.end), children: end ?? endAdornment })
        ]
      }
    );
  }
);
const InlineInput = forwardRef(
  ({
    inputClassName,
    className,
    placeholder,
    value,
    theme: customTheme,
    ...props
  }, ref) => {
    const theme2 = useComponentTheme("input", customTheme);
    return /* @__PURE__ */ jsxs("div", { className: cn("inline-grid", className), children: [
      /* @__PURE__ */ jsxs("span", { className: "invisible", style: { gridArea: " 1 / 1 " }, children: [
        !value && " ",
        typeof value === "string" ? !value ? placeholder == null ? void 0 : placeholder.replace(/ /g, " ") : value == null ? void 0 : value.replace(/ /g, " ") : value
      ] }),
      /* @__PURE__ */ jsx(
        "input",
        {
          ...props,
          size: 1,
          ref,
          style: { gridArea: " 1 / 1 " },
          type: "text",
          placeholder,
          value,
          className: cn(
            "border-none bg-transparent focus:outline-none",
            theme2.inline,
            inputClassName
          )
        }
      )
    ] });
  }
);
const DebouncedInput = forwardRef(
  ({ debounce = 100, value, onChange, onValueChange, ...rest }, ref) => {
    const timeoutRef = useRef(null);
    const [internalValue, setInternalValue] = useState(value);
    useEffect(() => {
      setInternalValue(value);
    }, [value]);
    return /* @__PURE__ */ jsx(
      Input,
      {
        ...rest,
        ref,
        value: internalValue,
        onKeyDown: (event) => {
          if (event.key === "Enter") {
            onValueChange == null ? void 0 : onValueChange(event.target.value);
            onChange == null ? void 0 : onChange(event);
          }
        },
        onChange: (event) => {
          setInternalValue(event.target.value);
          if (debounce) {
            clearTimeout(timeoutRef.current);
            timeoutRef.current = setTimeout(() => {
              onValueChange == null ? void 0 : onValueChange(event.target.value);
              onChange == null ? void 0 : onChange(event);
            }, debounce);
          } else {
            onValueChange == null ? void 0 : onValueChange(event.target.value);
            onChange == null ? void 0 : onChange(event);
          }
        }
      }
    );
  }
);
const baseTheme$r = {
  base: "flex relative flex-row items-center flex-nowrap box-border transition-colors rounded-sm",
  focused: "",
  input: "flex-1 font-normal font-sans bg-transparent border-0 p-0 m-0 disabled:pointer-events-none outline-none px-0.5 disabled:cursor-not-allowed disabled:text-disabled",
  inline: "bg-transparent border-0 outline-none",
  disabled: "text-waterloo cursor-not-allowed",
  fullWidth: "w-full",
  error: "border-error",
  sizes: {
    small: "[&>input]:text-sm p-1 text-sm",
    medium: "[&>input]:text-base px-2.5 py-1.5 text-base",
    large: "[&>input]:text-lg p-5 text-lg"
  },
  adornment: {
    base: "flex items-center justify-center [&>svg]:w-4 [&>svg]:h-4 [&>svg]:current-color",
    start: "pr-1.5",
    end: "pl-1.5"
  }
};
const inputTheme = {
  ...baseTheme$r,
  base: [
    baseTheme$r.base,
    "bg-panel border border-panel-accent text-text-primary hover:border-panel-accent light:hover:border-panel-accent",
    "hover:after:bg-[radial-gradient(circle,_#105EFF_0%,_#105EFF_36%,_#242433_100%)] light:hover:after:bg-[radial-gradient(circle,_#105EFF_0%,_#105EFF_36%,_#E6E6F0_100%)]",
    'hover:after:content-[""] hover:after:absolute hover:after:mx-1 hover:after:h-px after:z-[2] hover:after:rounded hover:after:-bottom-[1px] hover:after:inset-x-0.5'
  ].join(" "),
  focused: [
    baseTheme$r.focused,
    "focus-within:after:bg-[radial-gradient(circle,_#93B6FF_0%,_#105EFF_36%,_#3D3D4D_90%,_#242433_100%)] light:focus-within:after:bg-[radial-gradient(circle,_#105EFF_10%,_#93B6FF_36%,_#E6E6F0_90%)]",
    'focus-within:after:content-[""] focus-within:after:absolute focus-within:after:mx-0 focus-within:after:h-px after:z-[2] focus-within:after:rounded focus-within:after:-bottom-[1px] focus-within:after:inset-x-0.5'
  ].join(" "),
  input: [baseTheme$r.input, "placeholder-accent"].join(" "),
  disabled: [
    baseTheme$r.disabled,
    "disabled-within:bg-dark-disabled disabled-within:after:content-none"
  ].join(" "),
  adornment: {
    ...baseTheme$r.adornment,
    base: [baseTheme$r.adornment.base, "text-text-primary"].join(" ")
  }
};
const legacyInputTheme = {
  ...baseTheme$r,
  base: [
    baseTheme$r.base,
    "bg-[var(--input-background)] rounded-[var(--input-border-radius)] [border:_var(--input-border)] focus-within:border-[var(--input-border-focus)]"
  ].join(" "),
  error: [baseTheme$r.error, "border-[var(--error-background)]"].join(" "),
  sizes: {
    small: "[padding:_var(--input-spacing-sm)]",
    medium: "[padding:_var(--input-spacing-md)]",
    large: "padding:_var(--input-spacing-lg)"
  },
  adornment: {
    base: [
      baseTheme$r.adornment.base,
      "[&>svg]:w-[var(--input-adornment-size)] [&>svg]:h-[var(--input-adornment-size)] [&>svg]:fill-[var(--input-adornment-fill)]"
    ].join(" "),
    start: "[padding-right:_calc(var(--list-item-spacing)_/_2)]",
    end: "[padding-left:_calc(var(--list-item-spacing)_/_2)]"
  },
  input: [
    baseTheme$r.input,
    "placeholder-[var(--input-color-placeholder)] "
  ].join(" "),
  disabled: [baseTheme$r.disabled, "text-[var(--disabled-color)]"].join(" ")
};
const RadioGroupContext = createContext({
  onChange: null,
  selectedValue: null
});
const VARIANTS = {
  check: { opacity: 1, scale: 1 },
  uncheck: { opacity: 0, scale: 0 }
};
const Radio = forwardRef(
  ({
    checked: isRadioChecked,
    label,
    disabled,
    onChange,
    onBlur,
    className,
    size: size2 = "medium",
    value,
    theme: customTheme,
    ...rest
  }, ref) => {
    const { onChange: onGroupValueChange, selectedValue } = useContext(RadioGroupContext);
    const checked = useMemo(() => {
      if (selectedValue === null) {
        return isRadioChecked;
      } else {
        return selectedValue === value;
      }
    }, [isRadioChecked, selectedValue, value]);
    const onValueChange = (checked2) => {
      onGroupValueChange == null ? void 0 : onGroupValueChange(value);
      onChange == null ? void 0 : onChange(checked2);
    };
    const theme2 = useComponentTheme("radio", customTheme);
    return /* @__PURE__ */ jsxs("div", { className: cn(theme2.base, className), children: [
      /* @__PURE__ */ jsx(
        "div",
        {
          ...rest,
          ref,
          tabIndex: 0,
          className: cn(theme2.radio.base, theme2.sizes[size2], {
            [theme2.radio.checked]: checked,
            [theme2.radio.disabled]: disabled
          }),
          onClick: () => {
            if (!disabled) {
              onValueChange(!checked);
            }
          },
          onBlur,
          onKeyDown: (event) => {
            if (!disabled && event.code === "Space") {
              onValueChange(!checked);
            }
          },
          children: /* @__PURE__ */ jsx(
            motion.div,
            {
              className: cn(theme2.indicator.base, theme2.indicator.sizes[size2], {
                [theme2.indicator.disabled]: disabled
              }),
              initial: !disabled ? { opacity: 0, scale: 0.5 } : {},
              variants: VARIANTS,
              animate: checked ? "check" : "uncheck",
              transition: { duration: 0.15 }
            }
          )
        }
      ),
      label && /* @__PURE__ */ jsx(
        "span",
        {
          className: cn(theme2.label.base, {
            [theme2.label.checked]: checked,
            [theme2.label.disabled]: disabled,
            [theme2.label.clickable]: !disabled
          }),
          onClick: () => {
            if (!disabled) {
              onValueChange(!checked);
            }
          },
          children: label
        }
      )
    ] });
  }
);
const RadioGroup = ({
  children,
  className,
  onChange,
  selectedValue: defaultValue
}) => {
  const [selectedValue, setSelectedValue] = useState(defaultValue);
  const handleValueChange = useCallback(
    (value) => {
      setSelectedValue(value);
      onChange(value);
    },
    [onChange]
  );
  const values = useMemo(
    () => ({
      onChange: handleValueChange,
      selectedValue
    }),
    [handleValueChange, selectedValue]
  );
  return /* @__PURE__ */ jsx(RadioGroupContext.Provider, { value: values, children });
};
const baseTheme$q = {
  base: "box-border leading-none group",
  radio: {
    base: "will-change-[border-color] inline-flex justify-center items-center box-border align-middle rounded-[100%] bg-transparent border cursor-pointer",
    disabled: "cursor-not-allowed",
    checked: ""
  },
  indicator: {
    base: "rounded-[100%]",
    disabled: "cursor-not-allowed",
    sizes: {
      small: "w-2 h-2",
      medium: "w-2.5 h-2.5",
      large: "w-3.5 h-3.5"
    }
  },
  label: {
    base: "w-full align-middle ml-2.5",
    clickable: "cursor-pointer hover:text-blue-300",
    disabled: "cursor-not-allowed",
    checked: ""
  },
  sizes: {
    small: "w-3 h-3",
    medium: "w-4 h-4",
    large: "w-5 h-5"
  }
};
const radioTheme = {
  ...baseTheme$q,
  label: {
    ...baseTheme$q.label,
    base: [baseTheme$q.label.base, "text-text-secondary"].join(" "),
    checked: [baseTheme$q.label.checked, "text-text-primary"].join(" "),
    disabled: [baseTheme$q.label.disabled, "!text-secondary-inactive/40"].join(
      " "
    )
  },
  radio: {
    ...baseTheme$q.radio,
    base: [
      baseTheme$q.radio.base,
      "border-surface group-hover:border-primary-hover hover:border-primary-hover"
    ].join(" "),
    checked: [
      baseTheme$q.radio.checked,
      "border-primary-active group-hover:border-primary-hover"
    ].join(" "),
    disabled: [baseTheme$q.radio.disabled, "!border-secondary-inactive"].join(" ")
  },
  indicator: {
    ...baseTheme$q.indicator,
    base: [
      baseTheme$q.indicator.base,
      "bg-primary group-hover:bg-primary-hover"
    ].join(" "),
    disabled: [baseTheme$q.indicator.disabled, "!bg-secondary-inactive"].join(" ")
  }
};
const legacyRadioTheme = {
  ...baseTheme$q,
  label: {
    ...baseTheme$q.label,
    base: [
      baseTheme$q.label.base,
      "text-[var(--radio-label-color)] ml-[var(--spacing-md)]"
    ].join(" ")
  },
  radio: {
    ...baseTheme$q.radio,
    base: [
      baseTheme$q.radio.base,
      "bg-[var(--radio-background)] [border:_var(--radio-stroke-size)_solid_var(--radio-stroke)]"
    ].join(" "),
    checked: [
      baseTheme$q.radio.checked,
      "border-[var(--radio-stroke-active)]"
    ].join(" ")
  },
  indicator: {
    ...baseTheme$q.indicator,
    base: [baseTheme$q.indicator.base, "bg-[var(--radio-indicator-active)]"].join(
      " "
    ),
    sizes: {
      small: "w-[var(--radio-indicator-size,_6px)] h-[var(--radio-indicator-size,_6px)]",
      medium: "w-[var(--radio-indicator-size,_8px)] h-[var(--radio-indicator-size,_8px)]",
      large: "w-[var(--radio-indicator-size,_10px)] h-[var(--radio-indicator-size,_10px)]"
    }
  }
};
const RangeTooltip = ({ children, visible }) => {
  const theme2 = useComponentTheme("range");
  return /* @__PURE__ */ jsx(AnimatePresence, { children: visible && /* @__PURE__ */ jsx(
    motion.div,
    {
      className: theme2.tooltip,
      initial: {
        opacity: 0,
        scale: 0.3,
        translateX: "-50%"
      },
      animate: {
        opacity: 1,
        scale: 1
      },
      exit: { opacity: 0, scale: 0.3 },
      children
    }
  ) });
};
const RangeDouble = ({
  disabled,
  style,
  className,
  handleClassName,
  min: min2,
  max: max2,
  value,
  valueDisplay = "hover",
  valueFormat = (value2) => value2.toLocaleString(),
  onChange,
  theme: customTheme,
  step = 1
}) => {
  const minValueBetween = step;
  const [minValue, maxValue] = value;
  const initialMinValue = Math.max(minValue, min2);
  const initalMaxValue = Math.min(
    maxValue < initialMinValue + minValueBetween ? initialMinValue + minValueBetween : maxValue,
    max2
  );
  const [currentMin, setCurrentMin] = useState(initialMinValue);
  const [currentMax, setCurrentMax] = useState(initalMaxValue);
  const range = useRef(null);
  const [rangeWidth, setRangeWidth] = useState(0);
  const [rangeLeft, setRangeLeft] = useState(0);
  const minX = useMotionValue(0);
  const maxX = useMotionValue(0);
  const fractionDigits = useMemo(
    () => {
      var _a, _b;
      return ((_b = (_a = step.toString()) == null ? void 0 : _a[1]) == null ? void 0 : _b.length) || 0;
    },
    [step]
  );
  const getValue = (xPosition) => {
    const draggedWidth = xPosition - rangeLeft;
    const draggedWidthPercentage = draggedWidth * 100 / rangeWidth;
    const scaledStep = step / (max2 - min2) * 100;
    const scaledValue = Math.round(draggedWidthPercentage / scaledStep) * scaledStep;
    const scaledValueWithStep = scaledValue / 100 * (max2 - min2) + min2;
    const rawValue = Math.round(scaledValueWithStep / step) * step;
    const newValue = fractionDigits > 0 ? +rawValue.toFixed(fractionDigits) : rawValue;
    return Math.max(min2, Math.min(newValue, max2));
  };
  const getPosition = useCallback(
    (value2) => (value2 - min2) / (max2 - min2) * rangeWidth,
    [min2, max2, rangeWidth]
  );
  const minSpaceBetween = getPosition(min2 + minValueBetween);
  const updateCurrentMin = useCallback(
    (newMin, notifyChange = false) => {
      newMin = Math.max(newMin, min2);
      if (newMin <= currentMax - minValueBetween) {
        setCurrentMin(newMin);
        minX.set(getPosition(newMin));
        notifyChange && (onChange == null ? void 0 : onChange([newMin, currentMax]));
      }
    },
    [currentMax, min2, minX, getPosition, onChange, minValueBetween]
  );
  const updateCurrentMax = useCallback(
    (newMax, notifyChange = false) => {
      newMax = Math.min(newMax, max2);
      if (newMax >= currentMin + minValueBetween) {
        setCurrentMax(newMax);
        maxX.set(getPosition(newMax));
        notifyChange && (onChange == null ? void 0 : onChange([currentMin, newMax]));
      }
    },
    [currentMin, max2, maxX, getPosition, onChange, minValueBetween]
  );
  useLayoutEffect(() => {
    const updateRange = () => {
      const rect = range.current.getBoundingClientRect();
      setRangeWidth(rect.width);
      setRangeLeft(rect.left);
      minX.set(getPosition(currentMin));
      maxX.set(getPosition(currentMax));
    };
    requestAnimationFrame(updateRange);
    window.addEventListener("resize", updateRange);
    return () => {
      window.removeEventListener("resize", updateRange);
    };
  }, [currentMin, minX, currentMax, maxX, getPosition]);
  useEffect(() => {
    setCurrentMin(initialMinValue);
    setCurrentMax(initalMaxValue);
  }, [initalMaxValue, initialMinValue]);
  const [draggingMin, setDraggingMin] = useState(false);
  const [focusedMin, setFocusedMin] = useState(false);
  const [hoveringMin, setHoveringMin] = useState(false);
  const minTooltipVisible = draggingMin || focusedMin || hoveringMin;
  const minPercentage = (currentMin - min2) / (max2 - min2) * 100;
  const [draggingMax, setDraggingMax] = useState(false);
  const [focusedMax, setFocusedMax] = useState(false);
  const [hoveringMax, setHoveringMax] = useState(false);
  const maxTooltipVisible = draggingMax || focusedMax || hoveringMax;
  const maxPercentage = (currentMax - min2) / (max2 - min2) * 100;
  const theme2 = useComponentTheme("range", customTheme);
  return /* @__PURE__ */ jsxs(
    "div",
    {
      style,
      ref: range,
      className: twMerge(theme2.base, disabled && theme2.disabled, className),
      children: [
        /* @__PURE__ */ jsxs(
          motion.div,
          {
            className: twMerge(theme2.drag, handleClassName),
            drag: !disabled ? "x" : null,
            dragMomentum: false,
            style: { x: minX },
            onMouseEnter: () => setHoveringMin(true),
            onMouseLeave: () => setHoveringMin(false),
            onDragStart: () => setDraggingMin(true),
            onDrag: (e) => updateCurrentMin(getValue(e.clientX)),
            onDragEnd: (e) => {
              updateCurrentMin(getValue(e.clientX), true);
              setDraggingMin(false);
            },
            dragConstraints: {
              left: 0,
              right: maxX.get() - minSpaceBetween
            },
            dragElastic: false,
            children: [
              /* @__PURE__ */ jsx(
                "div",
                {
                  className: twMerge(
                    theme2.inputWrapper.base,
                    disabled && theme2.inputWrapper.disabled
                  ),
                  children: /* @__PURE__ */ jsx(
                    "input",
                    {
                      type: "range",
                      className: theme2.input,
                      min: min2,
                      max: max2,
                      value: currentMin,
                      onChange: (e) => updateCurrentMin(e.target.valueAsNumber),
                      onBlur: () => setFocusedMin(false),
                      onFocus: () => setFocusedMin(true),
                      disabled
                    }
                  )
                }
              ),
              valueDisplay === "hover" ? /* @__PURE__ */ jsx(RangeTooltip, { visible: minTooltipVisible, children: valueFormat(currentMin) }) : valueFormat(currentMin)
            ]
          }
        ),
        /* @__PURE__ */ jsxs(
          motion.div,
          {
            className: twMerge(theme2.drag),
            drag: !disabled ? "x" : null,
            dragMomentum: false,
            style: { x: maxX },
            onMouseEnter: () => setHoveringMax(true),
            onMouseLeave: () => setHoveringMax(false),
            onDragStart: () => setDraggingMax(true),
            onDrag: (e) => updateCurrentMax(getValue(e.clientX)),
            onDragEnd: (e) => {
              updateCurrentMax(getValue(e.clientX), true);
              setDraggingMax(false);
            },
            dragConstraints: {
              left: minX.get() + minSpaceBetween,
              right: rangeWidth
            },
            dragElastic: false,
            children: [
              /* @__PURE__ */ jsx(
                "div",
                {
                  className: twMerge(
                    theme2.inputWrapper.base,
                    disabled && theme2.inputWrapper.disabled
                  ),
                  children: /* @__PURE__ */ jsx(
                    "input",
                    {
                      type: "range",
                      className: theme2.input,
                      min: min2,
                      max: max2,
                      value: currentMax,
                      onChange: (e) => updateCurrentMax(e.target.valueAsNumber),
                      onBlur: () => setFocusedMax(false),
                      onFocus: () => setFocusedMax(true),
                      disabled
                    }
                  )
                }
              ),
              valueDisplay === "hover" ? /* @__PURE__ */ jsx(RangeTooltip, { visible: maxTooltipVisible, children: valueFormat(currentMax) }) : valueFormat(currentMax)
            ]
          }
        ),
        /* @__PURE__ */ jsx(
          "div",
          {
            className: cn(theme2.rangeHighlight.base, {
              [theme2.rangeHighlight.disabled]: disabled
            }),
            style: {
              width: `${maxPercentage - minPercentage}%`,
              marginLeft: `${minPercentage}%`
            }
          }
        )
      ]
    }
  );
};
const RangeSingle = ({
  disabled,
  style,
  handleClassName,
  onChange,
  className,
  min: min2,
  max: max2,
  value,
  valueDisplay = "hover",
  valueFormat = (value2) => value2.toLocaleString(),
  step = 1,
  showHighlight = false,
  theme: customTheme
}) => {
  const [currentValue, setCurrentValue] = useState(value);
  const range = useRef(null);
  const [rangeWidth, setRangeWidth] = useState(0);
  const [rangeLeft, setRangeLeft] = useState(0);
  const valueX = useMotionValue(0);
  const fractionDigits = useMemo(
    () => {
      var _a, _b;
      return ((_b = (_a = step.toString()) == null ? void 0 : _a[1]) == null ? void 0 : _b.length) || 0;
    },
    [step]
  );
  const getValue = (xPosition) => {
    const draggedWidth = xPosition - rangeLeft;
    const draggedWidthPercentage = draggedWidth * 100 / rangeWidth;
    const scaledStep = step / (max2 - min2) * 100;
    const scaledValue = Math.round(draggedWidthPercentage / scaledStep) * scaledStep;
    const rawValue = min2 + (max2 - min2) * scaledValue / 100;
    const newValue = fractionDigits > 0 ? +rawValue.toFixed(fractionDigits) : rawValue;
    return Math.max(min2, Math.min(newValue, max2));
  };
  const getPosition = useCallback(
    (value2) => (value2 - min2) / (max2 - min2) * rangeWidth,
    [min2, max2, rangeWidth]
  );
  const updateCurrentValue = useCallback(
    (newValue) => {
      newValue = Math.max(newValue, min2);
      newValue = Math.min(newValue, max2);
      setCurrentValue(newValue);
      valueX.set(getPosition(newValue));
      onChange == null ? void 0 : onChange(newValue);
    },
    [min2, max2, valueX, getPosition, onChange]
  );
  useEffect(() => {
    var _a, _b;
    setRangeWidth(range.current.offsetWidth);
    setRangeLeft(((_b = (_a = range.current) == null ? void 0 : _a.getBoundingClientRect()) == null ? void 0 : _b.left) || 0);
    valueX.set(getPosition(currentValue));
  }, [range, currentValue, valueX, getPosition]);
  const [dragging, setDragging] = useState(false);
  const [hovering, setHovering] = useState(false);
  const [focused, setFocused] = useState(false);
  const tooltipVisible = dragging || focused || hovering;
  const maxPercentage = (currentValue - min2) / (max2 - min2) * 100;
  const theme2 = useComponentTheme("range", customTheme);
  return /* @__PURE__ */ jsxs(
    "div",
    {
      ref: range,
      style,
      className: twMerge(theme2.base, disabled && theme2.disabled, className),
      children: [
        /* @__PURE__ */ jsxs(
          motion.div,
          {
            className: twMerge(theme2.drag, handleClassName),
            drag: !disabled ? "x" : null,
            dragMomentum: false,
            style: { x: valueX },
            onMouseEnter: () => setHovering(true),
            onMouseLeave: () => setHovering(false),
            onDragStart: () => setDragging(true),
            onDrag: (e) => updateCurrentValue(getValue(e.clientX)),
            onDragEnd: (e) => {
              updateCurrentValue(getValue(e.clientX));
              setDragging(false);
            },
            dragConstraints: {
              left: 0,
              right: rangeWidth
            },
            children: [
              /* @__PURE__ */ jsx(
                "div",
                {
                  className: twMerge(
                    theme2.inputWrapper.base,
                    disabled && theme2.inputWrapper.disabled
                  ),
                  children: /* @__PURE__ */ jsx(
                    "input",
                    {
                      type: "range",
                      className: theme2.input,
                      min: min2,
                      max: max2,
                      step: 0.5,
                      value: currentValue,
                      disabled,
                      onChange: (e) => updateCurrentValue(e.target.valueAsNumber),
                      onBlur: () => setFocused(false),
                      onFocus: () => setFocused(true)
                    }
                  )
                }
              ),
              valueDisplay === "hover" ? /* @__PURE__ */ jsx(RangeTooltip, { visible: tooltipVisible, children: valueFormat(currentValue) }) : valueFormat(currentValue)
            ]
          }
        ),
        showHighlight && /* @__PURE__ */ jsx(
          "div",
          {
            className: cn(theme2.rangeHighlight.base, {
              [theme2.rangeHighlight.disabled]: disabled
            }),
            style: {
              width: `${maxPercentage}%`
            }
          }
        )
      ]
    }
  );
};
const baseTheme$p = {
  base: "relative box-border w-full h-0.5",
  drag: "absolute w-4 h-4 -left-2 -top-2 rounded-full",
  inputWrapper: {
    base: "cursor-pointer inline-block relative h-full w-full rounded-full",
    disabled: "cursor-not-allowed"
  },
  rangeHighlight: {
    base: "pointer-events-none h-0.5",
    disabled: "cursor-not-allowed"
  },
  disabled: "cursor-not-allowed",
  input: "absolute left-[-9999px]",
  // The hidden input used for keyboard controls
  tooltip: "absolute top-[-45px] -translate-x-2/4 whitespace-nowrap text-center left-2/4 rounded-lg p-2.5"
};
const rangeTheme = {
  ...baseTheme$p,
  base: [baseTheme$p.base, "bg-surface light:bg-gray-200"].join(" "),
  inputWrapper: {
    ...baseTheme$p.inputWrapper,
    base: [
      baseTheme$p.inputWrapper.base,
      "bg-primary-active hover:bg-primary-hover shadow-[0px_4px_4px_0px_rgba(0,0,0,0.20)]"
    ].join(" "),
    disabled: [
      baseTheme$p.inputWrapper.disabled,
      "bg-secondary-inactive hover:bg-secondary-inactive"
    ].join(" ")
  },
  rangeHighlight: {
    base: [baseTheme$p.rangeHighlight.base, "bg-primary-active"].join(" "),
    disabled: [baseTheme$p.rangeHighlight.disabled, "bg-secondary-inactive"].join(
      " "
    )
  },
  tooltip: [baseTheme$p.tooltip, "text-text-primary bg-surface"].join(" ")
};
const legacyRangeTheme = {
  ...baseTheme$p,
  base: [
    baseTheme$p.base,
    "h-[var(--range-track-size)] bg-[var(--range-track-background)] rounded-[var(--range-track-border-radius)]"
  ].join(" "),
  drag: [
    baseTheme$p.drag,
    "top-[calc(-1_*_(var(--range-handle-size)_-_var(--range-track-size))_/_2)] left-[calc(-1_*_var(--range-handle-size)_/_2)] w-[var(--range-handle-size)] h-[var(--range-handle-size)] bg-[var(--range-handle-background)] rounded-[var(--range-handle-border-radius)]"
  ].join(" "),
  rangeHighlight: {
    ...baseTheme$p.rangeHighlight,
    base: [
      baseTheme$p.rangeHighlight.base,
      "h-[var(--range-track-size)] bg-[var(--range-track-active-background)]"
    ].join(" ")
  },
  tooltip: [
    baseTheme$p.tooltip,
    "rounded-[var(--border-radius-md)] [padding:_var(--spacing-md)] bg-[var(--tooltip-background)] text-[var(--tooltip-color)]"
  ].join(" ")
};
const DownArrowIcon$1 = () => /* @__PURE__ */ jsx(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    x: "0px",
    y: "0px",
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    children: /* @__PURE__ */ jsx(
      "path",
      {
        d: "M11.06 5.53003L8 8.58336L4.94 5.53003L4 6.47003L8 10.47L12 6.47003L11.06 5.53003Z",
        fill: "currentColor"
      }
    )
  }
);
const CloseIcon = ({ height = 16, width = 16 }) => /* @__PURE__ */ jsx(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    x: "0px",
    y: "0px",
    width,
    height,
    viewBox: "0 0 16 16",
    fill: "currentColor",
    children: /* @__PURE__ */ jsx(
      "path",
      {
        d: "M12.6667 4.27331L11.7267 3.33331L8.00004 7.05998L4.27337 3.33331L3.33337 4.27331L7.06004 7.99998L3.33337 11.7266L4.27337 12.6666L8.00004 8.93998L11.7267 12.6666L12.6667 11.7266L8.94004 7.99998L12.6667 4.27331Z",
        fill: "currentColor"
      }
    )
  }
);
const DotsLoader = ({
  className,
  size: size2 = "medium",
  speed = 0.2,
  theme: customTheme
}) => {
  const theme2 = useComponentTheme("dotsLoader", customTheme);
  return /* @__PURE__ */ jsx(motion.div, { className: twMerge(theme2.base, className), children: [...Array(3)].map((_, i) => /* @__PURE__ */ jsx(
    motion.div,
    {
      className: twMerge(theme2.dot, theme2.sizes[size2]),
      animate: {
        opacity: [0, 1, 0],
        scale: [1, 2, 2, 1, 1]
      },
      transition: {
        duration: speed * 4,
        ease: "easeInOut",
        times: [0, 0.2, 0.5, 0.8, 1],
        repeat: Infinity,
        repeatDelay: speed,
        delay: speed * i
      }
    },
    i
  )) });
};
const RefreshIcon = () => /* @__PURE__ */ jsx(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 32 32",
    width: "64px",
    height: "64px",
    children: /* @__PURE__ */ jsx(
      "path",
      {
        d: "M 16 4 C 10.886719 4 6.617188 7.160156 4.875 11.625 L 6.71875 12.375 C 8.175781 8.640625 11.710938 6 16 6 C 19.242188 6 22.132813 7.589844 23.9375 10 L 20 10 L 20 12 L 27 12 L 27 5 L 25 5 L 25 8.09375 C 22.808594 5.582031 19.570313 4 16 4 Z M 25.28125 19.625 C 23.824219 23.359375 20.289063 26 16 26 C 12.722656 26 9.84375 24.386719 8.03125 22 L 12 22 L 12 20 L 5 20 L 5 27 L 7 27 L 7 23.90625 C 9.1875 26.386719 12.394531 28 16 28 C 21.113281 28 25.382813 24.839844 27.125 20.375 Z",
        fill: "currentColor"
      }
    )
  }
);
const SelectInputChip = ({
  option,
  disabled,
  clearable,
  className,
  maxLength = 20,
  closeIcon = /* @__PURE__ */ jsx(CloseIcon, {}),
  onTagKeyDown,
  onSelectedChange,
  theme: customTheme
}) => {
  const origLabel = option.inputLabel || option.children;
  const label = typeof origLabel === "string" ? ellipsize(origLabel, maxLength) : origLabel;
  const { selectInput: theme2 } = useComponentTheme(
    "select",
    customTheme
  );
  return /* @__PURE__ */ jsxs(
    "span",
    {
      className: twMerge(
        theme2.chip.base,
        theme2.chip.hover,
        theme2.chip.focused,
        theme2.chip.disabled,
        className,
        "select-input-chip"
      ),
      title: origLabel,
      tabIndex: -1,
      onKeyDown: (event) => onTagKeyDown(event, option),
      children: [
        label,
        !disabled && clearable && /* @__PURE__ */ jsx(
          "button",
          {
            type: "button",
            onClick: () => onSelectedChange(option),
            className: twMerge(theme2.chip.removeButton),
            children: closeIcon
          }
        )
      ]
    }
  );
};
const horiztonalArrowKeys = ["ArrowLeft", "ArrowRight"];
const verticalArrowKeys = ["ArrowUp", "ArrowDown"];
const actionKeys = [...verticalArrowKeys, "Enter", "Escape"];
const SelectInput = ({
  reference,
  autoFocus,
  selectedOption,
  disabled,
  placeholder,
  filterable,
  id: id2,
  name,
  className,
  activeClassName,
  inputText,
  required,
  loading,
  clearable,
  multiple,
  refreshable,
  error,
  menuDisabled,
  menuOpen,
  size: size2,
  refreshIcon = /* @__PURE__ */ jsx(RefreshIcon, {}),
  closeIcon = /* @__PURE__ */ jsx(CloseIcon, {}),
  expandIcon = /* @__PURE__ */ jsx(DownArrowIcon$1, {}),
  loadingIcon = /* @__PURE__ */ jsx(DotsLoader, { size: "small" }),
  closeOnSelect,
  onSelectedChange,
  onKeyDown,
  onKeyUp,
  onExpandClick,
  onInputChange,
  onFocus,
  onBlur,
  onRefresh,
  onPaste,
  onClear,
  chip = /* @__PURE__ */ jsx(SelectInputChip, {}),
  theme: customTheme
}) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const { selectInput: theme2 } = useComponentTheme(
    "select",
    customTheme
  );
  const containerRef = useRef(null);
  const inputRef = useRef(null);
  const hasValue = multiple && (selectedOption == null ? void 0 : selectedOption.length) > 0 || !multiple && selectedOption;
  const placeholderText = hasValue ? "" : placeholder;
  const showClear = clearable && !disabled && hasValue;
  useImperativeHandle(reference, () => ({
    containerRef,
    inputRef,
    focus: () => focusInput()
  }));
  const inputTextValue = useMemo(() => {
    if (!inputText && hasValue) {
      if (!Array.isArray(selectedOption)) {
        const singleOption = selectedOption;
        if (!singleOption.inputLabel) {
          return singleOption.children;
        }
      }
      return "";
    }
    return inputText;
  }, [hasValue, inputText, selectedOption]);
  const onClearValues = useCallback(
    (event) => {
      if (closeOnSelect) {
        event.stopPropagation();
      }
      onSelectedChange(null);
      onClear == null ? void 0 : onClear();
    },
    [onSelectedChange, closeOnSelect, onClear]
  );
  const focusInput = useCallback(() => {
    const input = inputRef.current;
    if (input) {
      if (input.value) {
        const len = input.value.length;
        setTimeout(() => input.setSelectionRange(len, len));
        input.focus();
      } else {
        input.focus();
      }
    }
  }, []);
  const onInputFocus = useCallback(
    (event) => {
      if (!multiple && filterable && selectedOption) {
        event.preventDefault();
        event.stopPropagation();
        focusInput();
      }
      onFocus == null ? void 0 : onFocus(event);
    },
    [filterable, focusInput, multiple, onFocus, selectedOption]
  );
  const onContainerClick = useCallback(
    (event) => {
      if (!disabled) {
        focusInput();
      }
    },
    [disabled, focusInput]
  );
  const removeLastValue = useCallback(() => {
    if (multiple) {
      const selectedOptions = selectedOption;
      onSelectedChange(selectedOptions[selectedOptions.length - 1]);
    } else {
      onSelectedChange(null);
    }
  }, [multiple, onSelectedChange, selectedOption]);
  const onInputKeyDown = useCallback(
    (event) => {
      const key = event.key;
      const isActionKey = actionKeys.includes(key);
      if (isActionKey) {
        event.preventDefault();
        event.stopPropagation();
      }
      if (clearable && key === "Backspace" && hasValue) {
        if (!multiple || multiple && !inputText) {
          event.preventDefault();
          event.stopPropagation();
          removeLastValue();
        }
      }
      onKeyDown == null ? void 0 : onKeyDown(event);
    },
    [clearable, hasValue, inputText, multiple, onKeyDown, removeLastValue]
  );
  const onInputKeyUp = useCallback(
    (event) => {
      const key = event.key;
      const isActionKey = actionKeys.includes(key);
      const isHorzKey = horiztonalArrowKeys.includes(key);
      if (!filterable && !isActionKey || isHorzKey) {
        event.preventDefault();
        event.stopPropagation();
      } else {
        onKeyUp == null ? void 0 : onKeyUp(event);
      }
    },
    [filterable, onKeyUp]
  );
  const onChange = useCallback(
    (event) => {
      if (filterable) {
        onInputChange(event);
      }
    },
    [filterable, onInputChange]
  );
  const onTagKeyDown = useCallback(
    (event, option) => {
      const key = event.key;
      if (key === "Backspace" && !disabled && clearable) {
        onSelectedChange(option);
      }
    },
    [clearable, disabled, onSelectedChange]
  );
  const renderPrefix = useCallback(() => {
    var _a2, _b2;
    if (multiple) {
      const multipleOptions = selectedOption;
      if (multipleOptions == null ? void 0 : multipleOptions.length) {
        return /* @__PURE__ */ jsx(
          "div",
          {
            className: cn(theme2.prefix, "select-input-value", {
              [(_a2 = theme2.multiple) == null ? void 0 : _a2.prefix]: multiple
            }),
            children: multipleOptions.map((option) => /* @__PURE__ */ jsx(
              CloneElement,
              {
                element: chip,
                option,
                clearable,
                disabled,
                closeIcon,
                onSelectedChange,
                onTagKeyDown
              },
              option.value
            ))
          }
        );
      }
    } else {
      const singleOption = selectedOption;
      if ((singleOption == null ? void 0 : singleOption.inputLabel) && !inputText) {
        return /* @__PURE__ */ jsx(
          "div",
          {
            className: cn(
              theme2.prefix,
              (_b2 = theme2.single) == null ? void 0 : _b2.prefix,
              "select-input-value"
            ),
            children: singleOption == null ? void 0 : singleOption.inputLabel
          }
        );
      }
    }
    return null;
  }, [
    chip,
    clearable,
    closeIcon,
    disabled,
    inputText,
    multiple,
    onSelectedChange,
    onTagKeyDown,
    selectedOption,
    theme2.multiple,
    theme2.prefix,
    theme2.single
  ]);
  return /* @__PURE__ */ jsx("div", { className: cn(theme2.container), children: /* @__PURE__ */ jsxs(
    "div",
    {
      ref: containerRef,
      className: cn(
        theme2.base,
        theme2.size[size2],
        {
          [theme2.disabled]: disabled,
          [theme2.unfilterable]: !filterable,
          [theme2.error]: error
        },
        ...menuOpen ? [activeClassName, theme2.open] : [],
        className
      ),
      onClick: onContainerClick,
      children: [
        /* @__PURE__ */ jsxs(
          "div",
          {
            className: cn(theme2.inputContainer, {
              [(_a = theme2.multiple) == null ? void 0 : _a.inputContainer]: multiple,
              [(_b = theme2.single) == null ? void 0 : _b.inputContainer]: !multiple
            }),
            onClick: onInputFocus,
            children: [
              renderPrefix(),
              /* @__PURE__ */ jsx(
                InlineInput,
                {
                  ref: inputRef,
                  id: id2,
                  name,
                  disabled,
                  required,
                  autoFocus,
                  placeholder: placeholderText,
                  inputClassName: cn(
                    theme2.input,
                    theme2.placeholder,
                    "select-input-input"
                  ),
                  value: inputTextValue,
                  autoCorrect: "off",
                  spellCheck: "false",
                  autoComplete: "off",
                  onKeyDown: onInputKeyDown,
                  onKeyUp: onInputKeyUp,
                  onChange,
                  onFocus: onInputFocus,
                  onBlur,
                  onPaste
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ jsxs("div", { className: (_c = theme2.suffix) == null ? void 0 : _c.container, children: [
          refreshable && !loading && /* @__PURE__ */ jsx(
            "button",
            {
              type: "button",
              title: "Refresh Options",
              disabled,
              className: cn(
                (_d = theme2.suffix) == null ? void 0 : _d.button,
                (_e = theme2.suffix) == null ? void 0 : _e.refresh,
                "select-input-refresh"
              ),
              onClick: onRefresh,
              children: refreshIcon
            }
          ),
          loading && /* @__PURE__ */ jsx("div", { className: (_f = theme2.suffix) == null ? void 0 : _f.loader, children: loadingIcon }),
          showClear && /* @__PURE__ */ jsx(
            "button",
            {
              type: "button",
              title: "Clear selection",
              disabled,
              className: cn(
                (_g = theme2.suffix) == null ? void 0 : _g.button,
                (_h = theme2.suffix) == null ? void 0 : _h.close,
                "select-input-clear"
              ),
              onClick: onClearValues,
              children: closeIcon
            }
          ),
          !menuDisabled && /* @__PURE__ */ jsx(
            "button",
            {
              type: "button",
              title: "Toggle options menu",
              disabled,
              className: cn(
                (_i = theme2.suffix) == null ? void 0 : _i.button,
                (_j = theme2.suffix) == null ? void 0 : _j.expand,
                "select-input-toggle"
              ),
              onClick: onExpandClick,
              tabIndex: -1,
              children: expandIcon
            }
          )
        ] })
      ]
    }
  ) });
};
const baseTheme$o = {
  base: "flex flex-nowrap items-center box-border border rounded",
  container: "relative",
  inputContainer: "flex-wrap flex items-center overflow-hidden flex-1 max-w-full [&>div]:max-w-full [&_.invisible]:text-ellipsis [&_.invisible]:overflow-hidden",
  input: "p-0 bg-transparent text-ellipsis align-middle max-w-full read-only:cursor-not-allowed focus:outline-none disabled:text-disabled",
  placeholder: "",
  prefix: "overflow-hidden whitespace-nowrap text-ellipsis",
  suffix: {
    container: "flex items-center justify-center",
    button: "disabled:cursor-not-allowed",
    refresh: "mr-1.5 [&>svg]:w-4 [&>svg]:h-4 [&>svg]:fill-text-secondary",
    loader: "mr-2.5",
    close: "mr-1.5 [&>svg]:w-4 [&>svg]:h-4 [&>svg]:fill-text-secondary",
    expand: "[&>svg]:w-4 [&>svg]:h-4 [&>svg]:fill-text-secondary"
  },
  disabled: "cursor-not-allowed text-disabled hover:after:content-none",
  unfilterable: "caret-transparent",
  error: "border border-solid",
  open: "rounded rounded-ee-none rounded-es-none",
  single: {
    prefix: "overflow-hidden whitespace-nowrap text-ellipsis max-w-full",
    inputContainer: "flex-nowrap",
    input: "max-w-full"
  },
  multiple: {
    prefix: "contents",
    inputContainer: "flex-wrap"
  },
  chip: {
    base: "cursor-pointer flex text-sm leading-none box-border mr-1 px-1 py-1 rounded border-solid border-transparent",
    hover: "",
    focused: "focused:border-transparent focused:outline-none",
    disabled: "disabled:cursor-not-allowed",
    removeButton: "cursor-pointer leading-[0] ml-1 p-0 border-0 [&>svg]:w-3 [&>svg]:h-3 [&>svg]:align-baseline [&>svg]:pointer-events-none"
  },
  size: {
    small: "py-1 px-2 text-sm min-h-8",
    medium: "py-2 px-3 text-base min-h-[35px]",
    large: "py-2 px-3 text-lg min-h-[42px]"
  }
};
const selectInputTheme = {
  ...baseTheme$o,
  base: [
    baseTheme$o.base,
    "bg-panel text-text-primary border-panel-accent border-solid hover:border-panel-accent light:hover:border-panel-accent",
    "hover:after:bg-[radial-gradient(circle,_#105EFF_0%,_#105EFF_36%,_#242433_100%)] light:hover:after:bg-[radial-gradient(circle,_#105EFF_0%,_#105EFF_36%,_#E6E6F0_100%)]",
    "focus-within:after:bg-[radial-gradient(circle,_#93B6FF_0%,_#105EFF_36%,_#3D3D4D_90%,_#242433_100%)] light:focus-within:after:bg-[radial-gradient(circle,_#105EFF_10%,_#93B6FF_36%,_#E6E6F0_90%)]",
    'hover:after:content-[""] hover:after:absolute hover:after:mx-1 hover:after:h-px after:z-[2] hover:after:rounded hover:after:-bottom-[0px] hover:after:inset-x-0.5',
    'focus-within:after:content-[""] focus-within:after:absolute focus-within:after:mx-0 focus-within:after:h-px after:z-[2] focus-within:after:rounded focus-within:after:-bottom-[0px] focus-within:after:inset-x-0.5'
  ].join(" "),
  placeholder: [
    baseTheme$o.placeholder,
    "placeholder:text-secondary-content"
  ].join(" "),
  disabled: [
    baseTheme$o.disabled,
    "text-text-secondary/40 border-surface light:hover:border-surface"
  ].join(" "),
  error: [baseTheme$o.error, "border-error light:border-error/20"].join(" "),
  suffix: {
    ...baseTheme$o.suffix,
    button: [baseTheme$o.suffix.button, "hover:cursor-pointer"].join(" ")
  },
  chip: {
    ...baseTheme$o.chip,
    base: [
      baseTheme$o.chip.base,
      "[&>svg]:fill-text-primary disabled:[&>svg]:fill-text-secondary/40"
    ].join(" "),
    hover: [baseTheme$o.chip.hover, "hover:brightness-150"].join(" "),
    focused: [baseTheme$o.chip.focused, "border-panel-accent"].join(" "),
    removeButton: [
      baseTheme$o.chip.removeButton,
      "[&>svg]:fill-text-primary disabled:[&>svg]:fill-text-secondary/40"
    ].join(" ")
  }
};
const cssVarsSelectInputTheme = {
  ...baseTheme$o,
  base: [
    baseTheme$o.base,
    "bg-[var(--select-input-background)] p-[var(--select-input-spacing)] rounded-[var(--select-input-border-radius)] [border:_var(--select-input-border)]"
  ].join(" "),
  disabled: [
    baseTheme$o.disabled,
    "text-[var(--select-input-disabled-color)]"
  ].join(" "),
  placeholder: [
    baseTheme$o.placeholder,
    "text-[var(--select-input-placeholder-color)]"
  ].join(" "),
  error: [baseTheme$o.error, "border-[var(--select-input-error)]"].join(" "),
  input: [baseTheme$o.input, "text-[var(--select-input-color)]"].join(" "),
  suffix: {
    ...baseTheme$o.suffix,
    close: [
      baseTheme$o.suffix.close,
      "[&>svg]:fill-[var(--select-input-icon-color)]"
    ].join(" "),
    expand: [
      baseTheme$o.suffix.expand,
      "[&>svg]:fill-[var(--select-input-icon-color)]"
    ].join(" ")
  },
  chip: {
    ...baseTheme$o.chip,
    base: [
      baseTheme$o.chip.base,
      "bg-[var(--select-chip-background)] text-[var(--select-chip-color)] [border:_var(--select-chip-border)]"
    ].join(" "),
    removeButton: [
      baseTheme$o.chip.removeButton,
      "[&>svg]:fill-[var(--select-chip-icon-color)]"
    ].join(" ")
  }
};
const CheckIcon = ({ className }) => /* @__PURE__ */ jsx(
  "svg",
  {
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    className,
    children: /* @__PURE__ */ jsx("g", { children: /* @__PURE__ */ jsx(
      "path",
      {
        d: "M5.86339 10.5831L3.08339 7.80312L2.13672 8.74312L5.86339 12.4698L13.8634 4.46979L12.9234 3.52979L5.86339 10.5831Z",
        fill: "currentColor"
      }
    ) })
  }
);
const SelectMenu = ({
  style,
  disabled,
  createable,
  renderCreateOption,
  selectedOption,
  options,
  loading,
  className,
  index,
  filterable,
  groups,
  multiple,
  inputSearchText,
  size: size2,
  checkIcon,
  onSelectedChange,
  theme: customTheme
}) => {
  const trimmedText = inputSearchText.trim();
  const checkOptionSelected = useCallback(
    (option) => {
      if (multiple) {
        if (Array.isArray(selectedOption)) {
          return selectedOption.find((o) => o.value === option.value);
        }
        return false;
      }
      return (selectedOption == null ? void 0 : selectedOption.value) === option.value;
    },
    [selectedOption, multiple]
  );
  const { selectMenu: theme2 } = useComponentTheme(
    "select",
    customTheme
  );
  const onCreateOption = useCallback(() => {
    onSelectedChange({
      value: trimmedText.toLowerCase(),
      children: trimmedText.toLowerCase()
    });
  }, [onSelectedChange, trimmedText]);
  const renderListItems = useCallback(
    (items, group) => items.map((o, i) => {
      var _a, _b, _c, _d, _e, _f;
      return /* @__PURE__ */ jsxs(
        ListItem,
        {
          className: cn(
            (_a = theme2.option) == null ? void 0 : _a.base,
            (_b = theme2.option) == null ? void 0 : _b.hover,
            (_c = theme2.size) == null ? void 0 : _c[size2],
            {
              [(_d = theme2.option) == null ? void 0 : _d.selected]: checkOptionSelected(o),
              [(_e = theme2.option) == null ? void 0 : _e.active]: index === i + ((group == null ? void 0 : group.offset) || 0),
              [(_f = theme2.option) == null ? void 0 : _f.disabled]: disabled || o.disabled
            }
          ),
          contentClassName: theme2.option.content,
          onClick: (event) => {
            event.preventDefault();
            event.stopPropagation();
            onSelectedChange(o);
          },
          disabled: o.disabled,
          children: [
            o.menuLabel ? o.menuLabel : /* @__PURE__ */ jsx(
              Highlighter,
              {
                searchWords: [inputSearchText],
                autoEscape: true,
                textToHighlight: o.children
              }
            ),
            Boolean(multiple && checkOptionSelected(o)) && (checkIcon ?? /* @__PURE__ */ jsx(CheckIcon, { className: theme2.option.checkIcon }))
          ]
        },
        `${group == null ? void 0 : group.name}-${o.value}`
      );
    }),
    [
      checkIcon,
      checkOptionSelected,
      disabled,
      index,
      inputSearchText,
      size2,
      multiple,
      onSelectedChange,
      theme2.option,
      theme2.size
    ]
  );
  return /* @__PURE__ */ jsx(
    motion.div,
    {
      style,
      className: cn(theme2.base, className, "select-menu"),
      initial: {
        opacity: 0,
        y: -20,
        pointerEvents: "none"
      },
      animate: {
        opacity: 1,
        y: 0,
        pointerEvents: "auto",
        transition: {
          when: "beforeChildren"
        }
      },
      exit: {
        y: -14,
        opacity: 0,
        pointerEvents: "none",
        transition: { duration: 0.3, ease: "anticipate" }
      },
      children: /* @__PURE__ */ jsxs(List, { children: [
        (options == null ? void 0 : options.length) === 0 && createable && trimmedText && !loading && (renderCreateOption ? renderCreateOption({
          text: trimmedText,
          onCreate: onCreateOption
        }) : /* @__PURE__ */ jsxs(
          ListItem,
          {
            className: "select-menu-create-option",
            onClick: (event) => {
              event.preventDefault();
              event.stopPropagation();
              onCreateOption();
            },
            children: [
              'Create option "',
              trimmedText.toLowerCase(),
              '"'
            ]
          }
        )),
        (options == null ? void 0 : options.length) === 0 && !createable && filterable === true && trimmedText && !loading && /* @__PURE__ */ jsxs(ListItem, { className: "select-menu-empty-search", children: [
          'No option(s) for "',
          trimmedText,
          '"'
        ] }),
        (options == null ? void 0 : options.length) === 0 && !createable && filterable === true && !trimmedText && !loading && /* @__PURE__ */ jsx(ListItem, { className: "select-menu-empty", children: "No option(s) available" }),
        groups.hasGroups ? groups.groups.map((g) => /* @__PURE__ */ jsx(Fragment, { children: g.name === "undefined" ? renderListItems(g.items, g) : /* @__PURE__ */ jsxs(
          ListItem,
          {
            className: cn(theme2.groupItem.base, "select-menu-group"),
            children: [
              /* @__PURE__ */ jsx(
                "h3",
                {
                  className: cn(
                    theme2.groupItem.title,
                    theme2.groupItem.size[size2],
                    "select-menu-group-header"
                  ),
                  children: g.name
                }
              ),
              /* @__PURE__ */ jsx(List, { children: renderListItems(g.items, g) })
            ]
          }
        ) }, g.name)) : renderListItems(options)
      ] })
    }
  );
};
const baseTheme$n = {
  base: "border border-solid rounded-b-md text-center will-change-[transform,opacity] min-w-[112px] max-h-[300px] overflow-y-auto text-left box-border",
  groupItem: {
    base: "p-0 border-0 first:pt-2 last:pb-2",
    title: "font-bold uppercase m-0 px-1.5 py-2.5",
    size: {
      small: "px-2.5 text-sm",
      medium: "px-3 text-sm",
      large: "px-3.5 text-base"
    }
  },
  option: {
    base: "flex-1 whitespace-break-spaces break-words py-1.5 px-2.5",
    hover: "",
    selected: "",
    active: "",
    disabled: "",
    checkIcon: "ml-1",
    content: "flex flex-row justify-between"
  },
  size: {
    small: "px-2.5 py-1.5 text-sm",
    medium: "px-4 py-2 text-base",
    large: "px-5 py-3 text-lg"
  }
};
const selectMenuTheme = {
  ...baseTheme$n,
  base: [
    baseTheme$n.base,
    "bg-panel text-text-primary border-panel-accent border-t-transparent"
  ].join(" "),
  groupItem: {
    ...baseTheme$n.groupItem,
    title: [baseTheme$n.groupItem.title, "text-text-primary"].join(" ")
  },
  option: {
    ...baseTheme$n.option,
    base: [baseTheme$n.option.base, "text-text-secondary "].join(" "),
    hover: [
      baseTheme$n.option.hover,
      "hover:bg-vulcan hover:text-mystic light:hover:bg-vulcan/5 light:hover:text-text-secondary"
    ].join(" "),
    active: [baseTheme$n.option.active, "bg-vulcan hover:text-mystic"].join(" "),
    selected: [baseTheme$n.option.selected, "text-primary-active"].join(" ")
  }
};
const cssVarsSelectMenuTheme = {
  ...baseTheme$n,
  base: [
    baseTheme$n.base,
    "bg-[var(--select-menu-background)] [border:_var(--select-menu-border)] rounded-[var(--select-menu-border-radius)]"
  ].join(" "),
  groupItem: {
    ...baseTheme$n.groupItem,
    title: [baseTheme$n.groupItem.title, "text-gray-600"].join(" ")
  },
  option: {
    ...baseTheme$n.option,
    base: [
      baseTheme$n.option.base,
      "text-[var(--select-menu-item-color)] [padding:_var(--select-menu-item-spacing)]"
    ].join(" "),
    hover: [
      baseTheme$n.option.hover,
      "hover:bg-[var(--select-menu-item-active-background)] hover:text-[var(--select-menu-item-active-color)]"
    ].join(" "),
    active: [
      baseTheme$n.option.active,
      "hover:bg-[var(--select-menu-item-active-background)] text-[var(--select-menu-item-active-color)]"
    ].join(" "),
    selected: [
      baseTheme$n.option.selected,
      "bg-[var(--select-menu-item-selected-background)] text-[var(--select-menu-item-selected-color)]"
    ].join(" ")
  }
};
function getGroups(options) {
  if (!(options == null ? void 0 : options.length)) {
    return {
      groups: [],
      itemsCount: 0,
      hasGroups: false
    };
  }
  const groupsMap = options.reduce((acc, option) => {
    if (!acc[option.group]) {
      acc[option.group] = [];
    }
    acc[option.group].push(option);
    return acc;
  }, {});
  const groupNames = Object.keys(groupsMap);
  if (groupNames.length === 1 && groupNames[0] === "undefined") {
    return {
      groups: [],
      itemsCount: options.length,
      hasGroups: false
    };
  }
  let index = 0;
  const groups = groupNames.map((key, i) => ({
    offset: 0,
    index: i,
    items: groupsMap[key],
    name: key
  }));
  for (const group of groups) {
    group.offset = index;
    for (const _item of group.items) {
      index++;
    }
  }
  return {
    groups,
    itemsCount: (groups == null ? void 0 : groups.length) !== 0 ? groups.reduce((acc, g) => acc + g.items.length, 0) : options.length,
    hasGroups: (groups == null ? void 0 : groups.length) !== 0
  };
}
const SelectOption = ({ children }) => children;
function createOptions(children) {
  const arr = Children.toArray(children);
  return arr.filter((child) => {
    var _a;
    return ((_a = child.type) == null ? void 0 : _a.name) === SelectOption.name;
  }).map((child) => child.props);
}
const useWidth = (ref, overlayRef) => {
  const [menuWidth, setMenuWidth] = useState(0);
  const updateWidthInternal = useCallback(() => {
    if (ref == null ? void 0 : ref.current) {
      const { width } = ref.current.getBoundingClientRect();
      if (width !== menuWidth) {
        setMenuWidth(width);
        return true;
      }
    }
  }, [ref, menuWidth]);
  useEffect(() => {
    updateWidthInternal();
  }, [updateWidthInternal]);
  useLayoutEffect(() => {
    if (!(ref == null ? void 0 : ref.current)) {
      return;
    }
    const resizeObserver = new ResizeObserver(() => {
      const { width } = ref.current.getBoundingClientRect();
      setMenuWidth(width);
    });
    resizeObserver.observe(ref.current);
    return () => resizeObserver.disconnect();
  }, [ref]);
  const updateWidth = useCallback(() => {
    var _a;
    if (updateWidthInternal()) {
      (_a = overlayRef.current) == null ? void 0 : _a.updatePosition();
    }
  }, [updateWidthInternal, overlayRef]);
  return [menuWidth, updateWidth];
};
const keyNameToCode = {
  Backspace: 8,
  Tab: 9,
  Enter: 13,
  Shift: 16,
  Ctrl: 17,
  Alt: 18,
  "Pause/Break": 19,
  "Caps Lock": 20,
  Esc: 27,
  Space: 32,
  "Page Up": 33,
  "Page Down": 34,
  End: 35,
  Home: 36,
  Left: 37,
  Up: 38,
  Right: 39,
  Down: 40,
  Insert: 45,
  Delete: 46,
  "0": 48,
  "1": 49,
  "2": 50,
  "3": 51,
  "4": 52,
  "5": 53,
  "6": 54,
  "7": 55,
  "8": 56,
  "9": 57,
  A: 65,
  B: 66,
  C: 67,
  D: 68,
  E: 69,
  F: 70,
  G: 71,
  H: 72,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  N: 78,
  O: 79,
  P: 80,
  Q: 81,
  R: 82,
  S: 83,
  T: 84,
  U: 85,
  V: 86,
  W: 87,
  X: 88,
  Y: 89,
  Z: 90,
  Windows: 91,
  "Right Click": 93,
  "Numpad 0": 96,
  "Numpad 1": 97,
  "Numpad 2": 98,
  "Numpad 3": 99,
  "Numpad 4": 100,
  "Numpad 5": 101,
  "Numpad 6": 102,
  "Numpad 7": 103,
  "Numpad 8": 104,
  "Numpad 9": 105,
  "Numpad *": 106,
  "Numpad +": 107,
  "Numpad -": 109,
  "Numpad .": 110,
  "Numpad /": 111,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  "Num Lock": 144,
  "Scroll Lock": 145,
  "My Computer": 182,
  "My Calculator": 183,
  ";": 186,
  "=": 187,
  ",": 188,
  "-": 189,
  ".": 190,
  "/": 191,
  "`": 192,
  "[": 219,
  "\\": 220,
  "]": 221,
  "'": 222
};
const Select = ({
  id: id2,
  name,
  autoFocus,
  clearable = true,
  tabToSelect,
  filterable = true,
  menuPlacement = "bottom-start",
  closeOnSelect = true,
  menuDisabled = false,
  refreshable = false,
  placeholder,
  disabled,
  createable,
  selectOnPaste,
  selectOnKeys = ["Enter"],
  loading,
  multiple,
  error,
  className,
  containerClassName,
  activeClassName,
  children,
  value,
  defaultFilterValue,
  required,
  clearOnBlur = true,
  size: size2 = "medium",
  input = /* @__PURE__ */ jsx(SelectInput, {}),
  menu = /* @__PURE__ */ jsx(SelectMenu, {}),
  onRefresh,
  onChange,
  onClear,
  onBlur: onInputBlur,
  onFocus: onInputFocus,
  onInputKeydown,
  onInputKeyUp,
  onOptionsChange,
  onInputChange,
  searchOptions,
  onOpenMenu,
  onCloseMenu
}) => {
  var _a, _b;
  const overlayRef = useRef(null);
  const inputRef = useRef(null);
  const [internalValue, setInternalValue] = useState(
    value
  );
  const [open, setOpen] = useState(false);
  const [index, setIndex] = useState(-1);
  const internalId = useId(id2);
  const [menuWidth, updateMenuWidth] = useWidth(
    (_a = inputRef.current) == null ? void 0 : _a.containerRef,
    overlayRef
  );
  const [options, setOptions] = useState(
    createOptions(children)
  );
  useEffect(() => {
    const opts = createOptions(children);
    if (!isEqual(opts, options)) {
      setOptions(opts);
    }
  }, [children, options]);
  const {
    result: fuseResult,
    keyword,
    search,
    resetSearch
  } = useFuzzy(options, {
    keys: ["children", "group"],
    ...searchOptions,
    getFn: menuDisabled ? () => "" : searchOptions == null ? void 0 : searchOptions.getFn
  });
  const result = filterable === "async" ? options : fuseResult;
  useEffect(() => {
    if (keyword && keyword.length > 0) {
      if (index === -1 || !result[index]) {
        setIndex(0);
      }
    }
  }, [keyword, index, setIndex, result]);
  useEffect(() => {
    if (!value && defaultFilterValue) {
      search(defaultFilterValue);
    }
  }, []);
  const groups = useMemo(() => getGroups(result), [result]);
  const selectedOption = useMemo(() => {
    if (multiple) {
      if (internalValue || internalValue === "") {
        return options.filter(
          (o) => internalValue.includes(o.value)
        );
      }
      return [];
    } else if (internalValue || internalValue === "") {
      return options.find((o) => o.value === internalValue);
    }
    return null;
  }, [options, multiple, internalValue]);
  useLayoutEffect(() => {
    var _a2;
    updateMenuWidth();
    (_a2 = overlayRef == null ? void 0 : overlayRef.current) == null ? void 0 : _a2.updatePosition();
  }, [internalValue, updateMenuWidth]);
  useEffect(() => {
    if (!isEqual(value, internalValue)) {
      setInternalValue(value);
    }
  }, [value, internalValue]);
  useEffect(() => {
    if (internalValue && createable) {
      if (multiple) {
        for (const v of internalValue) {
          const newOptions = [];
          const has = options.find((o) => o.value === v);
          if (!has) {
            newOptions.push({
              children: v,
              value: v
            });
          }
          if (newOptions.length) {
            const updatedOptions = [...options, ...newOptions];
            onOptionsChange == null ? void 0 : onOptionsChange(updatedOptions);
          }
        }
      } else {
        const has = options.find((o) => o.value === internalValue);
        if (!has) {
          const updatedOptions = [
            ...options,
            {
              children: internalValue,
              value: internalValue
            }
          ];
          onOptionsChange == null ? void 0 : onOptionsChange(updatedOptions);
        }
      }
    }
  }, [createable, internalValue, multiple, options, onOptionsChange]);
  const resetInput = useCallback(() => {
    if (clearOnBlur) {
      setIndex(-1);
      resetSearch();
    }
  }, [clearOnBlur, resetSearch]);
  const resetSelect = useCallback(() => {
    setOpen(false);
    resetInput();
  }, [resetInput]);
  const onArrowUpKeyUp = useCallback(
    (event) => {
      event.preventDefault();
      setIndex(Math.max(index - 1, -1));
    },
    [index]
  );
  const onArrowDownKeyUp = useCallback(
    (event) => {
      event.preventDefault();
      setIndex(Math.min(index + 1, groups.itemsCount - 1));
    },
    [groups.itemsCount, index]
  );
  const onInputFocused = useCallback(
    (event) => {
      if (!disabled && !menuDisabled) {
        setOpen(true);
      }
      onInputFocus == null ? void 0 : onInputFocus(event);
    },
    [disabled, menuDisabled, onInputFocus]
  );
  const onInputExpanded = useCallback(
    (event) => {
      event.stopPropagation();
      if (!disabled && !menuDisabled) {
        setOpen(!open);
      }
    },
    [disabled, menuDisabled, open]
  );
  const onInputChanged = useCallback(
    (event) => {
      const value2 = event.target.value;
      search(value2);
      onInputChange == null ? void 0 : onInputChange(event);
    },
    [onInputChange, search]
  );
  const toggleSelectedMultiOption = useCallback(
    (selections) => {
      const newOptions = [];
      let newSelectedOptions = selectedOption;
      if (!selections) {
        newSelectedOptions = [];
      } else {
        if (!Array.isArray(selections)) {
          selections = [selections];
        }
        for (const next of selections) {
          const hasOption = options.find((o) => o.value === next.value);
          const has = (internalValue || []).includes(next.value);
          if (has) {
            newSelectedOptions = newSelectedOptions.filter(
              (o) => o.value !== next.value
            );
          } else {
            newSelectedOptions = [...newSelectedOptions, next];
          }
          if (!hasOption && createable) {
            newOptions.push(next);
          }
        }
      }
      return {
        newValue: newSelectedOptions.map((o) => o.value),
        newSelectedOptions,
        newOptions
      };
    },
    [createable, internalValue, options, selectedOption]
  );
  const toggleSelectedOption = useCallback(
    (option) => {
      var _a2;
      let newValue;
      if (multiple) {
        const result2 = toggleSelectedMultiOption(option);
        newValue = result2.newValue;
        if ((_a2 = result2.newOptions) == null ? void 0 : _a2.length) {
          onOptionsChange == null ? void 0 : onOptionsChange([...options, ...result2.newOptions]);
        }
        if (closeOnSelect) {
          setOpen(false);
        }
      } else {
        const singleOption = option;
        const hasOption = options.find((o) => o.value === (singleOption == null ? void 0 : singleOption.value));
        newValue = singleOption == null ? void 0 : singleOption.value;
        const hasValue = newValue !== void 0 && newValue !== null;
        if (createable && !hasOption && hasValue) {
          onOptionsChange == null ? void 0 : onOptionsChange([...options, singleOption]);
        }
        if (closeOnSelect && hasOption) {
          setOpen(false);
        }
      }
      setInternalValue(newValue);
      if (!multiple || keyword) {
        resetInput();
      }
      onChange == null ? void 0 : onChange(newValue);
    },
    [
      keyword,
      closeOnSelect,
      createable,
      multiple,
      onChange,
      onOptionsChange,
      options,
      resetInput,
      toggleSelectedMultiOption
    ]
  );
  const onAddSelection = useCallback(
    (event) => {
      const inputElement = event.target;
      let inputValue = inputElement.value.trim();
      inputValue = inputValue.charAt(inputValue.length - 1) === event.key ? inputValue.slice(0, -1) : inputValue;
      if (index === -1 && createable && !inputValue) {
        return;
      }
      if (index > -1 || createable) {
        let newSelection;
        const hasSelection = index > -1 && result[index];
        if (createable && !hasSelection) {
          newSelection = {
            value: inputValue,
            children: inputValue
          };
        } else {
          newSelection = result[index];
        }
        if (newSelection && (!menuDisabled || !value.includes(newSelection.value))) {
          toggleSelectedOption(newSelection);
        } else if (menuDisabled && value.includes(newSelection.value)) {
          resetInput();
        }
      }
    },
    [
      createable,
      index,
      menuDisabled,
      resetInput,
      result,
      toggleSelectedOption,
      value
    ]
  );
  const onTabKeyDown = useCallback(
    (event) => {
      const inputElement = event.target;
      const inputValue = inputElement.value.trim();
      if (event.shiftKey) {
        setOpen(false);
        return;
      }
      if (index > -1 || createable && inputValue) {
        onAddSelection(event);
      }
      if (multiple) {
        event.preventDefault();
      } else {
        setOpen(false);
      }
    },
    [index, onAddSelection, setOpen, multiple, createable]
  );
  const onInputKeyedUp = useCallback(
    (event) => {
      const key = event.code;
      if (key === "ArrowUp") {
        onArrowUpKeyUp(event);
      } else if (key === "ArrowDown") {
        onArrowDownKeyUp(event);
      } else if (key === "Escape") {
        resetSelect();
      } else if (selectOnKeys == null ? void 0 : selectOnKeys.includes(key)) {
        onAddSelection(event);
      }
      onInputKeyUp == null ? void 0 : onInputKeyUp(event);
    },
    [
      selectOnKeys,
      onInputKeyUp,
      onArrowUpKeyUp,
      onArrowDownKeyUp,
      resetSelect,
      onAddSelection
    ]
  );
  const onInputKeyedDown = useCallback(
    (event) => {
      const key = event.key;
      if (key === "Tab") {
        if (tabToSelect) {
          onTabKeyDown(event);
        } else {
          setOpen(false);
        }
      }
      onInputKeydown == null ? void 0 : onInputKeydown(event);
    },
    [onInputKeydown, onTabKeyDown, tabToSelect]
  );
  const onInputBlured = useCallback(
    (event) => {
      const inputElement = event.target;
      const inputValue = inputElement.value.trim();
      if (menuDisabled && createable && inputValue) {
        const newSelection = {
          value: inputValue,
          children: inputValue
        };
        toggleSelectedOption(newSelection);
      }
      onInputBlur == null ? void 0 : onInputBlur(event);
    },
    [createable, menuDisabled, onInputBlur, toggleSelectedOption]
  );
  const onPasteHandler = useCallback(
    (e) => {
      var _a2;
      if (selectOnPaste) {
        const inputElement = e.target;
        const inputValue = inputElement.value;
        const clipboardValue = e.clipboardData.getData("Text");
        const value2 = `${inputValue}${clipboardValue}`.trim();
        if (multiple) {
          const separators = selectOnKeys == null ? void 0 : selectOnKeys.map(
            (key) => String.fromCharCode(keyNameToCode[key])
          );
          const expression = `[${separators}]`;
          const regex = new RegExp(expression, "g");
          const items = value2.split(regex).filter((item) => !(internalValue == null ? void 0 : internalValue.includes(item)));
          const result2 = toggleSelectedMultiOption(
            items.map((item) => ({ value: item, children: item }))
          );
          const optionsToSelect = createable ? result2.newOptions : result2.newSelectedOptions;
          if ((_a2 = result2.newOptions) == null ? void 0 : _a2.length) {
            onOptionsChange == null ? void 0 : onOptionsChange([...options, ...optionsToSelect]);
          }
          setInternalValue(result2.newValue);
          onChange == null ? void 0 : onChange(result2.newValue);
        } else {
          toggleSelectedOption({ value: value2, children: value2 });
          setInternalValue(value2);
          onChange == null ? void 0 : onChange(value2);
        }
        resetInput();
        e.preventDefault();
      }
    },
    [
      createable,
      selectOnPaste,
      multiple,
      onChange,
      onOptionsChange,
      options,
      resetInput,
      selectOnKeys,
      toggleSelectedMultiOption,
      toggleSelectedOption
    ]
  );
  const onClearHandler = useCallback(() => {
    resetSearch();
    onClear == null ? void 0 : onClear();
  }, [onClear, resetSearch]);
  const onMenuSelectedChange = useCallback(
    (option) => {
      var _a2;
      toggleSelectedOption(option);
      if (closeOnSelect) {
        setOpen(false);
      } else {
        (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
      }
    },
    [closeOnSelect, toggleSelectedOption]
  );
  const onOverlayClose = useCallback(() => {
    const inputValue = keyword.trim();
    if (createable && inputValue) {
      const newSelection = {
        value: inputValue,
        children: inputValue
      };
      toggleSelectedOption(newSelection);
    }
    resetSelect();
    onCloseMenu == null ? void 0 : onCloseMenu();
  }, [createable, keyword, onCloseMenu, resetSelect, toggleSelectedOption]);
  return /* @__PURE__ */ jsx(
    ConnectedOverlay,
    {
      open,
      closeOnBodyClick: true,
      closeOnEscape: true,
      appendToBody: true,
      placement: menuPlacement,
      reference: (_b = inputRef == null ? void 0 : inputRef.current) == null ? void 0 : _b.containerRef,
      ref: overlayRef,
      onClose: onOverlayClose,
      onOpen: onOpenMenu,
      triggerClassName: containerClassName,
      content: () => /* @__PURE__ */ jsx(
        CloneElement,
        {
          element: menu,
          id: `${internalId}-menu`,
          style: { width: menuWidth },
          selectedOption,
          createable,
          disabled,
          options: result,
          groups,
          index,
          multiple,
          inputSearchText: keyword,
          loading,
          filterable,
          size: size2,
          onSelectedChange: onMenuSelectedChange
        }
      ),
      children: /* @__PURE__ */ jsx(
        CloneElement,
        {
          element: input,
          id: `${internalId}-input`,
          name,
          disabled,
          reference: inputRef,
          menuOpen: open,
          autoFocus,
          options,
          error,
          closeOnSelect,
          inputText: keyword,
          multiple,
          createable,
          filterable,
          refreshable,
          className,
          activeClassName,
          required,
          loading,
          placeholder,
          selectedOption,
          clearable,
          menuDisabled,
          size: size2,
          onSelectedChange: toggleSelectedOption,
          onExpandClick: onInputExpanded,
          onKeyDown: onInputKeyedDown,
          onKeyUp: onInputKeyedUp,
          onInputChange: onInputChanged,
          onBlur: onInputBlured,
          onFocus: onInputFocused,
          onRefresh,
          onPaste: onPasteHandler,
          onClear: onClearHandler
        }
      )
    }
  );
};
const selectTheme = {
  selectInput: selectInputTheme,
  selectMenu: selectMenuTheme
};
const legacySelectTheme = {
  selectInput: cssVarsSelectInputTheme,
  selectMenu: cssVarsSelectMenuTheme
};
const Textarea = forwardRef(
  ({
    fullWidth,
    size: size2 = "medium",
    containerClassName,
    className,
    error,
    autoFocus,
    theme: customTheme,
    ...rest
  }, inputRef) => {
    const containerRef = useRef(null);
    const textareaRef = useRef(null);
    useImperativeHandle(inputRef, () => ({
      textareaRef,
      containerRef,
      blur: () => {
        var _a;
        return (_a = textareaRef.current) == null ? void 0 : _a.blur();
      },
      focus: () => {
        var _a;
        return (_a = textareaRef.current) == null ? void 0 : _a.focus();
      }
    }));
    useLayoutEffect(() => {
      if (autoFocus) {
        requestAnimationFrame(() => {
          var _a;
          return (_a = textareaRef.current) == null ? void 0 : _a.focus();
        });
      }
    }, [autoFocus]);
    const theme2 = useComponentTheme("textarea", customTheme);
    return /* @__PURE__ */ jsx(
      "div",
      {
        className: twMerge(
          theme2.base,
          fullWidth && theme2.fullWidth,
          error && theme2.error,
          containerClassName
        ),
        ref: containerRef,
        children: /* @__PURE__ */ jsx(
          TextareaAutosize,
          {
            ref: textareaRef,
            className: twMerge(
              theme2.input,
              fullWidth && theme2.fullWidth,
              rest.disabled && theme2.disabled,
              theme2.sizes[size2],
              className
            ),
            autoFocus,
            ...rest
          }
        )
      }
    );
  }
);
const baseTheme$m = {
  input: "resize-none read-only:cursor-not-allowed"
};
const textareaTheme = {
  ...baseTheme$m,
  base: [
    baseTheme$m.base,
    inputTheme.base,
    "disabled-within:hover:after:content-none"
  ].join(" "),
  input: [baseTheme$m.input, inputTheme.input].join(" "),
  disabled: [baseTheme$m.disabled, inputTheme.disabled].join(" "),
  fullWidth: inputTheme.fullWidth,
  error: inputTheme.error,
  sizes: inputTheme.sizes
};
const legacyTextareaTheme = {
  ...baseTheme$m,
  base: [
    baseTheme$m.base,
    legacyInputTheme.base,
    "bg-[var(--textarea-background)] rounded-[var(--textarea-border-radius)] [border:_var(--textarea-border)] focus:border-[var(--textarea-border-focus)]"
  ].join(" "),
  input: [
    baseTheme$m.input,
    legacyInputTheme.input,
    "[font-family:_var(--font-family)] text-[var(--textarea-color)] placeholder-[var(--textarea-color-placeholder)]"
  ].join(" "),
  disabled: [
    baseTheme$m.disabled,
    legacyInputTheme.disabled,
    "text-[var(--disabled-color)]"
  ].join(" "),
  fullWidth: legacyInputTheme.fullWidth,
  error: legacyInputTheme.error,
  sizes: {
    small: "[padding:_var(--textarea-spacing-sm)]",
    medium: "[padding: var(--textarea-spacing-md)]",
    large: "padding: var(--textarea-spacing-lg)"
  }
};
const Toggle = forwardRef(
  ({
    checked,
    disabled,
    onChange,
    onBlur,
    className,
    size: size2 = "medium",
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("toggle", customTheme);
    return /* @__PURE__ */ jsx(
      "div",
      {
        ...rest,
        ref,
        tabIndex: 0,
        role: "switch",
        className: cn(
          theme2.base,
          theme2.sizes[size2],
          {
            [theme2.checked]: checked,
            [theme2.disabled]: disabled,
            [theme2.disabledAndChecked]: disabled && checked
          },
          className
        ),
        onClick: () => {
          if (!disabled && onChange) {
            onChange(!checked);
          }
        },
        onBlur,
        onKeyDown: (event) => {
          if (!disabled && onChange && event.code === "Space") {
            onChange(!checked);
          }
        },
        children: /* @__PURE__ */ jsx(
          motion.div,
          {
            className: cn(theme2.handle.base, theme2.handle.sizes[size2], {
              [theme2.handle.disabled]: disabled,
              [theme2.handle.disabledAndChecked]: disabled && checked
            }),
            layout: true,
            transition: {
              type: "spring",
              stiffness: 700,
              damping: 30
            }
          }
        )
      }
    );
  }
);
const baseTheme$l = {
  base: "flex items-center justify-start cursor-pointer bg-surface box-border border border-panel-accent rounded-full hover:bg-primary-hover transition-[background-color] ease-in-out duration-300",
  disabled: "cursor-not-allowed bg-transparent hover:bg-transparent",
  checked: "justify-end bg-primary",
  disabledAndChecked: "bg-secondary-inactive hover:bg-secondary-inactive light:bg-gray-400 light:hover:bg-gray-400",
  handle: {
    base: "rounded-full bg-panel",
    sizes: {
      small: "w-3 h-full",
      medium: "w-5 h-full",
      large: "w-6 h-full"
    },
    disabled: "bg-secondary-inactive light:bg-gray-400",
    disabledAndChecked: "bg-black light:bg-white"
  },
  sizes: {
    small: "w-8 h-4 p-px",
    medium: "w-12 h-6 p-px",
    large: "w-16 h-7 p-px"
  }
};
const toggleTheme = baseTheme$l;
const legacyToggleTheme = {
  ...baseTheme$l,
  base: [
    baseTheme$l.base,
    "bg-[var(--toggle-background)] rounded-[var(--toggle-border-radius)] [border:_var(--toggle-border)]"
  ].join(" "),
  disabled: [
    baseTheme$l.disabled,
    "opacity-[var(--toggle-disabled-opacity,0.8)] bg-[var(--toggle-disabled-background)]"
  ].join(" "),
  checked: [
    baseTheme$l.checked,
    "bg-[var(--toggle-background-checked)] [border:_var(--toggle-border-checked)]"
  ].join(" "),
  sizes: {
    small: "h-[calc(var(--toggle-height,35px)_/_2)] w-[calc(var(--toggle-width,55px)_/_2)] pt-[calc(var(--toggle-spacing)] pb-[2)] px-[/]",
    medium: "h-[calc(var(--toggle-height,35px)_/_1.5)] w-[calc(var(--toggle-width,55px)_/_1.5)] pt-[calc(var(--toggle-spacing)] pb-[1.5)] px-[/]",
    large: "h-[var(--toggle-height,35px)] w-[var(--toggle-width,55px)] pt-[var(--toggle-spacing)] pr-[var(--toggle-spacing)] pb-[var(--toggle-spacing)] pl-[var(--toggle-spacing)]"
  },
  handle: {
    ...baseTheme$l.handle,
    base: [
      baseTheme$l.handle.base,
      "bg-[var(--toggle-handle-background)] rounded-[var(--toggle-handle-border-radius)]"
    ].join(" "),
    sizes: {
      small: "h-[calc(var(--toggle-handle-size,25px)_/_2)] w-[calc(var(--toggle-handle-size,25px)_/_2)]",
      medium: "h-[calc(var(--toggle-handle-size,25px)_/_1.5)] w-[calc(var(--toggle-handle-size,25px)_/_1.5)]",
      large: "h-[var(--toggle-handle-size,25px)] w-[var(--toggle-handle-size,25px)]"
    }
  }
};
const IconButton = forwardRef(
  ({
    children,
    className,
    size: size2 = "medium",
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("button", customTheme);
    return /* @__PURE__ */ jsx(
      Button,
      {
        className: twMerge(theme2.iconSizes[size2], className),
        size: size2,
        ...rest,
        ref,
        children
      }
    );
  }
);
const Menu = forwardRef(
  ({
    reference,
    children,
    style,
    className,
    placement = "bottom-start",
    closeOnEscape = true,
    open = false,
    appendToBody = true,
    closeOnBodyClick = true,
    maxHeight = "max-height: calc(100vh - 48px)",
    autofocus = true,
    modifiers,
    autoWidth,
    minWidth,
    maxWidth,
    onClose,
    onMouseEnter,
    onMouseLeave,
    theme: customTheme
  }, ref) => {
    const id2 = useId();
    const internalModifiers = useMemo(() => {
      if (autoWidth) {
        const sameWidth = {
          name: "sameWidth",
          fn: (state) => {
            const { width } = state.rects.reference;
            let menuWidth = width;
            if (maxWidth && menuWidth > maxWidth) {
              menuWidth = maxWidth;
            } else if (minWidth && menuWidth < minWidth) {
              menuWidth = minWidth;
            }
            return { data: { menuWidth } };
          }
        };
        const sizeModifier = size({
          apply({ middlewareData, elements }) {
            var _a;
            elements.floating.style.width = `${((_a = middlewareData == null ? void 0 : middlewareData.sameWidth) == null ? void 0 : _a.menuWidth) ?? 0}px`;
          }
        });
        return modifiers ? [...modifiers ?? [], sameWidth, sizeModifier] : [sameWidth, sizeModifier];
      }
      return modifiers;
    }, [modifiers, autoWidth, minWidth, maxWidth]);
    const theme2 = useComponentTheme("menu", customTheme);
    return /* @__PURE__ */ jsx(
      ConnectedOverlay,
      {
        open,
        closeOnBodyClick,
        appendToBody,
        reference,
        placement,
        modifiers: internalModifiers,
        closeOnEscape,
        content: () => /* @__PURE__ */ jsx(
          motion.div,
          {
            ref,
            initial: { opacity: 0, y: -10 },
            animate: { opacity: 1, y: 0 },
            exit: { opacity: 0, y: -10 },
            className: twMerge(theme2.base, className),
            style,
            onMouseEnter,
            onMouseLeave,
            children: autofocus ? /* @__PURE__ */ jsx(
              FocusTrap,
              {
                focusTrapOptions: {
                  escapeDeactivates: true,
                  clickOutsideDeactivates: true,
                  fallbackFocus: `#${id2}`
                },
                children: /* @__PURE__ */ jsx(
                  "div",
                  {
                    id: id2,
                    className: theme2.inner,
                    tabIndex: -1,
                    style: { maxHeight },
                    children: typeof children === "function" ? children() : children
                  }
                )
              }
            ) : /* @__PURE__ */ jsx("div", { className: theme2.inner, style: { maxHeight }, children: typeof children === "function" ? children() : children })
          }
        ),
        onClose
      }
    );
  }
);
const useMenu = (prop) => {
  const { open, onClose } = prop || {};
  const [internalOpen, setInternalOpen] = useState(open);
  const ref = useRef(null);
  useEffect(() => {
    setInternalOpen(open);
  }, [open]);
  const onCloseInternal = useCallback(() => {
    setInternalOpen(false);
    onClose == null ? void 0 : onClose();
  }, [onClose]);
  const onToggleOpen = useCallback(() => {
    setInternalOpen(!internalOpen);
  }, [internalOpen]);
  const Component = useCallback(
    (props) => /* @__PURE__ */ jsx(
      Menu,
      {
        ...props,
        open: internalOpen,
        reference: ref,
        onClose: onCloseInternal
      }
    ),
    [internalOpen, onCloseInternal]
  );
  return {
    isOpen: internalOpen,
    setOpen: setInternalOpen,
    toggleOpen: onToggleOpen,
    Menu: Component,
    ref
  };
};
const NestedMenu = ({
  label,
  children,
  style,
  placement = "right-start",
  menuClassName,
  menuStyle,
  enterDelay = 0,
  autofocus = true,
  leaveDelay = 100,
  className,
  maxHeight,
  activeClassName,
  closeOnBodyClick = true,
  closeOnEscape = true,
  onClose
}) => {
  const [active, setActive] = useState(false);
  const itemRef = useRef(null);
  const menuRef = useRef(null);
  const menuEntered = useRef(false);
  const enterTimeoutRef = useRef(null);
  const leaveTimeoutRef = useRef(null);
  const onMouseEnterItem = useCallback(() => {
    clearTimeout(enterTimeoutRef.current);
    clearTimeout(leaveTimeoutRef.current);
    enterTimeoutRef.current = setTimeout(() => setActive(true), enterDelay);
  }, [enterDelay]);
  const onClickItem = useCallback(() => {
    clearTimeout(enterTimeoutRef.current);
    clearTimeout(leaveTimeoutRef.current);
    setActive(!active);
  }, [active]);
  const onMouseLeaveItem = useCallback(() => {
    leaveTimeoutRef.current = setTimeout(() => {
      if (!menuEntered.current) {
        setActive(false);
      }
    }, leaveDelay);
  }, [leaveDelay]);
  const onMouseEnterMenu = useCallback((event) => {
    clearTimeout(enterTimeoutRef.current);
    clearTimeout(leaveTimeoutRef.current);
    menuEntered.current = true;
  }, []);
  const onMouseLeaveMenu = useCallback(
    (event) => {
      clearTimeout(enterTimeoutRef.current);
      clearTimeout(leaveTimeoutRef.current);
      menuEntered.current = false;
      leaveTimeoutRef.current = setTimeout(() => {
        var _a;
        if (!((_a = itemRef.current) == null ? void 0 : _a.contains(event.target))) {
          setActive(false);
        }
      }, leaveDelay);
    },
    [leaveDelay]
  );
  const onNestedMenuClose = useCallback(
    (event) => {
      setActive(false);
      onClose == null ? void 0 : onClose(event);
    },
    [onClose]
  );
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      "div",
      {
        className: classNames(className, { [activeClassName]: active }),
        style,
        ref: itemRef,
        onClick: onClickItem,
        onMouseEnter: onMouseEnterItem,
        onMouseLeave: onMouseLeaveItem,
        children: label
      }
    ),
    /* @__PURE__ */ jsx(
      Menu,
      {
        className: menuClassName,
        autofocus,
        style: menuStyle,
        reference: itemRef,
        closeOnBodyClick,
        closeOnEscape,
        open: active,
        placement,
        maxHeight,
        ref: menuRef,
        onMouseEnter: onMouseEnterMenu,
        onMouseLeave: onMouseLeaveMenu,
        onClose: onNestedMenuClose,
        children
      }
    )
  ] });
};
const baseTheme$k = {
  base: "relative min-w-[112px] max-w-[500px] p-px",
  inner: "focus:outline-none"
};
const menuTheme = {
  ...baseTheme$k,
  inner: [baseTheme$k.inner, "text-text-primary bg-panel"].join(" ")
};
const legacyMenuTheme = {
  ...baseTheme$k
};
const SvgCalendar = (props) => /* @__PURE__ */ React.createElement("svg", { width: 16, height: 16, viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React.createElement("g", { id: "calendar" }, /* @__PURE__ */ React.createElement("path", { id: "Vector", d: "M12.6667 2.66671H12V1.33337H10.6667V2.66671H5.33333V1.33337H4V2.66671H3.33333C2.59333 2.66671 2.00667 3.26671 2.00667 4.00004L2 13.3334C2 14.0667 2.59333 14.6667 3.33333 14.6667H12.6667C13.4 14.6667 14 14.0667 14 13.3334V4.00004C14 3.26671 13.4 2.66671 12.6667 2.66671ZM12.6667 13.3334H3.33333V6.66671H12.6667V13.3334ZM12.6667 5.33337H3.33333V4.00004H12.6667V5.33337ZM6 9.33337H4.66667V8.00004H6V9.33337ZM8.66667 9.33337H7.33333V8.00004H8.66667V9.33337ZM11.3333 9.33337H10V8.00004H11.3333V9.33337ZM6 12H4.66667V10.6667H6V12ZM8.66667 12H7.33333V10.6667H8.66667V12ZM11.3333 12H10V10.6667H11.3333V12Z", fill: "currentColor" })));
const DateInput = ({
  disabled,
  value,
  format: format$1 = "MM/dd/yyyy",
  placement = "bottom-start",
  isRange,
  icon = /* @__PURE__ */ jsx(SvgCalendar, {}),
  openOnFocus = true,
  onChange,
  onFocus,
  ...rest
}) => {
  var _a;
  const [open, setOpen] = useState(false);
  const ref = useRef(null);
  const [inputValue, setInputValue] = useState("");
  const changeHandler = useCallback(
    (value2) => {
      if (isRange) {
        onChange(value2);
        if (value2[0] && value2[1]) {
          setOpen(false);
        }
      } else {
        setOpen(false);
        onChange(value2);
      }
    },
    [isRange, onChange]
  );
  const inputChangeHandler = useCallback(
    (event) => {
      const dateStr = event.target.value;
      setInputValue(dateStr);
      if (isRange) {
        const [startStr, endStr] = dateStr.split("-");
        const startDate = parse(startStr, format$1, /* @__PURE__ */ new Date());
        const endDate = parse(endStr, format$1, /* @__PURE__ */ new Date());
        if (isValid(startDate) && isValid(endDate) && format(startDate, format$1) === startStr && format(endDate, format$1) === endStr) {
          onChange == null ? void 0 : onChange([startDate, endDate]);
        }
      } else {
        const date = parse(dateStr, format$1, /* @__PURE__ */ new Date());
        if (isValid(date) && format(date, format$1) === dateStr) {
          onChange == null ? void 0 : onChange(date);
        }
      }
    },
    [format$1, isRange, onChange]
  );
  const focusHandler = useCallback(
    (e) => {
      if (openOnFocus) {
        setOpen(true);
      }
      onFocus == null ? void 0 : onFocus(e);
    },
    [onFocus, openOnFocus]
  );
  useEffect(() => {
    if (value) {
      if (isRange) {
        const [start, end] = value;
        setInputValue(
          `${start ? format(start, format$1) : ""}-${end ? format(end, format$1) : ""}`
        );
      } else if (!isRange) {
        setInputValue(format(value, format$1));
      }
    }
  }, [format$1, isRange, value]);
  return /* @__PURE__ */ jsxs(Fragment$1, { children: [
    /* @__PURE__ */ jsx(
      Input,
      {
        ref,
        disabled,
        endAdornment: /* @__PURE__ */ jsx(
          IconButton,
          {
            className: "px-0",
            variant: "text",
            onClick: () => setOpen(true),
            children: icon
          }
        ),
        placeholder: isRange ? `${format$1.toUpperCase()} - ${format$1.toUpperCase()}` : format$1.toUpperCase(),
        ...rest,
        value: inputValue,
        onChange: inputChangeHandler,
        onFocus: focusHandler
      }
    ),
    /* @__PURE__ */ jsx(
      Menu,
      {
        open,
        onClose: () => setOpen(false),
        reference: (_a = ref == null ? void 0 : ref.current) == null ? void 0 : _a.containerRef,
        placement,
        children: () => /* @__PURE__ */ jsx(Card, { children: /* @__PURE__ */ jsx(
          Calendar,
          {
            disabled,
            value,
            isRange,
            showDayOfWeek: true,
            onChange: changeHandler
          }
        ) })
      }
    )
  ] });
};
const DeletableChip = forwardRef(
  ({
    children,
    disabled,
    deleteIcon = /* @__PURE__ */ jsx(CloseIcon, { height: 12, width: 12 }),
    onDelete,
    size: size2 = "medium",
    color = "default",
    theme: customTheme,
    variant = "filled",
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("chip", customTheme);
    return /* @__PURE__ */ jsx(
      Chip,
      {
        ref,
        size: size2,
        disabled,
        color,
        end: /* @__PURE__ */ jsx(
          Button,
          {
            tabIndex: 0,
            variant: "text",
            size: size2,
            className: twMerge(
              theme2.deleteButton.base,
              theme2.deleteButton[size2]
            ),
            onClick: (event) => {
              if (!disabled) {
                event.stopPropagation();
                onDelete == null ? void 0 : onDelete();
              }
            },
            disabled,
            disableMargins: true,
            disablePadding: true,
            children: deleteIcon
          }
        ),
        variant,
        theme: theme2,
        ...rest,
        children
      }
    );
  }
);
const baseTheme$j = {
  base: `
  inline-flex whitespace-no-wrap select-none items-center justify-center px-2.5 py-0.5
  rounded-sm leading-none text-white transition-colors
  duration-300 ease [&>svg]:transition-[fill] [&>svg]:will-change-[fill] font-medium
  `,
  colors: {
    default: {
      selectable: {
        base: "hover:cursor-pointer"
      }
    },
    primary: {
      selectable: {
        base: "hover:cursor-pointer"
      }
    },
    secondary: {
      selectable: {
        base: "hover:cursor-pointer"
      }
    },
    success: {
      selectable: {
        base: "hover:cursor-pointer"
      }
    },
    warning: {
      selectable: {
        base: "hover:cursor-pointer"
      }
    },
    error: {
      selectable: {
        base: "hover:cursor-pointer"
      }
    },
    info: {
      selectable: {
        base: "hover:cursor-pointer"
      }
    }
  },
  adornment: {
    base: "flex items-center justify-center",
    start: "mr-1",
    end: "ml-1",
    sizes: {
      small: "[&>svg]:w-3 [&>svg]:h-3",
      medium: "[&>svg]:w-4 [&>svg]:h-4",
      large: "[&>svg]:w-5 [&>svg]:h-5"
    }
  },
  sizes: {
    small: "text-[10px] px-1 py-0.5",
    medium: "text-sm px-2 py-0.5",
    large: "text-base px-3 py-0.5"
  },
  focus: "focus-visible:outline-dashed focus-visible:outline-1 focus-visible:outline-offset-2",
  deleteButton: {
    base: "text-inherit",
    sizes: {
      small: "leading-[10px] max-h-2.5",
      medium: "leading-3 max-h-3",
      large: "leading-[14px] max-h-3.5"
    }
  },
  disabled: "bg-opacity-50 border-opacity-50 text-opacity-50 cursor-not-allowed"
};
const chipTheme = {
  base: baseTheme$j.base,
  adornment: baseTheme$j.adornment,
  sizes: baseTheme$j.sizes,
  focus: baseTheme$j.focus,
  variants: {
    filled: "border border-transparent box-border",
    outline: "bg-opacity-0 border hover:bg-transparent"
  },
  colors: {
    default: {
      variants: {
        filled: "bg-panel border-panel text-text-primary",
        outline: "text-text-primary dark:border-gray-100 light:border-gray-900"
      },
      selectable: {
        base: `${baseTheme$j.colors.default.selectable.base}`,
        variants: {
          filled: {
            base: "hover:bg-primary-hover hover:border-primary-hover hover:text-panel",
            selected: "bg-primary text-panel"
          },
          outline: {
            base: "hover:text-primary-hover hover:border-panel-accent",
            selected: "border-panel-accent text-primary"
          }
        }
      }
    },
    primary: {
      variants: {
        outline: "text-primary border-panel-accent",
        filled: "bg-primary border-primary text-panel"
      },
      selectable: {
        base: `${baseTheme$j.colors.primary.selectable.base}`,
        variants: {
          filled: {
            base: "hover:bg-primary-hover hover:border-primary-hover hover:text-panel",
            selected: "bg-primary-hover"
          },
          outline: {
            base: "hover:text-primary-hover hover:border-primary",
            selected: "border-primary"
          }
        }
      }
    },
    secondary: {
      variants: {
        filled: "bg-secondary border-secondary text-text-primary",
        outline: "text-secondary border-panel-accent"
      },
      selectable: {
        base: `${baseTheme$j.colors.secondary.selectable.base}`,
        variants: {
          filled: {
            base: "hover:bg-secondary-hover hover:border-secondary-hover hover:text-panel",
            selected: "bg-secondary-hover text-panel"
          },
          outline: {
            base: "hover:text-secondary-hover hover:border-secondary",
            selected: "border-secondary"
          }
        }
      }
    },
    success: {
      variants: {
        filled: "bg-success border-success text-panel",
        outline: "text-success border-panel-accent"
      },
      selectable: {
        base: `${baseTheme$j.colors.success.selectable.base}`,
        variants: {
          filled: {
            base: "hover:bg-success-hover hover:border-success-hover",
            selected: "bg-success-hover"
          },
          outline: {
            base: "hover:text-success-hover hover:border-success",
            selected: "border-success"
          }
        }
      }
    },
    warning: {
      variants: {
        filled: "bg-warning border-warning text-panel",
        outline: "text-warning border-panel-accent"
      },
      selectable: {
        base: `${baseTheme$j.colors.warning.selectable.base}`,
        variants: {
          filled: {
            base: "hover:bg-warning-hover hover:border-warning-hover hover:text-panel",
            selected: "bg-warning-hover"
          },
          outline: {
            base: "hover:text-warning-hover hover:border-warning",
            selected: "border-warning"
          }
        }
      }
    },
    error: {
      variants: {
        filled: "bg-error border-error text-panel",
        outline: "text-error border-panel-accent"
      },
      selectable: {
        base: `${baseTheme$j.colors.error.selectable.base}`,
        variants: {
          filled: {
            base: "hover:bg-error-hover hover:border-error-hover hover:text-panel",
            selected: "bg-error-hover"
          },
          outline: {
            base: "hover:text-error-hover hover:border-error",
            selected: "border-error"
          }
        }
      }
    },
    info: {
      variants: {
        filled: "bg-info border-info text-panel",
        outline: "text-info border-panel-accent"
      },
      selectable: {
        base: `${baseTheme$j.colors.info.selectable.base}`,
        variants: {
          filled: {
            base: "hover:bg-info-hover hover:border-info-hover hover:text-panel",
            selected: "bg-info-hover"
          },
          outline: {
            base: "hover:text-info-hover hover:border-info",
            selected: "border-info"
          }
        }
      }
    }
  },
  deleteButton: baseTheme$j.deleteButton,
  disabled: baseTheme$j.disabled
};
const legacyChipTheme = {
  base: [
    baseTheme$j.base,
    "[font-family:_var(--chip-font-family)] rounded-[var(--chip-border-radius)]"
  ].join(" "),
  adornment: {
    ...baseTheme$j.adornment,
    start: [baseTheme$j.adornment.start, "pr-[var(--spacing-xs)]"].join(" "),
    end: [baseTheme$j.adornment.end, "pl-[var(--spacing-xs)]"].join(" ")
  },
  sizes: {
    small: [baseTheme$j.sizes.small, "p-[var(--spacing-xs)]"].join(" "),
    medium: [
      baseTheme$j.sizes.medium,
      "py-[var(--spacing-xs)] px-[var(--spacing-md)]"
    ].join(" "),
    large: [baseTheme$j.sizes.large, "p-[var(--spacing-md)]"].join(" ")
  },
  focus: baseTheme$j.focus,
  variants: {
    filled: "[&>svg]:fill-[var(--chip-color)]",
    outline: "bg-opacity-0 border hover:bg-transparent border-[var(--chip-background)] text-[var(--chip-color)] [&>svg]:fill-[var(--chip-color)]"
  },
  colors: {
    default: {
      base: "bg-[var(--chip-background)] border-[var(--chip-background)] text-[var(--chip-color)] ",
      variants: baseTheme$j.colors.default.variants,
      selectable: baseTheme$j.colors.default.selectable
    },
    primary: {
      base: "bg-[color:var(--primary-background)] border-[color:var(--primary-background)]",
      variants: baseTheme$j.colors.primary.variants,
      selectable: baseTheme$j.colors.primary.selectable
    },
    secondary: {
      base: "bg-[color:var(--secondary-background)] border-[color:var(--secondary-background)]",
      variants: baseTheme$j.colors.secondary.variants,
      selectable: baseTheme$j.colors.secondary.selectable
    },
    success: {
      base: "bg-[color:var(--success-background)] border-[color:var(--success-background)]",
      variants: baseTheme$j.colors.success.variants,
      selectable: baseTheme$j.colors.success.selectable
    },
    warning: {
      base: "bg-[color:var(--warning-background)] border-[color:var(--warning-background)]",
      variants: baseTheme$j.colors.warning.variants,
      selectable: baseTheme$j.colors.warning.selectable
    },
    error: {
      base: "bg-[color:var(--error-background)] border-[color:var(--error-background)]",
      variants: baseTheme$j.colors.error.variants,
      selectable: baseTheme$j.colors.error.selectable
    },
    info: {
      base: "bg-[color:var(--info-background)] border-[color:var(--info-background)]",
      variants: baseTheme$j.colors.info.variants,
      selectable: baseTheme$j.colors.info.selectable
    }
  },
  deleteButton: baseTheme$j.deleteButton,
  disabled: baseTheme$j.disabled
};
const baseTheme$i = {
  base: "flex",
  dot: "rounded-[50%]",
  sizes: {
    small: "w-1 h-1 m-1",
    medium: "w-1.5 h-1.5 m-1.5",
    large: "w-2 h-2 m-2"
  }
};
const dotsLoaderTheme = {
  ...baseTheme$i,
  dot: [baseTheme$i.dot, "light:bg-gray-900 dark:bg-gray-100"].join(" ")
};
const legacyLoaderTheme = {
  ...baseTheme$i,
  dot: [baseTheme$i.dot, "bg-[var(--loader-background)]"].join(" "),
  sizes: {
    small: "w-1 h-1 ml-[var(--spacing-sm)]",
    medium: "w-1.5 h-1.5 ml-[var(--spacing-md)]",
    large: "w-2 h-2 ml-[var(--spacing-lg)]"
  }
};
const Avatar = forwardRef(
  ({
    name,
    src,
    color,
    size: size2 = 24,
    variant = "filled",
    rounded = true,
    className,
    colorOptions,
    theme: customTheme,
    ...rest
  }, ref) => {
    const fontSize = size2 * 0.4;
    const initials = useMemo(() => getInitials(name || ""), [name]);
    const backgroundColor = useMemo(() => {
      if (src) {
        return "transparent";
      }
      if (color) {
        return color;
      }
      return generateColor(name || "", colorOptions);
    }, [color, name, src, colorOptions]);
    const theme2 = useComponentTheme("avatar", customTheme);
    return /* @__PURE__ */ jsx(
      "div",
      {
        ...rest,
        className: twMerge(theme2.base, rounded && theme2.rounded, className),
        style: {
          width: `${size2}px`,
          height: `${size2}px`,
          fontSize: `${fontSize}px`,
          backgroundImage: src ? `url(${src})` : "none",
          backgroundColor,
          ...variant === "outline" && {
            backgroundColor: "transparent",
            border: `solid 1px ${backgroundColor}`,
            color: backgroundColor
          }
        },
        ref,
        children: !src && name && /* @__PURE__ */ jsx("span", { children: initials })
      }
    );
  }
);
const baseTheme$h = {
  base: "flex justify-center items-center bg-cover bg-center font-bold",
  rounded: "rounded-[50%]"
};
const avatarTheme = {
  ...baseTheme$h,
  base: [baseTheme$h.base, "text-white"].join(" ")
};
const legacyAvatarTheme = {
  ...baseTheme$h,
  base: [
    baseTheme$h.base,
    "text-[var(--avatar-initials-color)] [border:_var(--avatar-border)]"
  ].join(" ")
};
const pluralize = ({
  count,
  zero,
  singular,
  plural,
  showCount
}) => {
  if (count === 0 && zero) {
    return zero;
  }
  let returnedString = singular;
  if (count !== 1) {
    returnedString = plural || pluralizeLib(singular, count);
  }
  return showCount ? `${count.toLocaleString()} ${returnedString}` : returnedString;
};
const Pluralize = ({
  count = 0,
  singular,
  className,
  showCount = true,
  plural,
  zero
}) => {
  const text = useMemo(
    () => pluralize({ count, singular, showCount, plural, zero }),
    [count, singular, showCount, plural, zero]
  );
  return /* @__PURE__ */ jsx("span", { className, children: text });
};
function formatSize(size2, emptyValue = "N/A", scale = ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"], decimals = 2) {
  let newSize = size2;
  var binaryScale = humanFormat.Scale.create(scale, 1024);
  if (typeof size2 === "string") {
    newSize = parseFloat(size2);
  } else if (size2 === null || size2 === void 0) {
    return [emptyValue];
  }
  return humanFormat(newSize, {
    scale: binaryScale,
    decimals
  });
}
const DataSize = ({
  value,
  emptyValue,
  scale,
  decimals
}) => /* @__PURE__ */ jsx(Fragment$1, { children: formatSize(value, emptyValue, scale, decimals) });
const Redact = ({
  allowToggle = true,
  compactLength = 8,
  tooltipText = "Click to toggle sensitive content",
  className,
  character = "*",
  value,
  theme: customTheme
}) => {
  const [visible, setVisible] = useState(false);
  const masked = useMemo(
    () => coverup(value, {
      keepLeft: 1,
      keepRight: 1,
      compactTo: compactLength,
      char: character
    }) || "",
    [value, character, compactLength]
  );
  const theme2 = useComponentTheme("redact", customTheme);
  return /* @__PURE__ */ jsx(
    "span",
    {
      title: allowToggle ? tooltipText : void 0,
      role: "button",
      className: twMerge(
        theme2.base,
        allowToggle && theme2.interactive,
        className
      ),
      onClick: () => allowToggle && setVisible(!visible),
      children: visible ? value : masked
    }
  );
};
const baseTheme$g = {
  base: "cursor-text",
  interactive: "cursor-pointer hover:underline"
};
const redactTheme = {
  ...baseTheme$g,
  base: [baseTheme$g.base, "text-text-primary"].join(" ")
};
const legacyRedactTheme = {
  ...baseTheme$g
};
const timeScale = new humanFormat.Scale({
  ms: 1,
  s: 1 * 1e3,
  min: 60 * 1e3,
  hr: 3600 * 1e3,
  day: 86400 * 1e3,
  month: 2592e3 * 1e3
});
function formatDuration(time, emptyValue = "N/A", zeroValue = "0 ms") {
  let newTime = time;
  if (typeof time === "string") {
    newTime = parseFloat(time);
  } else if (time === null || time === void 0) {
    return [emptyValue];
  }
  const humanized = humanFormat(newTime, { scale: timeScale });
  const [valueStr, unitStr] = humanized.split(" ");
  const value = parseFloat(valueStr);
  if (value === 0) {
    return zeroValue;
  } else if (value === 1) {
    return humanized;
  }
  if (unitStr === null || unitStr === void 0 || value === null || value === void 0) {
    return [emptyValue];
  }
  return `${value} ${pluralizeLib(unitStr, value)}`;
}
const Duration = ({
  value,
  emptyValue = "N/A",
  zeroValue = "0 ms"
}) => /* @__PURE__ */ jsx(Fragment$1, { children: formatDuration(value, emptyValue, zeroValue) });
function getDifference(date) {
  return differenceInSeconds(/* @__PURE__ */ new Date(), date);
}
function formatRelative(date, options) {
  const diff = getDifference(date);
  if (diff < 30) {
    return "now";
  } else {
    return formatDistance(date, /* @__PURE__ */ new Date(), options);
  }
}
function getInterval(date) {
  const diff = getDifference(date);
  if (diff < 3600) {
    return 6e4;
  } else if (diff >= 3600 && diff <= 86400) {
    return 36e5;
  } else {
    return 0;
  }
}
function safeFormat(date, options) {
  let relative;
  let formatted;
  let dateObj;
  if (date) {
    dateObj = new Date(date);
    if (isValid(dateObj)) {
      const { format: format$1, includeSeconds, addSuffix } = options;
      formatted = format(dateObj, format$1);
      relative = formatRelative(dateObj, { includeSeconds, addSuffix });
    }
  }
  return {
    dateObj,
    formatted,
    relative
  };
}
const DateFormat = ({
  allowToggle = false,
  cacheKey,
  className,
  format: format2 = "MM/dd/yy hh:mm:ss a",
  emptyMessage = "N/A",
  includeSeconds = false,
  addSuffix = true,
  fromNow,
  date,
  theme: customTheme
}) => {
  const [cache, setCache] = useState(
    typeof window !== "undefined" ? window.localStorage.getItem(`DATES_${cacheKey}`) ?? null : null
  );
  useEffect(() => {
    if (cacheKey && typeof window !== "undefined") {
      window.localStorage.setItem(`DATES_${cacheKey}`, cache);
    }
  }, [cache, cacheKey]);
  let should = fromNow;
  if (cacheKey && cache) {
    should = cache === "true";
  }
  const [isRelative, setIsRelative] = useState(should);
  const timeout = useRef(null);
  const { dateObj, formatted, relative } = useMemo(
    () => safeFormat(date, { format: format2, includeSeconds, addSuffix }),
    [addSuffix, date, format2, includeSeconds]
  );
  const [curRelative, setCurRelative] = useState(relative);
  const onToggle = useCallback(
    (event) => {
      if (allowToggle) {
        event.preventDefault();
        event.stopPropagation();
        const next = !isRelative;
        setIsRelative(next);
        if (cacheKey) {
          setCache(`${next}`);
        }
      }
    },
    [allowToggle, cacheKey, isRelative, setCache]
  );
  const updateTime = useCallback(() => {
    if (isRelative) {
      clearTimeout(timeout.current);
      const interval = getInterval(dateObj);
      if (interval > 0) {
        timeout.current = setTimeout(() => {
          setCurRelative(
            formatRelative(dateObj, { includeSeconds, addSuffix })
          );
          updateTime();
        }, interval);
      }
    }
  }, [isRelative, dateObj, includeSeconds, addSuffix]);
  useEffect(() => {
    updateTime();
    const cur = timeout.current;
    return () => clearTimeout(cur);
  });
  const theme2 = useComponentTheme("dateFormat", customTheme);
  if (!date) {
    return /* @__PURE__ */ jsx(Fragment$1, { children: emptyMessage });
  }
  return /* @__PURE__ */ jsx(
    "time",
    {
      title: allowToggle ? "Toggle relative / absolute time" : void 0,
      role: "button",
      className: twMerge(
        theme2.base,
        allowToggle && theme2.interactive,
        className
      ),
      onClick: onToggle,
      children: isRelative ? curRelative : formatted
    }
  );
};
const baseTheme$f = {
  base: "cursor-text",
  interactive: "cursor-pointer hover:underline"
};
const dateFormatTheme = {
  ...baseTheme$f
};
const legacyDateFormatTheme = {
  ...baseTheme$f,
  base: [baseTheme$f.base, "text-[var(--color-primary)]"].join(" ")
};
const DownArrowIcon = ({ className }) => /* @__PURE__ */ jsx(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    x: "0px",
    y: "0px",
    width: "50",
    height: "50",
    viewBox: "0 0 32 32",
    className,
    children: /* @__PURE__ */ jsx("path", { d: "M 4.21875 10.78125 L 2.78125 12.21875 L 15.28125 24.71875 L 16 25.40625 L 16.71875 24.71875 L 29.21875 12.21875 L 27.78125 10.78125 L 16 22.5625 Z" })
  }
);
function getNextDirection(direction, defaultDirection = "asc", canBeNull = true) {
  if (!direction) {
    return defaultDirection;
  } else if (direction === "asc") {
    return "desc";
  } else if (direction === "desc") {
    return canBeNull ? null : "asc";
  }
}
const Sort = ({
  className,
  disabled,
  direction,
  iconClassName,
  icon: Icon = DownArrowIcon,
  neutralIcon: NeutralIcon,
  neutralIconClassName,
  children,
  onSort,
  theme: customTheme
}) => {
  const onSortClick = useCallback(() => {
    if (!disabled) {
      onSort == null ? void 0 : onSort(getNextDirection(direction));
    }
  }, [disabled, direction, onSort]);
  const onKeydown = useCallback(
    (event) => {
      if (!disabled && (event.key === "Enter" || event.key === "Space")) {
        onSort == null ? void 0 : onSort(getNextDirection(direction));
      }
    },
    [disabled, direction, onSort]
  );
  const theme2 = useComponentTheme("sort", customTheme);
  return /* @__PURE__ */ jsxs(
    "div",
    {
      className: twMerge(
        theme2.base,
        disabled && theme2.disabled,
        disabled && direction !== void 0 && direction !== null && theme2.hasValue
      ),
      role: "button",
      tabIndex: -1,
      "aria-label": "Toggle sort direction",
      onClick: onSortClick,
      onKeyDown: onKeydown,
      children: [
        children,
        /* @__PURE__ */ jsxs(AnimatePresence, { initial: false, mode: "wait", children: [
          direction === "asc" && /* @__PURE__ */ jsx(
            motion.div,
            {
              initial: { opacity: 0, y: -10 },
              animate: { opacity: 1, y: 0 },
              exit: { opacity: 0, y: 10, transition: { duration: 0.05 } },
              children: /* @__PURE__ */ jsx(
                Icon,
                {
                  className: twMerge(
                    theme2.icon.base,
                    theme2.icon.ascending,
                    iconClassName
                  )
                }
              )
            },
            "asc"
          ),
          direction === "desc" && /* @__PURE__ */ jsx(
            motion.div,
            {
              initial: { opacity: 0, y: -10 },
              animate: { opacity: 1, y: 0 },
              exit: { opacity: 0, y: 10, transition: { duration: 0.05 } },
              children: /* @__PURE__ */ jsx(Icon, { className: twMerge(theme2.icon.base, iconClassName) })
            },
            "desc"
          ),
          !!NeutralIcon && !direction && /* @__PURE__ */ jsx(
            motion.div,
            {
              initial: { opacity: 0, y: -10 },
              animate: { opacity: 1, y: 0 },
              exit: { opacity: 0, y: 10, transition: { duration: 0.05 } },
              children: /* @__PURE__ */ jsx(
                NeutralIcon,
                {
                  className: twMerge(theme2.icon.base, neutralIconClassName)
                }
              )
            },
            "neutral"
          )
        ] })
      ]
    }
  );
};
const baseTheme$e = {
  base: "cursor-pointer select-none flex items-center relative",
  disabled: "cursor-[initial]",
  hasValue: "cursor-not-allowed",
  icon: {
    base: "w-4 h-4 align-middle mx-1.5 fill-current",
    ascending: "rotate-180"
  }
};
const sortTheme = {
  ...baseTheme$e,
  base: [baseTheme$e.base, "text-text-primary"].join(" ")
};
const legacySortTheme = {
  ...baseTheme$e,
  icon: {
    ...baseTheme$e.icon,
    base: "h-[var(--sort-icon-size)] w-[var(--sort-icon-size)] mx-[var(--spacing-sm)] fill-[var(--sort-icon-color)]"
  }
};
const SearchIcon = () => /* @__PURE__ */ jsx(
  "svg",
  {
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 24 24",
    strokeWidth: "1.5",
    stroke: "currentColor",
    children: /* @__PURE__ */ jsx(
      "path",
      {
        strokeLinecap: "round",
        strokeLinejoin: "round",
        d: "M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z"
      }
    )
  }
);
const CommandPaletteInput = ({
  value,
  autoFocus,
  icon = /* @__PURE__ */ jsx(SearchIcon, {}),
  hotkeys,
  placeholder,
  onHotkey,
  onBlur,
  onChange,
  onKeyPress,
  theme: customTheme
}) => {
  const inputRef = useRef(null);
  const handlerRef = useRef(keys());
  const keyMapRef = useRef(/* @__PURE__ */ new Map());
  useLayoutEffect(() => {
    if (autoFocus) {
      requestAnimationFrame(() => {
        var _a;
        return (_a = inputRef.current) == null ? void 0 : _a.focus();
      });
    }
  }, [autoFocus]);
  useEffect(() => {
    if (typeof window !== "undefined") {
      const handler = handlerRef.current;
      const keyMap = keyMapRef.current;
      for (const hotkey of hotkeys) {
        const callback = () => onHotkey(hotkey);
        handler.add(hotkey.hotkey, callback);
        keyMap.set(hotkey.hotkey, callback);
      }
      window.addEventListener("keydown", handler.handle);
      return () => {
        [...keyMap].forEach(([key, cb]) => handler.remove(key, cb));
        window.removeEventListener("keydown", handler.handle);
        keyMapRef.current = /* @__PURE__ */ new Map();
      };
    }
  }, [onHotkey, hotkeys]);
  const { input: inputTheme2 } = useComponentTheme(
    "commandPalette",
    customTheme
  );
  return /* @__PURE__ */ jsxs("div", { className: inputTheme2.base, children: [
    icon && /* @__PURE__ */ jsx("span", { className: inputTheme2.icon, children: icon }),
    /* @__PURE__ */ jsx(
      "input",
      {
        className: inputTheme2.input,
        ref: inputRef,
        type: "text",
        value,
        placeholder,
        autoCorrect: "off",
        spellCheck: "false",
        autoComplete: "off",
        onChange: (e) => onChange(e.target.value),
        onKeyDown: onKeyPress,
        onBlur
      }
    )
  ] });
};
const baseTheme$d = {
  base: "flex w-full items-center border-b-2",
  input: "flex-1 border-0 box-border p-2.5 focus-within:outline-none focus-visible:outline-none",
  icon: "w-4 h-4 ml-2.5"
};
const commandPaletteInputTheme = {
  ...baseTheme$d,
  base: [baseTheme$d.base, "bg-panel border-bottom border-panel-accent"].join(
    " "
  ),
  input: [
    baseTheme$d.input,
    "bg-panel text-text-primary placeholder:placeholder-accent"
  ].join(" ")
};
const cssVarsCommandPaletteInputTheme = {
  ...baseTheme$d,
  base: [baseTheme$d.base, "border-[var(--body-background)]"].join(" "),
  input: [
    baseTheme$d.input,
    "text-[var(--input-color)] placeholder:text-[var(--input-color-placeholder)] [padding:_var(--spacing-md)] [font-family:_var(--font-family)]"
  ].join(" ")
};
const DATA_ATTRIBUTE_INDEX = "keyboard_index";
const useFlattenedTree = (children, selectedIndex, onSelectedIndexChange) => {
  const itemsRef = useRef([]);
  const hotkeyRef = useRef([]);
  const [flattenedTree, setFlattenedTree] = useState([]);
  function flattenChildren(nodes) {
    const result = [];
    Children.forEach(nodes, (child, index) => {
      if (isValidElement(child)) {
        if (child.type.displayName === "CommandPaletteSection") {
          result.push(
            cloneElement(child, {
              children: flattenChildren(child.props.children),
              index
            })
          );
        } else if (child.type.displayName === "CommandPaletteItem") {
          const index2 = itemsRef.current.length;
          if (child.props.hotkey) {
            hotkeyRef.current.push({
              hotkey: child.props.hotkey,
              index: index2
            });
          }
          const clone = cloneElement(child, {
            // NOTE: This isn't working for some reason
            ref: (ref) => itemsRef.current[index2] = ref,
            active: index2 === selectedIndex,
            onClick: () => onSelectedIndexChange == null ? void 0 : onSelectedIndexChange(index2),
            [DATA_ATTRIBUTE_INDEX]: index2
          });
          itemsRef.current[index2] = clone;
          result.push(clone);
        } else {
          result.push(child);
        }
      }
    });
    return result;
  }
  useEffect(() => {
    itemsRef.current = [];
    hotkeyRef.current = [];
    setFlattenedTree(flattenChildren(children));
  }, [children, selectedIndex]);
  return {
    flattenedTree,
    hotkeys: hotkeyRef.current,
    itemsRef
  };
};
const CommandPalette = ({
  search,
  placeholder,
  children,
  inputIcon,
  autoFocus = true,
  emptyMessage,
  onHotkey,
  onSelectedIndexChange,
  onSearchChange,
  theme: customTheme
}) => {
  const [selectedIndex, setSelectedIndex] = useState(-1);
  const [filterText, setFilterText] = useState(search);
  const { flattenedTree, itemsRef, hotkeys } = useFlattenedTree(
    children,
    selectedIndex,
    onSelectedIndexChange
  );
  const hasChildren = Children.count(children) > 0;
  const elementRef = useRef(null);
  const handleKeyDown = (event) => {
    if (event.key === "ArrowUp") {
      setSelectedIndex((prev) => Math.max(prev - 1, -1));
    } else if (event.key === "ArrowDown") {
      setSelectedIndex((prev) => Math.min(prev + 1, itemsRef.current.length - 1));
    } else if (event.key === "Enter" && itemsRef.current[selectedIndex]) {
      onSelectedIndexChange == null ? void 0 : onSelectedIndexChange(selectedIndex);
      setSelectedIndex(-1);
    }
  };
  useEffect(() => {
    var _a;
    if (selectedIndex > -1) {
      (_a = elementRef.current.querySelector(`[${DATA_ATTRIBUTE_INDEX}="${selectedIndex}"]`)) == null ? void 0 : _a.scrollIntoView();
    }
  }, [selectedIndex, flattenedTree]);
  const theme2 = useComponentTheme(
    "commandPalette",
    customTheme
  );
  return /* @__PURE__ */ jsxs(Card, { className: theme2.base, disablePadding: true, ref: elementRef, children: [
    /* @__PURE__ */ jsx(
      CommandPaletteInput,
      {
        value: filterText,
        placeholder,
        autoFocus,
        icon: inputIcon,
        hotkeys,
        onHotkey,
        onChange: (val) => {
          setFilterText(val);
          onSearchChange == null ? void 0 : onSearchChange(val);
        },
        onKeyPress: handleKeyDown,
        onBlur: () => setSelectedIndex(-1)
      }
    ),
    /* @__PURE__ */ jsxs(MotionGroup, { children: [
      hasChildren && /* @__PURE__ */ jsx(Card, { className: theme2.inner, disablePadding: true, children: /* @__PURE__ */ jsx(List, { children: flattenedTree }) }),
      !hasChildren && emptyMessage && /* @__PURE__ */ jsx(List, { className: theme2.emptyContainer, children: /* @__PURE__ */ jsx(ListItem, { children: emptyMessage }) })
    ] })
  ] });
};
let isMac = false;
try {
  if (typeof window !== "undefined") {
    isMac = navigator.platform.toUpperCase().indexOf("MAC") >= 0;
  }
} catch (e) {
}
const MODIFIER_KEY = isMac ? "⌘" : "CTRL";
function getHotkeyText(hotkey) {
  return hotkey.replace("modifier", MODIFIER_KEY).replace("mod", MODIFIER_KEY).replace("meta", MODIFIER_KEY).replace("shift", "⇧").replace("plus", "+").replace("minus", "-");
}
const Kbd = ({
  className,
  keycode,
  theme: customTheme,
  ...rest
}) => {
  const split = keycode.split("+").map(getHotkeyText);
  const theme2 = useComponentTheme("kbd");
  return /* @__PURE__ */ jsx("span", { className: theme2.base, children: split == null ? void 0 : split.map((key, index) => /* @__PURE__ */ jsx(Chip, { ...rest, className: twMerge(theme2.chip, className), children: /* @__PURE__ */ jsx("kbd", { children: key }) }, index)) });
};
const baseTheme$c = {
  base: "inline-flex gap-1 items-center",
  chip: "whitespace-nowrap rounded font-mono"
};
const kbdTheme = {
  ...baseTheme$c
};
const legacyKbdTheme = {
  ...baseTheme$c,
  base: [baseTheme$c.base, "gap-[var(--spacing-sm);]"].join(" "),
  chip: [
    baseTheme$c.chip,
    "rounded-[var(--border-radius-sm)] [font-family:_var(--mono-font-family)]"
  ].join(" ")
};
const CommandPaletteItem = forwardRef(
  ({
    children,
    active,
    className,
    end,
    hotkey,
    onClick,
    theme: customTheme,
    ...rest
  }, ref) => {
    const { item: itemTheme } = useComponentTheme(
      "commandPalette",
      customTheme
    );
    return /* @__PURE__ */ jsx(MotionItem, { layout: true, children: /* @__PURE__ */ jsx(
      ListItem,
      {
        ...rest,
        ref,
        className: twMerge(
          itemTheme.base,
          active && itemTheme.active,
          onClick && itemTheme.clickable
        ),
        end: /* @__PURE__ */ jsxs(Fragment$1, { children: [
          hotkey && /* @__PURE__ */ jsx(Kbd, { keycode: hotkey, size: "small" }),
          end
        ] }),
        children
      }
    ) });
  }
);
CommandPaletteItem.displayName = "CommandPaletteItem";
const baseTheme$b = {
  base: "transition-colors ease-in-out duration-200",
  active: "",
  clickable: "cursor-pointer"
};
const commandPaletteItemTheme = {
  ...baseTheme$b,
  active: [baseTheme$b.active, "bg-primary text-text-primary"].join(" "),
  clickable: [
    baseTheme$b.clickable,
    "hover:bg-primary-hover/70 dark:hover:bg-primary-hover hover:dark:text-white"
  ].join(" ")
};
const cssVarsCommandPaletteItemTheme = {
  ...baseTheme$b,
  clickable: [
    baseTheme$b.clickable,
    "hover:bg-[var(--primary-background)] text-[var(--primary-color-hover)]"
  ].join(" ")
};
const CommandPaletteSection = forwardRef(({ children, className, title, index, theme: customTheme, ...rest }, ref) => {
  const { section: sectionTheme } = useComponentTheme(
    "commandPalette",
    customTheme
  );
  return /* @__PURE__ */ jsx(MotionItem, { layout: true, children: /* @__PURE__ */ jsxs(
    List,
    {
      ref,
      ...rest,
      className: twMerge(
        sectionTheme.base,
        index === 0 && sectionTheme.first,
        className
      ),
      children: [
        title && /* @__PURE__ */ jsx(ListHeader, { children: title }),
        /* @__PURE__ */ jsx(MotionGroup, { children })
      ]
    }
  ) });
});
CommandPaletteSection.displayName = "CommandPaletteSection";
const baseTheme$a = {
  base: "",
  first: "pt-2.5"
};
const commandPaletteSectionTheme = {
  ...baseTheme$a,
  base: [baseTheme$a.base, "bg-panel"].join(" ")
};
const cssVarsCommandPaletteSectionTheme = {
  ...baseTheme$a,
  first: "pt-[var(--spacing-md)]"
};
const baseTheme$9 = {
  base: "w-full border",
  inner: "max-h-[80vh] overflow-y-auto"
};
const commandPaletteTheme = {
  base: [baseTheme$9.base, "border-panel-accent"].join(" "),
  inner: [baseTheme$9.inner, "bg-panel border-0"].join(" "),
  emptyContainer: "bg-panel",
  input: commandPaletteInputTheme,
  item: commandPaletteItemTheme,
  section: commandPaletteSectionTheme
};
const legacyCommandPaletteTheme = {
  base: [baseTheme$9.base, "border-panel-accent"].join(" "),
  inner: baseTheme$9.inner,
  emptyContainer: "",
  input: cssVarsCommandPaletteInputTheme,
  item: cssVarsCommandPaletteItemTheme,
  section: cssVarsCommandPaletteSectionTheme
};
const SvgArrowEnd = (props) => /* @__PURE__ */ React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React.createElement("path", { d: "M 9.4140625 4 L 8 5.4140625 L 18.585938 16 L 8 26.585938 L 9.4140625 28 L 21 16.414062 L 21 28 L 23 28 L 23 4 L 21 4 L 21 15.585938 L 9.4140625 4 z" }));
const SvgArrowNext = (props) => /* @__PURE__ */ React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React.createElement("path", { d: "M 12.96875 4.28125 L 11.53125 5.71875 L 21.8125 16 L 11.53125 26.28125 L 12.96875 27.71875 L 23.96875 16.71875 L 24.65625 16 L 23.96875 15.28125 Z" }));
const SvgArrowPrevious = (props) => /* @__PURE__ */ React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React.createElement("path", { d: "M 19.03125 4.28125 L 8.03125 15.28125 L 7.34375 16 L 8.03125 16.71875 L 19.03125 27.71875 L 20.46875 26.28125 L 10.1875 16 L 20.46875 5.71875 Z" }));
const SvgArrowStart = (props) => /* @__PURE__ */ React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 32 32", width: "32px", height: "32px", fill: "currentColor", ...props }, /* @__PURE__ */ React.createElement("path", { d: "M 9 4 L 9 28 L 11 28 L 11 16.414062 L 22.585938 28 L 24 26.585938 L 13.414062 16 L 24 5.4140625 L 22.585938 4 L 11 15.585938 L 11 4 L 9 4 z" }));
const PAGE_COUNT = 6;
const FUZZY_RANGE = 3;
function getPageRange(page, totalPages) {
  let startPage = Math.max(page - FUZZY_RANGE, 0);
  let endPage = Math.min(page + FUZZY_RANGE, totalPages);
  if (startPage === 0 && endPage !== totalPages) {
    endPage = startPage + PAGE_COUNT;
  } else if (endPage === totalPages && startPage !== 0) {
    startPage = endPage - PAGE_COUNT;
  }
  return [startPage, endPage];
}
function getItemsRange(page, perPage, totalItems) {
  const startItem = page * perPage + 1;
  const endOfPage = (page + 1) * perPage;
  const endItem = Math.min(endOfPage, totalItems);
  return [startItem, endItem];
}
const Pager = ({
  className,
  pageClassName,
  activePageClassName,
  pagesContainerClassName,
  page,
  size: size2,
  total,
  startArrow = /* @__PURE__ */ jsx(SvgArrowStart, {}),
  endArrow = /* @__PURE__ */ jsx(SvgArrowEnd, {}),
  previousArrow = /* @__PURE__ */ jsx(SvgArrowPrevious, {}),
  nextArrow = /* @__PURE__ */ jsx(SvgArrowNext, {}),
  onPageChange,
  displayMode = "pages",
  theme: customTheme
}) => {
  const pageCount = Math.ceil(total / size2);
  const canPrevious = page !== 0;
  const canNext = page < pageCount - 1;
  const [startPage, endPage] = getPageRange(page, pageCount - 1);
  const [startItem, endItem] = getItemsRange(page, size2, total);
  const theme2 = useComponentTheme("pager", customTheme);
  const previousPage = useCallback(() => {
    if (canPrevious) {
      onPageChange == null ? void 0 : onPageChange(page - 1);
    } else {
      onPageChange == null ? void 0 : onPageChange(0);
    }
  }, [canPrevious, page, onPageChange]);
  const nextPage = useCallback(() => {
    if (canNext) {
      onPageChange == null ? void 0 : onPageChange(page + 1);
    } else {
      onPageChange == null ? void 0 : onPageChange(pageCount - 1);
    }
  }, [canNext, page, onPageChange, pageCount]);
  return /* @__PURE__ */ jsxs("div", { className: twMerge(theme2.base, className), children: [
    (displayMode === "items" || displayMode === "all") && /* @__PURE__ */ jsxs("div", { className: theme2.pagerDisplayItems, children: [
      pageCount === 1 && total > 0 && /* @__PURE__ */ jsxs(Text, { children: [
        "Showing ",
        total === 1 ? total : `all ${total.toLocaleString()}`,
        " ",
        /* @__PURE__ */ jsx(Pluralize, { count: total, singular: "item", showCount: false })
      ] }),
      pageCount > 1 && /* @__PURE__ */ jsx(Stack, { className: theme2.itemsDisplay, dense: true, children: /* @__PURE__ */ jsxs(Text, { children: [
        /* @__PURE__ */ jsxs(Text, { className: theme2.showPageRange, children: [
          startItem.toLocaleString(),
          "-",
          endItem.toLocaleString()
        ] }),
        " ",
        "of",
        " ",
        /* @__PURE__ */ jsx(Text, { className: theme2.totalCount, children: total.toLocaleString() }),
        " ",
        /* @__PURE__ */ jsx(Pluralize, { count: total, singular: "item", showCount: false })
      ] }) })
    ] }),
    startArrow && /* @__PURE__ */ jsx(
      Button,
      {
        className: twMerge(theme2.control, theme2.firstPage),
        variant: "text",
        size: "small",
        disablePadding: true,
        title: "First Page",
        onClick: () => onPageChange == null ? void 0 : onPageChange(0),
        disabled: !canPrevious,
        children: startArrow
      }
    ),
    /* @__PURE__ */ jsx(
      Button,
      {
        className: twMerge(theme2.control, theme2.prevPage),
        variant: "text",
        size: "small",
        disablePadding: true,
        title: "Previous page",
        onClick: previousPage,
        disabled: !canPrevious,
        children: previousArrow
      }
    ),
    (displayMode === "pages" || displayMode === "all") && /* @__PURE__ */ jsxs("div", { className: twMerge(theme2.pages.base, pagesContainerClassName), children: [
      startPage >= 2 && /* @__PURE__ */ jsx("div", { className: twMerge(theme2.ellipsis), children: " ..." }),
      [...Array(pageCount)].map((_, i) => /* @__PURE__ */ jsx(Fragment, { children: i >= startPage && i <= endPage && /* @__PURE__ */ jsx(
        Button,
        {
          variant: "text",
          size: "small",
          disabled: page === i,
          title: `Page ${(i + 1).toLocaleString()}`,
          className: twMerge(
            theme2.pages.page.base,
            page === i && (activePageClassName || theme2.pages.page.active),
            pageClassName
          ),
          onClick: () => onPageChange == null ? void 0 : onPageChange(i),
          children: (i + 1).toLocaleString()
        }
      ) }, i)),
      endPage <= pageCount - FUZZY_RANGE && /* @__PURE__ */ jsx("div", { className: twMerge(theme2.ellipsis), children: "... " })
    ] }),
    /* @__PURE__ */ jsx(
      Button,
      {
        className: twMerge(theme2.control, theme2.nextPage),
        variant: "text",
        title: "Next Page",
        size: "small",
        disablePadding: true,
        onClick: nextPage,
        disabled: !canNext,
        children: nextArrow
      }
    ),
    endArrow && /* @__PURE__ */ jsx(
      Button,
      {
        className: twMerge(theme2.control, theme2.lastPage),
        size: "small",
        title: "Last Page",
        disablePadding: true,
        variant: "text",
        onClick: () => onPageChange == null ? void 0 : onPageChange(pageCount - 1),
        disabled: !canNext,
        children: endArrow
      }
    )
  ] });
};
const baseTheme$8 = {
  base: "items-center flex user-select-none",
  pages: {
    base: "inline-flex",
    page: {
      base: "py-1",
      active: "font-bold"
    }
  },
  ellipsis: "cursor-pointer",
  pagerDisplayItems: "mr-1.5",
  itemsDisplay: "",
  showPageRange: "",
  totalCount: "",
  control: "[&>svg]:w-5 [&>svg]:h-5",
  firstPage: "",
  prevPage: "",
  lastPage: "",
  nextPage: ""
};
const pagerTheme = {
  ...baseTheme$8,
  pages: {
    ...baseTheme$8.pages,
    page: {
      base: [baseTheme$8.pages.page.base, "text-slate-500"].join(" "),
      active: [baseTheme$8.pages.page.active, "!text-text-primary"].join(" ")
    }
  },
  control: [
    baseTheme$8.control,
    "text-slate-200 light:text-slate-400 disabled:light:text-slate-300"
  ].join(" "),
  pagerDisplayItems: [baseTheme$8.pagerDisplayItems, "text-slate-500"].join(" ")
};
const legacyPagerTheme = {
  ...baseTheme$8,
  pages: {
    ...baseTheme$8.pages,
    page: {
      base: [baseTheme$8.pages.page.base, "px-[var(--spacing-sm)]"].join(" "),
      active: [baseTheme$8.pages.page.active, "!text-[var(--input-color)]"].join(
        " "
      )
    }
  },
  pagerDisplayItems: ["text-[var(--gray-100)] mr-[var(--spacing-sm)]"].join(" ")
};
const AvatarGroup = forwardRef(
  ({
    children,
    className,
    size: size2 = 10,
    theme: customTheme,
    ...rest
  }, ref) => {
    const childrenArray = Children.toArray(children);
    const { data, hasMore, remaining } = useInfinityList({
      items: childrenArray,
      size: size2
    });
    const theme2 = useComponentTheme(
      "avatarGroup",
      customTheme
    );
    return /* @__PURE__ */ jsxs("div", { ...rest, ref, className: twMerge(theme2.base, className), children: [
      data.map((child, index) => /* @__PURE__ */ jsx("div", { className: theme2.avatar, children: child }, index)),
      hasMore && /* @__PURE__ */ jsxs("span", { className: theme2.overflow, children: [
        "+",
        remaining,
        " more"
      ] })
    ] });
  }
);
const baseTheme$7 = {
  base: "flex items-center",
  avatar: "-ml-2.5",
  overflow: "ml-[5px]"
};
const avatarGroupTheme = {
  ...baseTheme$7,
  base: [baseTheme$7.base, "text-text-primary"].join(" ")
};
const legacyAvatarGroupTheme = {
  ...baseTheme$7,
  base: [
    baseTheme$7.base,
    "text-[var(--avatar-initials-color)] border-[var(--avatar-border)]"
  ].join(" ")
};
const Badge = forwardRef(
  ({
    children,
    color = "default",
    className,
    disableMargins,
    content,
    hidden,
    placement = "top-end",
    theme: customTheme,
    ...rest
  }, ref) => {
    const theme2 = useComponentTheme("badge", customTheme);
    return /* @__PURE__ */ jsxs(
      "span",
      {
        className: twMerge(theme2.base, disableMargins && theme2.disableMargins),
        children: [
          children,
          !hidden && /* @__PURE__ */ jsx(
            motion.span,
            {
              initial: { opacity: 0, scale: 1 },
              animate: { opacity: 1, scale: 1 },
              "aria-hidden": "true",
              children: /* @__PURE__ */ jsx(
                "span",
                {
                  ...rest,
                  ref,
                  className: twMerge(
                    theme2.badge,
                    theme2.position,
                    theme2.colors[color],
                    theme2.positions[placement],
                    className
                  ),
                  children: content
                }
              )
            }
          )
        ]
      }
    );
  }
);
const baseTheme$6 = {
  base: "relative inline-flex align-middle shrink-0 mx-2 my-0",
  disableMargins: "m-0",
  badge: `flex flex-row flex-wrap justify-center content-center items-center absolute box-border
   leading-none text-sm p-1.5 w-[18px] h-[18px] z-[1] rounded-[50%] pointer-events-none `,
  position: "translate-x-2/4 -translate-y-2/4 origin-[100%_0%] right-0 top-0",
  positions: {
    "top-start": "top-0 left-0 -translate-x-2/4 -translate-y-2/4 origin-[0%_0%]",
    "top-end": "top-0 right-0 translate-x-2/4 -translate-y-2/4 origin-[100%_0%]",
    "bottom-start": "bottom-0 left-0 -translate-x-2/4 translate-y-2/4 origin-[0%_100%]",
    "bottom-end": "bottom-0 right-0 translate-x-2/4 translate-y-2/4 origin-[100%_100%]"
  }
};
const badgeTheme = {
  base: baseTheme$6.base,
  disableMargins: baseTheme$6.disableMargins,
  badge: baseTheme$6.badge,
  position: baseTheme$6.position,
  positions: baseTheme$6.positions,
  colors: {
    default: "bg-white text-black",
    primary: "bg-primary text-text-primary",
    secondary: "bg-secondary text-text-primary",
    error: "bg-error text-text-primary"
  }
};
const legacyBadgeTheme = {
  base: baseTheme$6.base,
  disableMargins: baseTheme$6.disableMargins,
  badge: [
    baseTheme$6.badge,
    "p-[var(--spacing-xs)] rounded-[var(--badge-border-radius)] text-[var(--font-size-sm)]"
  ].join(" "),
  position: baseTheme$6.position,
  positions: baseTheme$6.positions,
  colors: {
    default: "bg-[var(--badge-color-background-default)] text-[var(--badge-color-default)]",
    primary: "bg-[var(--badge-color-background-primary)] text-[var(--badge-color-primary)]",
    secondary: "bg-[var(--badge-color-background-secondary)] text-[var(--badge-color-secondary)]",
    error: "bg-[var(--badge-color-background-error)] text-[var(--badge-color-error)]"
  }
};
const createStateHook = () => {
  let tooltips = [];
  function addTooltip(newTip) {
    tooltips = [...tooltips, newTip];
  }
  function deactivateTooltip(tooltip, isPopover) {
    const idx = tooltips.indexOf(tooltip);
    if (idx > -1) {
      const tip = tooltips[idx];
      const shouldRemove = tip(false, isPopover);
      if (shouldRemove) {
        tooltips.splice(idx, 1);
      }
    }
  }
  function deactivateAllTooltips(isPopover) {
    const newTooltips = [];
    tooltips.forEach((ref) => {
      const shouldRemvoe = ref(false, isPopover);
      if (!shouldRemvoe) {
        newTooltips.push(ref);
      }
    });
    tooltips = [...newTooltips];
  }
  return () => {
    const [state, setState] = useState([]);
    useEffect(() => {
      setState(tooltips);
    }, []);
    return {
      tooltips: state,
      deactivateAllTooltips,
      deactivateTooltip,
      addTooltip
    };
  };
};
const useTooltipState = createStateHook();
const Tooltip = ({
  className,
  children,
  content,
  triggerClassName,
  disabled = false,
  enterDelay = 0,
  leaveDelay = 200,
  placement = "top",
  trigger = "hover",
  visible = false,
  followCursor = false,
  closeOnClick = false,
  closeOnEscape = true,
  closeOnBodyClick = true,
  pointerEvents = "none",
  isPopover,
  onOpen,
  onClose,
  theme: customTheme,
  ...rest
}) => {
  const { addTooltip, deactivateTooltip, deactivateAllTooltips } = useTooltipState();
  const [internalVisible, setInternalVisible] = useState(visible);
  const timeout = useRef(null);
  const mounted = useRef(false);
  const ref = useRef(
    (vis, isPop) => {
      if (isPop === isPopover) {
        setInternalVisible(vis);
      }
      return isPop === isPopover;
    }
  );
  useEffect(() => {
    if (!mounted.current) {
      mounted.current = true;
    } else {
      setInternalVisible(visible);
    }
    const curRef = ref.current;
    const timer = timeout.current;
    return () => {
      clearTimeout(timer);
      deactivateTooltip(curRef, isPopover);
    };
  }, [deactivateTooltip, isPopover, visible]);
  const theme2 = useComponentTheme("tooltip", customTheme);
  return /* @__PURE__ */ jsx(
    ConnectedOverlay,
    {
      ...rest,
      placement,
      trigger,
      followCursor,
      triggerClassName,
      portalClassName: pointerEvents === "none" && theme2.disablePointer,
      open: internalVisible,
      closeOnBodyClick,
      closeOnEscape,
      content: () => {
        const contentChildren = typeof content === "function" ? content() : content;
        if (!contentChildren) {
          return null;
        }
        return /* @__PURE__ */ jsx(
          motion.div,
          {
            className: twMerge(theme2.base, className),
            initial: {
              opacity: 0,
              scale: 0.3,
              transition: {
                when: "beforeChildren"
              }
            },
            animate: {
              opacity: 1,
              scale: 1,
              transition: {
                when: "beforeChildren"
              }
            },
            exit: { opacity: 0, scale: 0.3 },
            onClick: () => {
              if (closeOnClick) {
                deactivateAllTooltips(isPopover);
              }
            },
            children: contentChildren
          }
        );
      },
      onOpen: () => {
        if (!internalVisible) {
          clearTimeout(timeout.current);
          timeout.current = setTimeout(() => {
            if (!disabled) {
              deactivateAllTooltips(isPopover);
              setInternalVisible(true);
              addTooltip(ref.current);
              onOpen == null ? void 0 : onOpen();
            }
          }, enterDelay);
        }
      },
      onClose: (e) => {
        var _a, _b;
        if (((_a = e == null ? void 0 : e.nativeEvent) == null ? void 0 : _a.type) !== "click" || ((_b = e == null ? void 0 : e.nativeEvent) == null ? void 0 : _b.type) === "click" && closeOnClick) {
          clearTimeout(timeout.current);
          timeout.current = setTimeout(() => {
            deactivateTooltip(ref.current, isPopover);
            onClose == null ? void 0 : onClose();
          }, leaveDelay);
        }
      },
      children
    }
  );
};
const baseTheme$5 = {
  base: "whitespace-nowrap text-center will-change-[transform,opacity] p-1.5 rounded",
  disablePointer: "pointer-events-none"
};
const tooltipTheme = {
  ...baseTheme$5,
  base: [baseTheme$5.base, "bg-panel-accent text-text-primary"].join(" ")
};
const legacyTooltipTheme = {
  ...baseTheme$5,
  base: [
    baseTheme$5.base,
    "text-[color:var(--tooltip-color)] rounded-[var(--tooltip-border-radius)] border-[length:var(--tooltip-border)] pt-[var(--tooltip-spacing)] pr-[var(--tooltip-spacing)] pb-[var(--tooltip-spacing)] pl-[var(--tooltip-spacing)] bg-[var(--tooltip-background)]"
  ].join(" ")
};
const Popover = ({
  closeOnEscape = true,
  closeOnBodyClick = true,
  trigger = "click",
  leaveDelay = 200,
  children,
  content,
  className,
  disablePadding,
  popoverStyle,
  popoverClassName,
  theme: customTheme,
  autoFocus,
  ...rest
}) => {
  const id2 = useId();
  const theme2 = useComponentTheme("popover", customTheme);
  return /* @__PURE__ */ jsx(
    Tooltip,
    {
      ...rest,
      trigger,
      pointerEvents: "initial",
      leaveDelay,
      isPopover: true,
      className: twMerge(
        theme2.base,
        disablePadding && theme2.disablePadding,
        className
      ),
      content: () => {
        const isContentFunction = typeof content === "function";
        const children2 = isContentFunction ? content() : content;
        if (!children2) {
          return null;
        }
        return /* @__PURE__ */ jsx(
          FocusTrap,
          {
            focusTrapOptions: {
              escapeDeactivates: true,
              clickOutsideDeactivates: true,
              fallbackFocus: `#${id2}`,
              initialFocus: autoFocus
            },
            children: /* @__PURE__ */ jsx(
              "div",
              {
                id: id2,
                tabIndex: -1,
                style: popoverStyle,
                className: popoverClassName,
                children: children2
              }
            )
          }
        );
      },
      children
    }
  );
};
const baseTheme$4 = {
  base: "whitespace-nowrap text-center will-change-[transform,opacity] p-1.5 rounded",
  disablePadding: "p-0"
};
const popoverTheme = {
  ...baseTheme$4,
  base: [baseTheme$4.base, "bg-panel text-text-primary"].join(" ")
};
const legacyPopoverTheme = {
  ...baseTheme$4,
  base: [
    baseTheme$4.base,
    "text-[color:var(--popover-color)] rounded-[var(--popover-border-radius)] pt-[var(--popover-spacing)] pr-[var(--popover-spacing)] pb-[var(--popover-spacing)] pl-[var(--popover-spacing)] bg-[var(--popover-background)]"
  ].join(" ")
};
const DialogHeader = ({
  children,
  className,
  showCloseButton,
  disablePadding,
  onClose,
  theme: customTheme
}) => {
  const theme2 = useComponentTheme("dialog", customTheme);
  return /* @__PURE__ */ jsxs(
    "header",
    {
      className: twMerge(
        theme2.header.base,
        className,
        disablePadding && "pt-0 pb-0 pl-0 pr-0"
      ),
      children: [
        /* @__PURE__ */ jsx("div", { children: typeof children === "string" ? /* @__PURE__ */ jsx("h1", { className: theme2.header.text, children }) : children }),
        showCloseButton && /* @__PURE__ */ jsx(
          "button",
          {
            type: "button",
            className: theme2.header.closeButton,
            onClick: onClose,
            "aria-label": "Close",
            children: "✕"
          }
        )
      ]
    }
  );
};
const Dialog = ({
  children,
  open,
  className,
  innerClassName,
  contentClassName,
  header,
  headerElement = /* @__PURE__ */ jsx(DialogHeader, {}),
  footer,
  onClose,
  size: size2 = "50%",
  disablePadding = false,
  hasBackdrop = true,
  showCloseButton = true,
  closeOnBackdropClick = true,
  closeOnEscape = true,
  theme: customTheme,
  ...rest
}) => {
  const id2 = useId();
  const theme2 = useComponentTheme("dialog", customTheme);
  return /* @__PURE__ */ jsx(
    GlobalOverlay,
    {
      open,
      hasBackdrop,
      closeOnEscape,
      closeOnBackdropClick,
      onClose,
      children: ({ overlayIndex }) => /* @__PURE__ */ jsx(
        FocusTrap,
        {
          focusTrapOptions: {
            clickOutsideDeactivates: true,
            escapeDeactivates: true,
            fallbackFocus: `#${id2}-content`
          },
          children: /* @__PURE__ */ jsx("div", { id: id2, tabIndex: -1, children: /* @__PURE__ */ jsx(
            motion.div,
            {
              initial: { opacity: 0, y: "-20%" },
              animate: { opacity: 1, y: 0 },
              exit: { opacity: 0, y: "20%" },
              transition: { duration: 0.5, ease: [0.04, 0.62, 0.23, 0.98] },
              style: { zIndex: overlayIndex },
              className: twMerge(theme2.base, className),
              ...rest,
              children: /* @__PURE__ */ jsxs(
                "div",
                {
                  className: twMerge(theme2.inner, innerClassName),
                  style: { width: size2 },
                  children: [
                    (header || headerElement) && /* @__PURE__ */ jsx(
                      CloneElement,
                      {
                        element: headerElement,
                        showCloseButton,
                        disablePadding,
                        onClose,
                        children: header
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "section",
                      {
                        id: `${id2}-content`,
                        className: classNames(
                          theme2.content,
                          contentClassName,
                          !header && "p-[20px]",
                          disablePadding && "pt-0 pb-0 pl-0 pr-0"
                        ),
                        children: typeof children === "function" ? children() : children
                      }
                    ),
                    footer && /* @__PURE__ */ jsx("footer", { className: theme2.footer, children: footer })
                  ]
                }
              )
            }
          ) })
        }
      )
    }
  );
};
const useDialog = (prop) => {
  const { open, onClose } = prop || {};
  const [internalOpen, setInternalOpen] = useState(open);
  useEffect(() => {
    setInternalOpen(open);
  }, [open]);
  const onCloseInternal = useCallback(() => {
    setInternalOpen(false);
    onClose == null ? void 0 : onClose();
  }, [onClose]);
  const onToggleOpen = () => {
    setInternalOpen(!open);
  };
  const Component = useCallback(
    (props) => /* @__PURE__ */ jsx(Dialog, { ...props, open: internalOpen, onClose: onCloseInternal }),
    [internalOpen, onCloseInternal]
  );
  return {
    isOpen: internalOpen,
    setOpen: setInternalOpen,
    toggleOpen: onToggleOpen,
    Dialog: Component
  };
};
const baseTheme$3 = {
  base: "justify-center items-center flex pointer-events-none top-0 left-0 w-full h-full fixed will-change-transform will-change-opacity",
  inner: "flex flex-col box-border outline-0 pointer-events-auto overflow-auto max-w-[80vw] max-h-[80vh]",
  content: "p-[20px] flex-auto overflow-auto",
  footer: "flex p-[20px] pb-[10px]",
  header: {
    base: "flex justify-between pt-[20px] px-[20px] pb-[10px]",
    text: "flex-1 m-0 p-0 inline-flex text-3xl font-bold",
    closeButton: "p-0 m-0 ml-[15px] opacity-80 h-auto w-auto inline-flex bg-none border-none cursor-pointer items-center text-[16px] focus:outline-none"
  }
};
const dialogTheme = {
  ...baseTheme$3,
  inner: [
    baseTheme$3.inner,
    "bg-panel text-text-primary border border-panel-accent rounded shadow-2xl"
  ].join(" "),
  header: {
    ...baseTheme$3.header,
    closeButton: [baseTheme$3.header.closeButton, "text-text-primary"].join(" ")
  }
};
const legacyDialogTheme = {
  ...baseTheme$3,
  inner: [
    baseTheme$3.inner,
    "bg-[var(--dialog-background)] text-[var(--dialog-color)]"
  ].join(" ")
};
const variants = {
  start: {
    initial: {
      x: "-100%"
    },
    animate: {
      x: "0%"
    }
  },
  end: {
    initial: {
      x: "100%"
    },
    animate: {
      x: "0%"
    }
  },
  top: {
    initial: {
      y: "-100%"
    },
    animate: {
      y: "0%"
    }
  },
  bottom: {
    initial: {
      y: "100%"
    },
    animate: {
      y: "0%"
    }
  }
};
const DrawerHeader = ({
  children,
  className,
  showCloseButton,
  onClose,
  theme: customTheme
}) => {
  const theme2 = useComponentTheme("drawer", customTheme);
  return /* @__PURE__ */ jsxs("header", { className: twMerge(theme2.header.base, className), children: [
    /* @__PURE__ */ jsx("div", { children: typeof children === "string" ? /* @__PURE__ */ jsx("h1", { className: theme2.header.text, children }) : children }),
    showCloseButton && /* @__PURE__ */ jsx(
      "button",
      {
        type: "button",
        className: theme2.closeButton.base,
        onClick: onClose,
        "aria-label": "Close",
        children: "✕"
      }
    )
  ] });
};
const Drawer = ({
  className,
  contentClassName,
  headerElement = /* @__PURE__ */ jsx(DrawerHeader, {}),
  children,
  open,
  backdropClassName,
  header,
  position = "end",
  size: size2 = "80%",
  hasBackdrop = true,
  closeOnEscape = true,
  closeOnBackdropClick = true,
  disablePadding = false,
  showCloseButton = true,
  onClose,
  theme: customTheme,
  ...rest
}) => {
  const id2 = useId();
  const variant = variants[position];
  const style = {
    width: position === "start" || position === "end" ? size2 : "auto",
    height: position === "top" || position === "bottom" ? size2 : "auto"
  };
  const theme2 = useComponentTheme("drawer", customTheme);
  return /* @__PURE__ */ jsx(
    GlobalOverlay,
    {
      open,
      hasBackdrop,
      closeOnEscape,
      closeOnBackdropClick,
      onClose,
      backdropClassName,
      children: ({ overlayIndex }) => /* @__PURE__ */ jsx(
        FocusTrap,
        {
          focusTrapOptions: {
            clickOutsideDeactivates: true,
            escapeDeactivates: true,
            fallbackFocus: `#${id2}`
          },
          children: /* @__PURE__ */ jsx("div", { id: id2, tabIndex: -1, children: /* @__PURE__ */ jsxs(
            motion.div,
            {
              initial: "initial",
              animate: "animate",
              exit: "initial",
              variants: variant,
              transition: {
                duration: 0.5,
                ease: [0.04, 0.62, 0.23, 0.98],
                when: "beforeChildren"
              },
              style: { ...style, zIndex: overlayIndex },
              className: twMerge(
                theme2.base,
                theme2.positions[position],
                disablePadding && theme2.disablePadding,
                className
              ),
              ...rest,
              onAnimationComplete: () => {
                window.dispatchEvent(new Event("resize"));
              },
              children: [
                (header || headerElement) && /* @__PURE__ */ jsx(
                  CloneElement,
                  {
                    element: headerElement,
                    showCloseButton,
                    onClose,
                    children: header
                  }
                ),
                !header && !headerElement && showCloseButton && /* @__PURE__ */ jsx(
                  "button",
                  {
                    type: "button",
                    className: twMerge(
                      theme2.closeButton.base,
                      theme2.closeButton.headerless
                    ),
                    onClick: onClose,
                    children: "✕"
                  }
                ),
                /* @__PURE__ */ jsx("div", { className: twMerge(theme2.content, contentClassName), children: typeof children === "function" ? children() : children })
              ]
            }
          ) })
        }
      )
    }
  );
};
const useDrawer = (prop) => {
  const { open, onClose } = prop || {};
  const [internalOpen, setInternalOpen] = useState(open);
  useEffect(() => {
    setInternalOpen(open);
  }, [open]);
  const onCloseInternal = useCallback(() => {
    setInternalOpen(false);
    onClose == null ? void 0 : onClose();
  }, [onClose]);
  const onToggleOpen = () => {
    setInternalOpen(!internalOpen);
  };
  const Component = useCallback(
    (props) => /* @__PURE__ */ jsx(Drawer, { ...props, open: internalOpen, onClose: onCloseInternal }),
    [internalOpen, onCloseInternal]
  );
  return {
    isOpen: internalOpen,
    setOpen: setInternalOpen,
    toggleOpen: onToggleOpen,
    Drawer: Component
  };
};
const baseTheme$2 = {
  base: "fixed overflow-y-auto overflow-x-hidden",
  header: {
    base: "flex items-center justify-between px-8 py-5 text-3xl font-bold",
    text: "flex-1 m-0"
  },
  content: "px-8 py-5",
  disablePadding: "p-0",
  closeButton: {
    base: "opacity-80 h-auto w-auto min-w-[auto] min-h-[auto] cursor-pointer text-base p-0 border-0 focus:outline-none",
    headerless: "absolute right-5 top-5"
  },
  positions: {
    top: "w-full inset-x-0 top-0",
    end: "h-full inset-y-0 right-0",
    bottom: "w-full inset-x-0 bottom-0",
    start: "h-full inset-y-0 left-0"
  }
};
const drawerTheme = {
  ...baseTheme$2,
  base: [baseTheme$2.base, "bg-panel text-text-primary"].join(" ")
};
const legacyDrawerTheme = {
  ...baseTheme$2,
  base: [
    baseTheme$2.base,
    "bg-[var(--drawer-background)] text-[var(--drawer-color)]"
  ].join(" "),
  closeButton: {
    ...baseTheme$2.closeButton,
    base: [baseTheme$2.closeButton.base, "text-[var(--drawer-color)]"].join(" ")
  }
};
const useGlobalMenuState = creteGlobalStateHook([]);
const ContextMenu = ({
  children,
  content,
  disabled,
  triggerClassName,
  triggerOpenClassName,
  autofocus = true,
  autoClose = true,
  theme: customTheme,
  closeOnEscape = true,
  closeOnBodyClick = true,
  ...rest
}) => {
  const id2 = useId();
  const [menus, setMenus] = useGlobalMenuState();
  const [open, setOpen] = useState(false);
  const onOpen = useCallback(() => {
    if (!disabled) {
      menus.forEach((m) => m(false));
      setOpen(true);
      setMenus([setOpen]);
    }
  }, [disabled, setOpen, setMenus, menus]);
  const closeAll = useCallback(() => {
    setOpen(false);
    setMenus([]);
  }, [setOpen, setMenus]);
  const close = useCallback(() => {
    setOpen(false);
    setMenus(menus.filter((m) => m !== setOpen));
  }, [menus, setMenus]);
  const onClose = useCallback(() => {
    closeAll();
  }, [closeAll]);
  useEffect(() => {
    if (open) {
      closeAll();
    }
  }, [closeAll]);
  const theme2 = useComponentTheme("contextMenu", customTheme);
  return /* @__PURE__ */ jsx(
    ConnectedOverlay,
    {
      placement: "bottom-start",
      triggerElement: "span",
      closeOnEscape,
      closeOnBodyClick,
      ...rest,
      triggerClassName: twMerge(
        triggerClassName,
        !disabled && theme2.enabled,
        open && triggerOpenClassName
      ),
      trigger: "contextmenu",
      open,
      content: () => /* @__PURE__ */ jsx(
        motion.div,
        {
          initial: { opacity: 0, y: -25 },
          animate: { opacity: 1, y: 0 },
          exit: { opacity: 0, y: -25 },
          onClick: () => autoClose && (onClose == null ? void 0 : onClose()),
          children: autofocus ? /* @__PURE__ */ jsx(
            FocusTrap,
            {
              focusTrapOptions: {
                escapeDeactivates: true,
                clickOutsideDeactivates: true,
                fallbackFocus: `#${id2}`
              },
              children: /* @__PURE__ */ jsx("div", { id: id2, tabIndex: -1, children: typeof content === "function" ? content({ closeAll, close }) : content })
            }
          ) : /* @__PURE__ */ jsx(Fragment$1, { children: typeof content === "function" ? content({ closeAll, close }) : content })
        }
      ),
      onOpen,
      onClose,
      children
    }
  );
};
const baseTheme$1 = {
  enabled: "cursor-context-menu"
};
const contextMenuTheme = {
  ...baseTheme$1
};
const legacyContextMenuTheme = {
  ...baseTheme$1
};
const Notification = ({
  id: id2,
  title,
  showClose,
  body,
  timeout,
  className,
  variant,
  icon,
  action,
  component,
  onClose,
  theme: customTheme
}) => {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
  const timeoutRef = useRef(null);
  const clearTimer = useCallback(() => clearTimeout(timeoutRef.current), []);
  const startTimer = useCallback(() => {
    clearTimer();
    timeoutRef.current = setTimeout(() => onClose == null ? void 0 : onClose(id2), timeout);
  }, [id2, timeout, onClose, clearTimer]);
  useEffect(() => {
    startTimer();
    return () => clearTimer();
  }, [clearTimer, startTimer]);
  const theme2 = useComponentTheme(
    "notification",
    customTheme
  );
  return /* @__PURE__ */ jsxs(
    motion.div,
    {
      layout: true,
      initial: { opacity: 0, y: 50, scale: 0.5 },
      animate: { opacity: 1, y: 0, scale: 1 },
      exit: { opacity: 0, scale: 0.5, transition: { duration: 0.2 } },
      onMouseEnter: clearTimer,
      onMouseLeave: startTimer,
      children: [
        component,
        !component && /* @__PURE__ */ jsxs(
          "div",
          {
            className: twMerge(
              (_a = theme2.notification) == null ? void 0 : _a.base,
              (_d = (_c = (_b = theme2.notification) == null ? void 0 : _b.variants) == null ? void 0 : _c[variant]) == null ? void 0 : _d.base,
              className
            ),
            children: [
              /* @__PURE__ */ jsxs("div", { className: (_e = theme2.notification) == null ? void 0 : _e.content, children: [
                title && /* @__PURE__ */ jsxs("div", { className: theme2.notification.header, children: [
                  icon && /* @__PURE__ */ jsx(
                    "div",
                    {
                      className: (_h = (_g = (_f = theme2.notification) == null ? void 0 : _f.variants) == null ? void 0 : _g[variant]) == null ? void 0 : _h.icon,
                      children: icon
                    }
                  ),
                  title
                ] }),
                body && /* @__PURE__ */ jsx("div", { className: theme2.notification.body, children: typeof body === "string" ? /* @__PURE__ */ jsx("span", { dangerouslySetInnerHTML: { __html: body } }) : body })
              ] }),
              action && /* @__PURE__ */ jsx("div", { className: theme2.notification.action, children: action }),
              /* @__PURE__ */ jsx("div", { className: (_i = theme2.notification) == null ? void 0 : _i.closeContainer, children: showClose && /* @__PURE__ */ jsx(
                "button",
                {
                  type: "button",
                  className: (_j = theme2.notification) == null ? void 0 : _j.closeButton,
                  onClick: () => onClose == null ? void 0 : onClose(id2),
                  children: "✕"
                }
              ) })
            ]
          }
        )
      ]
    }
  );
};
const NotificationsContext = createContext({
  notify: () => void 0,
  notifyError: () => void 0,
  notifyWarning: () => void 0,
  notifySuccess: () => void 0,
  notifyInfo: () => void 0,
  clearNotification: () => void 0,
  clearAllNotifications: () => void 0
});
const SvgInfo = (props) => /* @__PURE__ */ React.createElement("svg", { width: 16, height: 16, viewBox: "0 0 16 16", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React.createElement("g", { clipPath: "url(#clip0_241_649)" }, /* @__PURE__ */ React.createElement("path", { d: "M7.33331 4.66671H8.66665V6.00004H7.33331V4.66671ZM7.33331 7.33337H8.66665V11.3334H7.33331V7.33337ZM7.99998 1.33337C4.31998 1.33337 1.33331 4.32004 1.33331 8.00004C1.33331 11.68 4.31998 14.6667 7.99998 14.6667C11.68 14.6667 14.6666 11.68 14.6666 8.00004C14.6666 4.32004 11.68 1.33337 7.99998 1.33337ZM7.99998 13.3334C5.05998 13.3334 2.66665 10.94 2.66665 8.00004C2.66665 5.06004 5.05998 2.66671 7.99998 2.66671C10.94 2.66671 13.3333 5.06004 13.3333 8.00004C13.3333 10.94 10.94 13.3334 7.99998 13.3334Z" })), /* @__PURE__ */ React.createElement("defs", null, /* @__PURE__ */ React.createElement("clipPath", { id: "clip0_241_649" }, /* @__PURE__ */ React.createElement("rect", { width: 16, height: 16, fill: "white" }))));
const SvgCheckCircle = (props) => /* @__PURE__ */ React.createElement("svg", { width: 16, height: 16, viewBox: "0 0 16 16", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React.createElement("path", { d: "M7.99998 1.33337C4.31998 1.33337 1.33331 4.32004 1.33331 8.00004C1.33331 11.68 4.31998 14.6667 7.99998 14.6667C11.68 14.6667 14.6666 11.68 14.6666 8.00004C14.6666 4.32004 11.68 1.33337 7.99998 1.33337ZM7.99998 13.3334C5.05998 13.3334 2.66665 10.94 2.66665 8.00004C2.66665 5.06004 5.05998 2.66671 7.99998 2.66671C10.94 2.66671 13.3333 5.06004 13.3333 8.00004C13.3333 10.94 10.94 13.3334 7.99998 13.3334ZM11.06 5.05337L6.66665 9.44671L4.93998 7.72671L3.99998 8.66671L6.66665 11.3334L12 6.00004L11.06 5.05337Z" }));
const SvgWarning = (props) => /* @__PURE__ */ React.createElement("svg", { width: 16, height: 16, viewBox: "0 0 16 16", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React.createElement("path", { d: "M8.00002 4.32663L13.02 13H2.98002L8.00002 4.32663ZM8.00002 1.66663L0.666687 14.3333H15.3334L8.00002 1.66663ZM8.66669 11H7.33335V12.3333H8.66669V11ZM8.66669 6.99996H7.33335V9.66663H8.66669V6.99996Z" }));
const SvgErrorCircle = (props) => /* @__PURE__ */ React.createElement("svg", { width: 16, height: 16, viewBox: "0 0 16 16", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ React.createElement("path", { d: "M9.72665 5.33337L7.99998 7.06004L6.27331 5.33337L5.33331 6.27337L7.05998 8.00004L5.33331 9.72671L6.27331 10.6667L7.99998 8.94004L9.72665 10.6667L10.6666 9.72671L8.93998 8.00004L10.6666 6.27337L9.72665 5.33337ZM7.99998 1.33337C4.31331 1.33337 1.33331 4.31337 1.33331 8.00004C1.33331 11.6867 4.31331 14.6667 7.99998 14.6667C11.6866 14.6667 14.6666 11.6867 14.6666 8.00004C14.6666 4.31337 11.6866 1.33337 7.99998 1.33337ZM7.99998 13.3334C5.05998 13.3334 2.66665 10.94 2.66665 8.00004C2.66665 5.06004 5.05998 2.66671 7.99998 2.66671C10.94 2.66671 13.3333 5.06004 13.3333 8.00004C13.3333 10.94 10.94 13.3334 7.99998 13.3334Z" }));
let nextId = 0;
const Notifications = ({
  children,
  limit = 10,
  timeout = 4e3,
  showClose = true,
  className,
  preventFlooding = true,
  components,
  icons = {
    default: /* @__PURE__ */ jsx(SvgInfo, {}),
    success: /* @__PURE__ */ jsx(SvgCheckCircle, {}),
    warning: /* @__PURE__ */ jsx(SvgWarning, {}),
    error: /* @__PURE__ */ jsx(SvgErrorCircle, {}),
    info: /* @__PURE__ */ jsx(SvgInfo, {})
  },
  theme: customTheme
}) => {
  const [notifications, setNotifications] = useState([]);
  const clearNotification = useCallback(
    (id2) => setNotifications(notifications.filter((n) => n.id !== id2)),
    [notifications]
  );
  const clearAllNotifications = useCallback(() => setNotifications([]), []);
  const notify = useCallback(
    (title, options = {}) => {
      setNotifications((notifications2) => {
        if (preventFlooding && notifications2.find((n) => n.title === title)) {
          return notifications2;
        }
        const id2 = nextId++;
        const obj = {
          title,
          id: id2,
          variant: "default",
          timeout,
          icon: icons == null ? void 0 : icons.default,
          showClose,
          ...options
        };
        const sorted = [obj, ...notifications2];
        if (sorted.length > limit) {
          sorted.pop();
        }
        return sorted;
      });
    },
    [icons == null ? void 0 : icons.default, limit, preventFlooding, showClose, timeout]
  );
  const notifyError = useCallback(
    (title, options = {}) => notify(title, {
      variant: "error",
      icon: icons == null ? void 0 : icons.error,
      ...options
    }),
    [icons == null ? void 0 : icons.error, notify]
  );
  const notifyWarning = useCallback(
    (title, options = {}) => notify(title, { variant: "warning", icon: icons == null ? void 0 : icons.warning, ...options }),
    [icons == null ? void 0 : icons.warning, notify]
  );
  const notifySuccess = useCallback(
    (title, options = {}) => notify(title, {
      variant: "success",
      icon: icons == null ? void 0 : icons.success,
      ...options
    }),
    [icons == null ? void 0 : icons.success, notify]
  );
  const notifyInfo = useCallback(
    (title, options = {}) => notify(title, { variant: "info", icon: icons == null ? void 0 : icons.info, ...options }),
    [icons == null ? void 0 : icons.info, notify]
  );
  const values = useMemo(
    () => ({
      notify,
      notifyError,
      notifyWarning,
      notifySuccess,
      notifyInfo,
      clearNotification,
      clearAllNotifications
    }),
    [
      clearNotification,
      clearAllNotifications,
      notify,
      notifyError,
      notifySuccess,
      notifyWarning,
      notifyInfo
    ]
  );
  const theme2 = useComponentTheme(
    "notification",
    customTheme
  );
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(NotificationsContext.Provider, { value: values, children }),
    /* @__PURE__ */ jsx("div", { className: theme2.container, children: /* @__PURE__ */ jsx("div", { className: theme2.positions, children: /* @__PURE__ */ jsx(AnimatePresence, { children: !!notifications.length && /* @__PURE__ */ jsx(
      motion.div,
      {
        initial: { opacity: 0 },
        animate: { opacity: 1 },
        exit: { opacity: 0 },
        children: notifications.map((n) => {
          if (components == null ? void 0 : components[n.variant]) {
            const CustomNotification = components == null ? void 0 : components[n.variant];
            return /* @__PURE__ */ createElement(
              Notification,
              {
                ...n,
                component: /* @__PURE__ */ jsx(
                  CustomNotification,
                  {
                    message: n.title,
                    variant: n.variant,
                    onClose: () => clearNotification(n.id)
                  }
                ),
                showClose: false,
                key: n.id,
                onClose: clearNotification
              }
            );
          }
          return /* @__PURE__ */ createElement(
            Notification,
            {
              ...n,
              key: n.id,
              className: twMerge(className, n.className),
              onClose: clearNotification
            }
          );
        })
      }
    ) }) }) })
  ] });
};
const useNotification = () => {
  const context = useContext(NotificationsContext);
  if (context === void 0) {
    throw new Error(
      "`useNotification` hook must be used within a `NotificationsContext` component"
    );
  }
  return context;
};
const baseTheme = {
  container: "",
  positions: "fixed z-[9998] h-auto -translate-x-2/4 mb-1 px-24 py-0 left-2/4 bottom-0",
  notification: {
    base: "flex relative text-base min-w-[400px] rounded-sm mb-2.5 py-2 px-4",
    variants: {
      success: {
        base: "bg-success-background border border-success",
        icon: "text-success h-4 w-4"
      },
      error: {
        base: "bg-error-background border border-error",
        icon: "text-error h-4 w-4"
      },
      warning: {
        base: "bg-warning-background border border-warning",
        icon: "text-warning h-4 w-4"
      },
      info: {
        base: "bg-info-background border border-info",
        icon: "text-info h-4 w-4"
      }
    },
    content: "inline-flex items-start flex-1 flex-col justify-center",
    header: "text-base flex gap-2 items-center",
    closeContainer: "inline-flex items-center",
    action: "ml-auto mr-2 items-center flex",
    closeButton: "cursor-pointer text-sm font-semibold m-0 border-0 text-text-primary hover:text-text-primary/70",
    body: "opacity-70 text-sm mt-1"
  }
};
const notificationTheme = {
  ...baseTheme,
  notification: {
    ...baseTheme.notification,
    base: [
      baseTheme.notification.base,
      "bg-panel text-text-primary border-panel-accent border"
    ].join(" ")
  }
};
const legacyNotificationTheme = {
  ...baseTheme,
  notification: {
    ...baseTheme.notification,
    base: [
      baseTheme.notification.base,
      "bg-[var(--notification-background)] border-[var(--notification-border)] text-[var(--notification-color)]"
    ].join(" "),
    closeButton: [
      baseTheme.notification.closeButton,
      "text-[var(--color-on-notification)]"
    ].join(" "),
    body: [
      baseTheme.notification.body,
      "text-[var(--color-on-notification)]"
    ].join(" "),
    variants: {
      ...baseTheme.notification.variants,
      success: {
        base: [
          baseTheme.notification.variants.success,
          "text-[var(--notification-color-success)]"
        ].join(" ")
      },
      error: {
        base: [
          baseTheme.notification.variants.error,
          "text-[var(--notification-color-error)]"
        ].join(" ")
      },
      warning: {
        base: [
          baseTheme.notification.variants.error,
          "text-[var(--notification-color-warning)]"
        ].join(" ")
      }
    }
  }
};
const Callout = ({
  text,
  icon,
  variant = "default",
  theme: customTheme
}) => {
  const theme2 = useComponentTheme("callout", customTheme);
  return /* @__PURE__ */ jsxs(Stack, { className: cn(theme2.base.common, theme2.base.variant[variant]), children: [
    icon && /* @__PURE__ */ jsx("div", { className: cn(theme2.icon.common, theme2.icon.variant[variant]), children: icon }),
    /* @__PURE__ */ jsx("div", { className: theme2.text, children: text })
  ] });
};
const calloutTheme = {
  base: {
    common: "px-4 py-3 border-b",
    variant: {
      default: "bg-panel-background border-panel-accent",
      success: "bg-success-background border-success",
      error: "bg-error-background border-error",
      warning: "bg-warning-background border-warning",
      info: "bg-info-background border-info"
    }
  },
  icon: {
    common: "",
    variant: {
      default: "",
      success: "text-success",
      error: "text-error",
      warning: "text-warning",
      info: "text-info"
    }
  },
  text: "text-base"
};
const legacyCalloutTheme = calloutTheme;
const SuccessCallout = ({ icon, ...rest }) => /* @__PURE__ */ jsx(Callout, { icon: icon ?? /* @__PURE__ */ jsx(SvgCheckCircle, {}), variant: "success", ...rest });
const ErrorCallout = ({ icon, ...rest }) => /* @__PURE__ */ jsx(Callout, { icon: icon ?? /* @__PURE__ */ jsx(SvgErrorCircle, {}), variant: "error", ...rest });
const WarningCallout = ({ icon, ...rest }) => /* @__PURE__ */ jsx(Callout, { icon: icon ?? /* @__PURE__ */ jsx(SvgWarning, {}), variant: "warning", ...rest });
const InfoCallout = ({ icon, ...rest }) => /* @__PURE__ */ jsx(Callout, { icon: icon ?? /* @__PURE__ */ jsx(SvgInfo, {}), variant: "info", ...rest });
const ConfirmDialog = ({
  open,
  header,
  content,
  confirmLabel = "Confirm",
  cancelLabel = "Cancel",
  onConfirm,
  onCancel
}) => /* @__PURE__ */ jsx(Dialog, { open, onClose: onCancel, header, children: () => /* @__PURE__ */ jsxs(Fragment$1, { children: [
  /* @__PURE__ */ jsx("div", { className: "mb-6", children: content }),
  /* @__PURE__ */ jsxs("footer", { className: "flex justify-end space-x-4", children: [
    /* @__PURE__ */ jsx(Button, { className: "px-4 py-2", onClick: onConfirm, color: "primary", children: confirmLabel }),
    /* @__PURE__ */ jsx(Button, { className: "px-4 py-2", onClick: onCancel, children: cancelLabel })
  ] })
] }) });
const useConfirmDialog = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [dialogProps, setDialogProps] = useState(
    null
  );
  const closeDialog = useCallback(() => {
    setIsOpen(false);
    setDialogProps(null);
  }, []);
  const openDialog = useCallback(
    (props) => {
      setDialogProps({
        ...props,
        onCancel: props.onCancel || closeDialog
      });
      setIsOpen(true);
    },
    [closeDialog]
  );
  const DialogComponent = useCallback(() => {
    if (!dialogProps) {
      return null;
    }
    return /* @__PURE__ */ jsx(ConfirmDialog, { open: isOpen, ...dialogProps });
  }, [isOpen, dialogProps]);
  return {
    isOpen,
    openDialog,
    closeDialog,
    DialogComponent
  };
};
const theme = {
  components: {
    avatar: avatarTheme,
    avatarGroup: avatarGroupTheme,
    arrow: arrowTheme,
    badge: badgeTheme,
    button: buttonTheme,
    block: blockTheme,
    chip: chipTheme,
    contextMenu: contextMenuTheme,
    checkbox: checkboxTheme,
    dateFormat: dateFormatTheme,
    dialog: dialogTheme,
    divider: dividerTheme,
    dotsLoader: dotsLoaderTheme,
    drawer: drawerTheme,
    ellipsis: ellipsisTheme,
    select: selectTheme,
    list: listTheme,
    menu: menuTheme,
    sort: sortTheme,
    stack: stackTheme,
    card: cardTheme,
    kbd: kbdTheme,
    verticalSpacer: verticalSpacerTheme,
    notification: notificationTheme,
    input: inputTheme,
    calendar: calendarTheme,
    calendarRange: calendarRangeTheme,
    commandPalette: commandPaletteTheme,
    collapse: collapseTheme,
    textarea: textareaTheme,
    typography: typographyTheme,
    radio: radioTheme,
    range: rangeTheme,
    redact: redactTheme,
    toggle: toggleTheme,
    tooltip: tooltipTheme,
    tree: treeTheme,
    popover: popoverTheme,
    pager: pagerTheme,
    tabs: tabsTheme,
    jsonTree: jsonTreeTheme,
    breadcrumbs: breadcrumbsTheme,
    stepper: stepperTheme,
    callout: calloutTheme,
    backdrop: backdropTheme
  }
};
const legacyThemeVars = {
  components: {
    avatar: legacyAvatarTheme,
    avatarGroup: legacyAvatarGroupTheme,
    arrow: legacyArrowTheme,
    badge: legacyBadgeTheme,
    button: legacyButtonTheme,
    block: legacyBlockTheme,
    chip: legacyChipTheme,
    contextMenu: legacyContextMenuTheme,
    checkbox: legacyCheckboxTheme,
    dateFormat: legacyDateFormatTheme,
    dialog: legacyDialogTheme,
    divider: legacyDividerTheme,
    dotsLoader: legacyLoaderTheme,
    drawer: legacyDrawerTheme,
    ellipsis: legacyEllipsisTheme,
    select: legacySelectTheme,
    list: legacyListTheme,
    menu: legacyMenuTheme,
    sort: legacySortTheme,
    stack: legacyStackTheme,
    card: legacyCardTheme,
    kbd: legacyKbdTheme,
    verticalSpacer: legacyVerticalSpacerTheme,
    notification: legacyNotificationTheme,
    input: legacyInputTheme,
    calendar: legacyCalendarTheme,
    calendarRange: legacyCalendarRangeTheme,
    commandPalette: legacyCommandPaletteTheme,
    collapse: legacyCollapseTheme,
    textarea: legacyTextareaTheme,
    typography: legacyTypographyTheme,
    radio: legacyRadioTheme,
    range: legacyRangeTheme,
    redact: legacyRedactTheme,
    toggle: legacyToggleTheme,
    tooltip: legacyTooltipTheme,
    tree: legacyTreeTheme,
    popover: legacyPopoverTheme,
    pager: legacyPagerTheme,
    tabs: legacyTabsTheme,
    jsonTree: legacyJsonTreeTheme,
    breadcrumbs: legacyBreadcrumbTheme,
    stepper: legacyStepperTheme,
    callout: legacyCalloutTheme,
    backdrop: legacyBackdropTheme
  }
};
const extendTheme = (defaultTheme, theme2) => {
  return mergeDeep(defaultTheme, theme2);
};
const extendComponentTheme = (defaultTheme, theme2) => {
  return mergeDeep(defaultTheme, theme2);
};
function extractTheme(config) {
  const colors = { ...config.colors };
  delete colors["inherit"];
  delete colors["transparent"];
  delete colors["current"];
  return {
    colors,
    borderRadius: config.borderRadius,
    boxShadow: config.boxShadow,
    spacing: config.spacing,
    fontFamily: config.fontFamily,
    fontSize: config.fontSize,
    fontWeight: config.fontWeight
  };
}
const colorPalette = {
  white: "#FFFFFF",
  black: "#000000",
  gray: {
    100: "#F7F7FA",
    200: "#E6E6F0",
    300: "#C9C9D6",
    400: "#77778C",
    500: "#5C5C73",
    600: "#3D3D4D",
    700: "#242433",
    800: "#1E1E2E",
    900: "#11111F",
    950: "#02020F"
  },
  magenta: {
    100: "#FAE5F6",
    200: "#F1BFE9",
    300: "#E480D3",
    400: "#D740BE",
    500: "#C900A8",
    600: "#AB018F",
    700: "#8C0276",
    800: "#6E025C",
    900: "#4F0343",
    950: "#31042A"
  },
  pink: {
    100: "#FDE5F1",
    200: "#F9BFDB",
    300: "#F480B7",
    400: "#EE4094",
    500: "#DE006B",
    600: "#BB015A",
    700: "#98014A",
    800: "#740239",
    900: "#510229",
    950: "#2E0318"
  },
  lime: {
    100: "#F4FAE5",
    200: "#E3F3BF",
    300: "#C6E880",
    400: "#AADC40",
    500: "#8ED000",
    600: "#78B001",
    700: "#628F01",
    800: "#4C6F02",
    900: "#364E02",
    950: "#202E03"
  },
  teal: {
    100: "#E5FBF9",
    200: "#BFF6F0",
    300: "#80EDE0",
    400: "#40E5D1",
    500: "#00DCC2",
    600: "#00C2AB",
    700: "#019A88",
    800: "#017365",
    900: "#024B42",
    950: "#02231F"
  },
  cyan: {
    100: "#E5F9FE",
    200: "#BFF0FB",
    300: "#80E2F8",
    400: "#40D3F4",
    500: "#00C5F0",
    600: "#01A7CB",
    700: "#0289A6",
    800: "#036B82",
    900: "#044D5D",
    950: "#052F38"
  },
  violet: {
    100: "#F0E8FD",
    200: "#DAC5F9",
    300: "#B58BF3",
    400: "#9152EE",
    500: "#6C18E8",
    600: "#5B14C5",
    700: "#4B10A1",
    800: "#3A0D7E",
    900: "#2A095B",
    950: "#190537"
  },
  purple: {
    100: "#F3E5FC",
    200: "#E2BFF7",
    300: "#C580F0",
    400: "#A840E8",
    500: "#8B00E0",
    600: "#7501BC",
    700: "#5F0298",
    800: "#490274",
    900: "#330350",
    950: "#1D042D"
  },
  red: {
    100: "#FCE5E6",
    200: "#F7BFC1",
    300: "#F08083",
    400: "#E84045",
    500: "#E00007",
    600: "#B70006",
    700: "#8E0005",
    800: "#660104",
    900: "#3D0103",
    950: "#200204"
  },
  orange: {
    100: "#FEF3E5",
    200: "#FDE1BF",
    300: "#FBC280",
    400: "#F8A340",
    500: "#F68500",
    600: "#CB6E00",
    700: "#9F5701",
    800: "#743F01",
    900: "#482802",
    950: "#251602"
  },
  yellow: {
    100: "#FFF9E5",
    200: "#FFF1BF",
    300: "#FFE380",
    400: "#FFD440",
    500: "#FFC600",
    600: "#D2A300",
    700: "#A58001",
    800: "#785E01",
    900: "#4B3B02",
    950: "#261F03"
  },
  green: {
    100: "#EEF8E9",
    200: "#D5EFC8",
    300: "#AADF91",
    400: "#80CE5B",
    500: "#55BE24",
    600: "#469D1D",
    700: "#377C16",
    800: "#275C10",
    900: "#183B09",
    950: "#091A02"
  },
  blue: {
    100: "#E7EFFF",
    200: "#C3D7FF",
    300: "#87AEFF",
    400: "#4C86FF",
    500: "#105EFF",
    600: "#0D4ED2",
    700: "#0A3DA6",
    800: "#082D79",
    900: "#051C4C",
    950: "#041028"
  },
  "black-pearl": "#02020F",
  "athens-gray": "#F7F7FA",
  mystic: "#E6E6F0",
  vulcan: "#11111F",
  charade: "#242433",
  waterloo: "#77778C",
  anakiwa: "#93B6FF"
};
const ColorBlock = ({ name, color, className }) => /* @__PURE__ */ jsxs(
  "div",
  {
    style: {
      border: "solid 1px --border-color",
      borderRadius: "4px",
      overflow: "hidden"
    },
    className,
    children: [
      /* @__PURE__ */ jsx(
        "div",
        {
          style: {
            padding: "20px",
            background: color,
            color: "#161616",
            borderBottom: "solid 1px var(--border-color)"
          }
        }
      ),
      /* @__PURE__ */ jsxs(
        "div",
        {
          style: {
            padding: "6px",
            fontSize: "12px"
          },
          children: [
            /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(
              "code",
              {
                style: { cursor: "pointer" },
                title: `Double click to copy ${name} to your clipboard`,
                onDoubleClick: () => navigator.clipboard.writeText(name),
                children: name
              }
            ) }),
            /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(
              "code",
              {
                style: { cursor: "pointer" },
                title: `Double click to copy ${color} to your clipboard`,
                onDoubleClick: () => navigator.clipboard.writeText(color),
                children: color
              }
            ) })
          ]
        }
      )
    ]
  },
  name
);
const ColorPaletteBlock = ({
  name,
  color,
  className,
  showName = true
}) => {
  const valid = chroma.valid(color);
  const fontColor = valid && !name.includes("overlay") ? chroma(color).luminance() >= 0.3 ? chroma(color).darken(100).css() : chroma(color).brighten(100).css() : "var(--body-color)";
  return /* @__PURE__ */ jsx(
    "div",
    {
      className,
      style: {
        borderRight: "solid 1px var(--border-color)"
      },
      children: /* @__PURE__ */ jsxs(
        "div",
        {
          style: {
            padding: "6px",
            background: color,
            height: "100%",
            minHeight: 50
          },
          children: [
            showName && /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(
              "code",
              {
                style: { cursor: "pointer", color: fontColor, fontSize: "12px" },
                title: `Double click to copy ${name} to your clipboard`,
                onDoubleClick: () => navigator.clipboard.writeText(name),
                children: name
              }
            ) }),
            /* @__PURE__ */ jsx("div", { children: /* @__PURE__ */ jsx(
              "code",
              {
                style: { cursor: "pointer", color: fontColor, fontSize: "12px" },
                title: `Double click to copy ${color} to your clipboard`,
                onDoubleClick: () => navigator.clipboard.writeText(color),
                children: color
              }
            ) })
          ]
        }
      )
    },
    name
  );
};
const ColorPaletteBlocks = ({
  name,
  colors,
  className,
  showNames = true
}) => /* @__PURE__ */ jsxs(
  "div",
  {
    className,
    style: {
      marginBottom: "24px"
    },
    children: [
      /* @__PURE__ */ jsx("h3", { style: { fontWeight: 500, margin: 0 }, children: name }),
      /* @__PURE__ */ jsxs(
        "div",
        {
          style: {
            display: "grid",
            overflow: "hidden",
            borderRadius: "6px",
            border: "solid 1px var(--border-color)",
            gridTemplateColumns: "repeat(auto-fit, minmax(100px, 1fr))"
          },
          children: [
            typeof colors === "string" && /* @__PURE__ */ jsx(ColorBlock, { name: `${name}`, color: colors, showName: showNames }),
            typeof colors === "object" && /* @__PURE__ */ jsx(Fragment$1, { children: Object.keys(colors).map((color) => /* @__PURE__ */ jsx(
              ColorPaletteBlock,
              {
                name: `${name}-${color}`,
                color: colors[color],
                showName: showNames
              },
              `${name}-${color}`
            )) }),
            typeof colors === "function" && /* @__PURE__ */ jsx(
              ColorBlock,
              {
                name: `${name}`,
                color: colors({}),
                showName: showNames
              }
            )
          ]
        }
      )
    ]
  }
);
const ColorBlocks = ({
  colors
}) => {
  return /* @__PURE__ */ jsx(
    "div",
    {
      style: {
        padding: "6px 12px",
        color: "var(--body-color)",
        width: "100%"
      },
      children: colors ? /* @__PURE__ */ jsx(Fragment$1, { children: Object.keys(colors).map((key) => /* @__PURE__ */ jsx(ColorPaletteBlocks, { name: key, colors: colors[key] }, key)) }) : /* @__PURE__ */ jsx("p", { children: "⚠️ No colors defined" })
    }
  );
};
const TypographyLetterBlock = ({
  fontFamily,
  className
}) => /* @__PURE__ */ jsxs(
  "div",
  {
    className,
    style: {
      fontFamily,
      display: "flex",
      alignItems: "center",
      marginLeft: "20px"
    },
    children: [
      /* @__PURE__ */ jsx("div", { style: { fontSize: 128 }, children: "Aa" }),
      /* @__PURE__ */ jsxs(
        "div",
        {
          style: {
            marginLeft: "20px",
            paddingLeft: "20px",
            fontSize: 22,
            borderLeft: "solid 1px var(--border-color)"
          },
          children: [
            /* @__PURE__ */ jsx("h2", { style: { margin: 0 }, children: fontFamily }),
            /* @__PURE__ */ jsx("div", { children: "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }),
            /* @__PURE__ */ jsx("div", { children: "abcdefghijklmnopqrstuvwxyz" }),
            /* @__PURE__ */ jsx("div", { children: "1234567890 /&*()?<>+-=$@%!”[]{}" })
          ]
        }
      )
    ]
  }
);
const TypographySizeBlock = ({
  sizes,
  className
}) => /* @__PURE__ */ jsx("div", { className, children: Object.keys(sizes).map((size2) => /* @__PURE__ */ jsxs(
  "div",
  {
    style: {
      fontSize: sizes[size2][0],
      lineHeight: sizes[size2][1].lineHeight,
      display: "flex",
      alignItems: "center",
      margin: "20px"
    },
    children: [
      /* @__PURE__ */ jsxs(
        "div",
        {
          style: {
            fontSize: 16,
            minWidth: 110,
            marginRight: "6px",
            color: "var(--body-color)"
          },
          children: [
            /* @__PURE__ */ jsxs(
              "code",
              {
                style: { cursor: "pointer", fontSize: 14 },
                onDoubleClick: () => navigator.clipboard.writeText(`font-${size2}`),
                children: [
                  "font-",
                  size2
                ]
              }
            ),
            /* @__PURE__ */ jsx("br", {}),
            /* @__PURE__ */ jsx("small", { children: /* @__PURE__ */ jsx(
              "code",
              {
                style: { cursor: "pointer" },
                onDoubleClick: () => navigator.clipboard.writeText(sizes[size2][0]),
                children: sizes[size2][0]
              }
            ) })
          ]
        }
      ),
      "The quick brown fox jumps over the lazy dog."
    ]
  },
  size2
)) });
const TypographyWeightBlock = ({
  weights,
  className
}) => /* @__PURE__ */ jsx(
  "div",
  {
    className,
    style: {
      padding: "6px",
      borderRadius: "6px",
      border: "solid 1px var(--border-color)"
    },
    children: Object.keys(weights).map((weight, i) => /* @__PURE__ */ jsxs(
      "div",
      {
        style: {
          display: "flex",
          alignItems: "center",
          marginBottom: "16px"
        },
        children: [
          /* @__PURE__ */ jsxs("code", { style: { width: "25%", minWidth: 200 }, children: [
            /* @__PURE__ */ jsxs(
              "span",
              {
                style: { fontSize: "16px", cursor: "pointer" },
                onDoubleClick: () => navigator.clipboard.writeText(`font-${weight}`),
                children: [
                  "font-",
                  weight
                ]
              }
            ),
            /* @__PURE__ */ jsx("br", {}),
            /* @__PURE__ */ jsx(
              "div",
              {
                style: { fontSize: "14px", cursor: "pointer" },
                onDoubleClick: () => navigator.clipboard.writeText(weights[weight]),
                children: weights[weight]
              }
            )
          ] }),
          /* @__PURE__ */ jsx("div", { style: { fontWeight: weights[weight] }, children: "The quick brown fox jumps over the lazy dog." })
        ]
      },
      i
    ))
  }
);
const TypographyBlocks = ({ families, sizes, weights }) => {
  return /* @__PURE__ */ jsxs(
    "div",
    {
      style: {
        color: "var(--body-color)",
        width: "100%"
      },
      children: [
        /* @__PURE__ */ jsx("h1", { style: { fontSize: "28px", fontWeight: "bold", marginBottom: "8px" }, children: "Typography" }),
        /* @__PURE__ */ jsx("h2", { style: { fontSize: "20px", fontWeight: "500" }, children: "Font Families" }),
        /* @__PURE__ */ jsx("br", {}),
        Object.keys(families).map((family) => /* @__PURE__ */ jsxs(
          "div",
          {
            style: {
              marginBottom: "24px"
            },
            children: [
              /* @__PURE__ */ jsxs("h3", { style: { fontWeight: 600, fontSize: "20px" }, children: [
                /* @__PURE__ */ jsx("small", { children: /* @__PURE__ */ jsxs("code", { children: [
                  "font-",
                  family
                ] }) }),
                /* @__PURE__ */ jsx("br", {})
              ] }),
              /* @__PURE__ */ jsxs(
                "div",
                {
                  style: {
                    padding: "10px",
                    borderRadius: "8px",
                    border: "solid 1px var(--border-color)"
                  },
                  children: [
                    /* @__PURE__ */ jsx(TypographyLetterBlock, { fontFamily: families[family] }),
                    /* @__PURE__ */ jsx(
                      "hr",
                      {
                        style: {
                          background: "none",
                          border: "none",
                          borderTop: "solid 1px var(--border-color)"
                        }
                      }
                    ),
                    /* @__PURE__ */ jsx(TypographySizeBlock, { sizes })
                  ]
                }
              )
            ]
          },
          family
        )),
        weights && /* @__PURE__ */ jsxs(Fragment$1, { children: [
          /* @__PURE__ */ jsx("h2", { children: "Font Weights" }),
          /* @__PURE__ */ jsx(TypographyWeightBlock, { weights })
        ] })
      ]
    }
  );
};
const SpacingBlocks = ({ spacings }) => {
  return /* @__PURE__ */ jsx(
    "div",
    {
      style: {
        padding: "6px 12px",
        color: "var(--body-color)",
        width: "100%"
      },
      children: spacings ? /* @__PURE__ */ jsx(Fragment$1, { children: Object.keys(spacings).map((key) => /* @__PURE__ */ jsxs(
        "div",
        {
          style: {
            marginBottom: "16px",
            padding: "20px",
            display: "flex",
            alignItems: "center",
            borderRadius: "4px",
            border: "solid 1px var(--border-color)"
          },
          children: [
            /* @__PURE__ */ jsxs("h3", { style: { fontWeight: 500, marginRight: 50 }, children: [
              /* @__PURE__ */ jsx(
                "code",
                {
                  style: { cursor: "pointer" },
                  title: `Double click to copy ${key} to your clipboard`,
                  onDoubleClick: () => navigator.clipboard.writeText(key),
                  children: key
                }
              ),
              /* @__PURE__ */ jsx("br", {}),
              /* @__PURE__ */ jsx(
                "small",
                {
                  style: { cursor: "pointer" },
                  onDoubleClick: () => navigator.clipboard.writeText(spacings[key]),
                  children: spacings[key]
                }
              )
            ] }),
            /* @__PURE__ */ jsx(
              "div",
              {
                style: {
                  justifyContent: "end",
                  display: "flex",
                  flex: 1
                },
                children: /* @__PURE__ */ jsx(
                  "div",
                  {
                    style: {
                      padding: spacings[key],
                      border: "solid 1px blue"
                    },
                    children: "Content"
                  }
                )
              }
            )
          ]
        },
        key
      )) }) : /* @__PURE__ */ jsx("p", { children: "⚠️ No spacings defined" })
    }
  );
};
const PaletteBlocks = ({ palettes }) => {
  return /* @__PURE__ */ jsx(
    "div",
    {
      style: {
        padding: "4px 8px",
        color: "var(--body-color)",
        width: "100%"
      },
      children: Object.keys(palettes).map((key) => /* @__PURE__ */ jsxs("div", { children: [
        /* @__PURE__ */ jsx("h3", { style: { fontWeight: 500, fontSize: "24px", margin: 0 }, children: key }),
        /* @__PURE__ */ jsx(
          "div",
          {
            style: {
              marginBottom: "20px",
              display: "grid",
              gap: 12,
              gridTemplateColumns: "repeat(auto-fit, minmax(100px, 1fr))",
              borderRadius: "4px"
            },
            children: Object.keys(palettes[key]).map((item) => /* @__PURE__ */ jsx(
              ColorBlock,
              {
                name: `${key}-${item}`,
                color: palettes[key][item],
                className: "rounded border border-slate-500"
              },
              `${key}-${item}`
            ))
          }
        )
      ] }, key))
    }
  );
};
const BorderBlocks = ({ borders }) => {
  return /* @__PURE__ */ jsx(
    "div",
    {
      style: {
        padding: "2px 4px",
        color: "var(--body-color)",
        width: "100%"
      },
      children: borders ? /* @__PURE__ */ jsx(Fragment$1, { children: Object.keys(borders).map((key) => /* @__PURE__ */ jsxs(
        "div",
        {
          style: {
            marginBottom: "20px",
            padding: "16px",
            display: "flex",
            alignItems: "center",
            borderRadius: "4px",
            border: "solid 1px var(--border-color)"
          },
          children: [
            /* @__PURE__ */ jsxs(
              "h3",
              {
                style: {
                  fontWeight: 500,
                  marginRight: "20px",
                  maxWidth: 300
                },
                children: [
                  /* @__PURE__ */ jsxs(
                    "span",
                    {
                      style: { cursor: "pointer" },
                      title: `Double click to copy --border-radius-${key} to your clipboard`,
                      onDoubleClick: () => navigator.clipboard.writeText(`rounded-${key}`),
                      children: [
                        "rounded-",
                        key
                      ]
                    }
                  ),
                  /* @__PURE__ */ jsx("br", {}),
                  /* @__PURE__ */ jsx(
                    "small",
                    {
                      style: { cursor: "pointer" },
                      onDoubleClick: () => navigator.clipboard.writeText(borders[key]),
                      children: /* @__PURE__ */ jsx("code", { children: borders[key] })
                    }
                  )
                ]
              }
            ),
            /* @__PURE__ */ jsx(
              "div",
              {
                style: {
                  justifyContent: "end",
                  display: "flex",
                  flex: 1
                },
                children: /* @__PURE__ */ jsx(
                  "div",
                  {
                    style: {
                      padding: "12px",
                      borderRadius: borders[key],
                      border: "solid 1px blue"
                    },
                    children: "Content"
                  }
                )
              }
            )
          ]
        },
        key
      )) }) : /* @__PURE__ */ jsx("p", { children: "⚠️ No borders defined" })
    }
  );
};
const ShadowBlocks = ({ shadows }) => {
  return /* @__PURE__ */ jsx(
    "div",
    {
      style: {
        padding: "4px 8px",
        color: "var(--body-color)",
        width: "100%"
      },
      children: shadows ? /* @__PURE__ */ jsx(Fragment$1, { children: Object.keys(shadows).map((key) => /* @__PURE__ */ jsxs(
        "div",
        {
          style: {
            marginBottom: "20px",
            padding: "16px 20px",
            display: "flex",
            alignItems: "center",
            borderRadius: "6px",
            border: "solid 1px var(--border-color)"
          },
          children: [
            /* @__PURE__ */ jsxs("h3", { style: { fontWeight: 500, marginRight: 50, maxWidth: 300 }, children: [
              /* @__PURE__ */ jsxs(
                "span",
                {
                  style: { cursor: "pointer" },
                  title: `Double click to copy --shadow-${key} to your clipboard`,
                  onDoubleClick: () => navigator.clipboard.writeText(`--shadow-${key}`),
                  children: [
                    "--shadow-",
                    key
                  ]
                }
              ),
              /* @__PURE__ */ jsx("br", {}),
              /* @__PURE__ */ jsx("small", { children: /* @__PURE__ */ jsx(
                "code",
                {
                  style: { cursor: "pointer" },
                  onDoubleClick: () => navigator.clipboard.writeText(shadows[key]),
                  children: shadows[key]
                }
              ) })
            ] }),
            /* @__PURE__ */ jsx(
              "div",
              {
                style: {
                  justifyContent: "end",
                  display: "flex",
                  flex: 1
                },
                children: /* @__PURE__ */ jsx(
                  "div",
                  {
                    style: {
                      backgroundColor: "#191919",
                      padding: "12px",
                      fontSize: "16px",
                      boxShadow: shadows[key]
                    },
                    children: "Content"
                  }
                )
              }
            )
          ]
        },
        key
      )) }) : /* @__PURE__ */ jsx("p", { children: "⚠️ No shadows defined" })
    }
  );
};
const ComponentBlocks = ({
  components
}) => /* @__PURE__ */ jsx(Notifications, { children: /* @__PURE__ */ jsx(NotificationsContext.Consumer, { children: ({ notifySuccess }) => /* @__PURE__ */ jsx(
  "div",
  {
    style: {
      padding: "4px 8px",
      color: "var(--body-color)",
      width: "100%"
    },
    children: components ? /* @__PURE__ */ jsx(Fragment$1, { children: Object.keys(components).map((key) => /* @__PURE__ */ jsxs("div", { className: "mb-3 relative", children: [
      /* @__PURE__ */ jsx(
        "h3",
        {
          style: {
            fontSize: "24px",
            fontWeight: 500,
            marginRight: 50,
            marginBottom: "4px",
            maxWidth: 300,
            textTransform: "capitalize"
          },
          children: key
        }
      ),
      /* @__PURE__ */ jsx(
        JsonTree,
        {
          className: "border border-gray-700 rounded p-3",
          expandDepth: Infinity,
          data: components[key]
        }
      ),
      /* @__PURE__ */ jsx(
        Button,
        {
          size: "small",
          color: "secondary",
          variant: "outline",
          className: "absolute right-0 bottom-0 text-xs",
          onClick: async () => {
            try {
              await navigator.clipboard.writeText(
                JSON.stringify(components[key], null, 2)
              );
              notifySuccess("Content copied to clipboard");
            } catch (err) {
              console.error("Failed to copy: ", err);
            }
          },
          children: "Copy Code"
        }
      )
    ] }, key)) }) : /* @__PURE__ */ jsx("p", { children: "⚠️ No components(s) defined" })
  }
) }) });
const IconBlock = ({
  name,
  src,
  className,
  component: Component
}) => /* @__PURE__ */ jsx(
  "div",
  {
    className,
    style: {
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
      padding: "var(--spacing-md)",
      fontFamily: "var(--font-family)",
      background: "var(--icon-block-background)",
      color: "var(--icon-block-color)",
      textAlign: "center",
      fontSize: "12px",
      borderRadius: "var(--border-radius-md)",
      height: 75
    },
    children: /* @__PURE__ */ jsxs(Suspense, { fallback: null, children: [
      src ? /* @__PURE__ */ jsx(
        "img",
        {
          src,
          style: { width: 25, height: 25, marginBottom: "var(--spacing-md)" }
        }
      ) : /* @__PURE__ */ jsx(
        Component,
        {
          style: { width: 25, height: 25, marginBottom: "var(--spacing-md)" }
        }
      ),
      /* @__PURE__ */ jsx("div", { children: name })
    ] })
  }
);
const IconBlocks = ({ icons, className }) => /* @__PURE__ */ jsx(
  "div",
  {
    style: {
      display: "grid",
      gridGap: "var(--spacing-lg)",
      gridTemplateColumns: "repeat(auto-fill, minmax(120px, 1fr))",
      justifyItems: "stretch"
    },
    className,
    children: icons.map((key) => /* @__PURE__ */ jsx(IconBlock, { ...key }, key.name))
  }
);
function CloneElement({
  children,
  element,
  childRef,
  ...rest
}) {
  const getProjectedProps = useMemo(
    () => (props) => {
      const childProps = element.props;
      return Object.keys(props).reduce((acc, key) => {
        const prop = props[key];
        const childProp = childProps[key];
        if (typeof prop === "function" && typeof childProp === "function") {
          acc[key] = (...args) => {
            prop(...args);
            childProp(...args);
          };
        } else if (key === "className") {
          acc[key] = classNames(prop, childProp);
        } else {
          acc[key] = prop;
        }
        return acc;
      }, {});
    },
    [rest]
  );
  if (element === null) {
    return children;
  }
  const ref = childRef ? (node) => {
    if (typeof childRef === "function") {
      childRef(node);
    } else if (ref) {
      childRef.current = node;
    }
  } : void 0;
  const newProps = getProjectedProps(rest);
  return cloneElement(element, {
    ...element.props,
    ...newProps,
    children,
    ref
  });
}
function useUserSelect(active) {
  useEffect(() => {
    if (active) {
      document.body.style.userSelect = "none";
      return () => void (document.body.style.userSelect = "initial");
    }
  }, [active]);
}
function useCursor(hovered, onPointerOver = "pointer", onPointerOut = "auto") {
  useEffect(() => {
    if (hovered) {
      document.body.style.cursor = onPointerOver;
      return () => void (document.body.style.cursor = onPointerOut);
    }
  }, [hovered, onPointerOut, onPointerOver]);
}
export {
  Arrow,
  Avatar,
  AvatarGroup,
  Backdrop,
  Badge,
  Block,
  BorderBlocks,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
  Breadcrumbs,
  Button,
  ButtonGroup,
  Calendar,
  CalendarRange,
  Callout,
  Card,
  Checkbox,
  Chip,
  CloneElement,
  CloseIcon,
  Collapse,
  ColorBlock,
  ColorBlocks,
  ColorPaletteBlock,
  ColorPaletteBlocks,
  CommandPalette,
  CommandPaletteInput,
  CommandPaletteItem,
  CommandPaletteSection,
  ComponentBlocks,
  ConfirmDialog,
  ConnectedOverlay,
  ConnectedOverlayContent,
  ContextMenu,
  DataSize,
  DateFormat,
  DateInput,
  DebouncedInput,
  DeletableChip,
  Dialog,
  DialogHeader,
  Divider,
  DotsLoader,
  DownArrowIcon$1 as DownArrowIcon,
  Drawer,
  DrawerHeader,
  Duration,
  Ellipsis,
  ErrorCallout,
  FUZZY_RANGE,
  GlobalOverlay,
  IconBlock,
  IconBlocks,
  IconButton,
  InfinityList,
  InfoCallout,
  InlineInput,
  Input,
  JsonTree,
  JsonTreeNode,
  Kbd,
  List,
  ListHeader,
  ListItem,
  MODIFIER_KEY,
  Menu,
  MotionGroup,
  MotionItem,
  NestedMenu,
  Notification,
  Notifications,
  NotificationsContext,
  OverlayContext,
  OverlayPortal,
  OverlayTrigger,
  PageTitle,
  Pager,
  PaletteBlocks,
  Pluralize,
  Popover,
  Portal,
  PrimaryHeading,
  Radio,
  RadioGroup,
  RangeDouble,
  RangeSingle,
  RangeTooltip,
  Redact,
  RefreshIcon,
  SecondaryHeading,
  Select,
  SelectInput,
  SelectInputChip,
  SelectMenu,
  SelectOption,
  ShadowBlocks,
  SmallHeading,
  Sort,
  SpacingBlocks,
  Stack,
  Step,
  Stepper,
  Sub,
  SuccessCallout,
  Tab,
  TabList,
  TabPanel,
  Tabs,
  Text,
  Textarea,
  ThemeContext,
  ThemeProvider,
  Toggle,
  Tooltip,
  Tree,
  TreeNode,
  TypographyBlocks,
  TypographyLetterBlock,
  TypographySizeBlock,
  TypographyWeightBlock,
  VerticalSpacer,
  WarningCallout,
  arrowTheme,
  avatarGroupTheme,
  avatarTheme,
  backdropTheme,
  badgeTheme,
  blockTheme,
  breadcrumbsTheme,
  buttonTheme,
  calendarRangeTheme,
  calendarTheme,
  calloutTheme,
  cardTheme,
  checkboxTheme,
  chipTheme,
  cloneDeep,
  cn,
  collapseTheme,
  colorPalette,
  commandPaletteInputTheme,
  commandPaletteItemTheme,
  commandPaletteSectionTheme,
  commandPaletteTheme,
  contextMenuTheme,
  createOptions,
  cssVarsCommandPaletteInputTheme,
  cssVarsCommandPaletteItemTheme,
  cssVarsCommandPaletteSectionTheme,
  cssVarsSelectInputTheme,
  cssVarsSelectMenuTheme,
  dateFormatTheme,
  dialogTheme,
  dividerTheme,
  dotsLoaderTheme,
  drawerTheme,
  ellipsisTheme,
  extendComponentTheme,
  extendTheme,
  extractTheme,
  formatDuration,
  formatRelative,
  formatSize,
  getDifference,
  getGroups,
  getHotkeyText,
  getInterval,
  getItemsRange,
  getNextDirection,
  getPageRange,
  groupVariants,
  inputTheme,
  isObject,
  jsonTreeTheme,
  kbdTheme,
  keyNameToCode,
  legacyArrowTheme,
  legacyAvatarGroupTheme,
  legacyAvatarTheme,
  legacyBackdropTheme,
  legacyBadgeTheme,
  legacyBlockTheme,
  legacyBreadcrumbTheme,
  legacyButtonTheme,
  legacyCalendarRangeTheme,
  legacyCalendarTheme,
  legacyCalloutTheme,
  legacyCardTheme,
  legacyCheckboxTheme,
  legacyChipTheme,
  legacyCollapseTheme,
  legacyCommandPaletteTheme,
  legacyContextMenuTheme,
  legacyDateFormatTheme,
  legacyDialogTheme,
  legacyDividerTheme,
  legacyDrawerTheme,
  legacyEllipsisTheme,
  legacyInputTheme,
  legacyJsonTreeTheme,
  legacyKbdTheme,
  legacyListTheme,
  legacyLoaderTheme,
  legacyMenuTheme,
  legacyNotificationTheme,
  legacyPagerTheme,
  legacyPopoverTheme,
  legacyRadioTheme,
  legacyRangeTheme,
  legacyRedactTheme,
  legacySelectTheme,
  legacySortTheme,
  legacyStackTheme,
  legacyStepperTheme,
  legacyTabsTheme,
  legacyTextareaTheme,
  legacyThemeVars,
  legacyToggleTheme,
  legacyTooltipTheme,
  legacyTreeTheme,
  legacyTypographyTheme,
  legacyVerticalSpacerTheme,
  listTheme,
  menuTheme,
  mergeDeep,
  notificationTheme,
  pagerTheme,
  pluralize,
  popoverTheme,
  portals,
  radioTheme,
  rangeTheme,
  redactTheme,
  safeFormat,
  selectInputTheme,
  selectMenuTheme,
  selectTheme,
  sortTheme,
  stackTheme,
  stepperTheme,
  tabsTheme,
  textareaTheme,
  theme,
  toggleTheme,
  tooltipTheme,
  treeTheme,
  typographyTheme,
  useComponentTheme,
  useConfirmDialog,
  useCursor,
  useDialog,
  useDrawer,
  useExitListener,
  useId,
  useInfinityList,
  useMenu,
  useNotification,
  useOverlay,
  usePosition,
  useTheme,
  useTooltipState,
  useUserSelect,
  useWidth,
  verticalSpacerTheme,
  verticalVariant
};
//# sourceMappingURL=index.js.map
