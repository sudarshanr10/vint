[
  {
    "tags": {},
    "filePath": "src/utils/CloneElement.tsx",
    "description": "CloneElement is a wrapper component for createElement function.\nThis allows you to describe your cloning element declaratively\nwhich is a more natural API for React.",
    "displayName": "CloneElement",
    "methods": [],
    "props": {
      "element": {
        "defaultValue": null,
        "description": "",
        "name": "element",
        "parent": {
          "fileName": "src/utils/CloneElement.tsx",
          "name": "CloneElementProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/CloneElement.tsx",
            "name": "CloneElementProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "childRef": {
        "defaultValue": null,
        "description": "",
        "name": "childRef",
        "parent": {
          "fileName": "src/utils/CloneElement.tsx",
          "name": "CloneElementProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/CloneElement.tsx",
            "name": "CloneElementProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/data/DataSize/DataSize.tsx",
    "description": "",
    "displayName": "DataSize",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The size value to render.",
        "name": "value",
        "parent": {
          "fileName": "src/data/DataSize/DataSize.tsx",
          "name": "DataSizeProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DataSize/DataSize.tsx",
            "name": "DataSizeProps"
          }
        ],
        "required": true,
        "type": {
          "name": "FormatSizeTypes"
        }
      },
      "emptyValue": {
        "defaultValue": null,
        "description": "If the value is undefined/null it will return this value.",
        "name": "emptyValue",
        "parent": {
          "fileName": "src/data/DataSize/DataSize.tsx",
          "name": "DataSizeProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DataSize/DataSize.tsx",
            "name": "DataSizeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "scale": {
        "defaultValue": null,
        "description": "Customize scale for displaying units.",
        "name": "scale",
        "parent": {
          "fileName": "src/data/DataSize/DataSize.tsx",
          "name": "DataSizeProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DataSize/DataSize.tsx",
            "name": "DataSizeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "decimals": {
        "defaultValue": null,
        "description": "The number of decimals to be set.",
        "name": "decimals",
        "parent": {
          "fileName": "src/data/DataSize/DataSize.tsx",
          "name": "DataSizeProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DataSize/DataSize.tsx",
            "name": "DataSizeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/data/DateFormat/DateFormat.tsx",
    "description": "",
    "displayName": "DateFormat",
    "methods": [],
    "props": {
      "allowToggle": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Allow the user to toggle between relative and absolute time.",
        "name": "allowToggle",
        "parent": {
          "fileName": "src/data/DateFormat/DateFormat.tsx",
          "name": "DateFormatProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DateFormat/DateFormat.tsx",
            "name": "DateFormatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "cacheKey": {
        "defaultValue": null,
        "description": "The cache key to use for storing the user's preference.",
        "name": "cacheKey",
        "parent": {
          "fileName": "src/data/DateFormat/DateFormat.tsx",
          "name": "DateFormatProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DateFormat/DateFormat.tsx",
            "name": "DateFormatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "date": {
        "defaultValue": null,
        "description": "The date to format.",
        "name": "date",
        "parent": {
          "fileName": "src/data/DateFormat/DateFormat.tsx",
          "name": "DateFormatProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DateFormat/DateFormat.tsx",
            "name": "DateFormatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number | Date"
        }
      },
      "format": {
        "defaultValue": {
          "value": "MM/dd/yy hh:mm:ss a"
        },
        "description": "The format to use.",
        "name": "format",
        "parent": {
          "fileName": "src/data/DateFormat/DateFormat.tsx",
          "name": "DateFormatProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DateFormat/DateFormat.tsx",
            "name": "DateFormatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fromNow": {
        "defaultValue": null,
        "description": "Whether to use relative time.",
        "name": "fromNow",
        "parent": {
          "fileName": "src/data/DateFormat/DateFormat.tsx",
          "name": "DateFormatProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DateFormat/DateFormat.tsx",
            "name": "DateFormatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "addSuffix": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to add a suffix to the relative time.",
        "name": "addSuffix",
        "parent": {
          "fileName": "src/data/DateFormat/DateFormat.tsx",
          "name": "DateFormatProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DateFormat/DateFormat.tsx",
            "name": "DateFormatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS class names to use.",
        "name": "className",
        "parent": {
          "fileName": "src/data/DateFormat/DateFormat.tsx",
          "name": "DateFormatProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DateFormat/DateFormat.tsx",
            "name": "DateFormatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "includeSeconds": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether to include seconds in the relative time.",
        "name": "includeSeconds",
        "parent": {
          "fileName": "src/data/DateFormat/DateFormat.tsx",
          "name": "DateFormatProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DateFormat/DateFormat.tsx",
            "name": "DateFormatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "emptyMessage": {
        "defaultValue": {
          "value": "N/A"
        },
        "description": "The message to display when the date is empty. Default is \"N/A\".",
        "name": "emptyMessage",
        "parent": {
          "fileName": "src/data/DateFormat/DateFormat.tsx",
          "name": "DateFormatProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DateFormat/DateFormat.tsx",
            "name": "DateFormatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the DateFormat.",
        "name": "theme",
        "parent": {
          "fileName": "src/data/DateFormat/DateFormat.tsx",
          "name": "DateFormatProps"
        },
        "declarations": [
          {
            "fileName": "src/data/DateFormat/DateFormat.tsx",
            "name": "DateFormatProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DateFormatTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/data/Duration/Duration.tsx",
    "description": "",
    "displayName": "Duration",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "Size to pass to the formatter.",
        "name": "value",
        "parent": {
          "fileName": "src/data/Duration/Duration.tsx",
          "name": "DurationProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Duration/Duration.tsx",
            "name": "DurationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "DurationFormatTypes"
        }
      },
      "emptyValue": {
        "defaultValue": {
          "value": "N/A"
        },
        "description": "If the value is undefined/null it will return this value.",
        "name": "emptyValue",
        "parent": {
          "fileName": "src/data/Duration/Duration.tsx",
          "name": "DurationProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Duration/Duration.tsx",
            "name": "DurationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "zeroValue": {
        "defaultValue": {
          "value": "0 ms"
        },
        "description": "If the value is 0 it will return this value. Default to '0 ms'",
        "name": "zeroValue",
        "parent": {
          "fileName": "src/data/Duration/Duration.tsx",
          "name": "DurationProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Duration/Duration.tsx",
            "name": "DurationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/data/Ellipsis/Ellipsis.tsx",
    "description": "",
    "displayName": "Ellipsis",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The value to ellipsis.",
        "name": "value",
        "parent": {
          "fileName": "src/data/Ellipsis/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Ellipsis/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "expandable": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether you can expand or not. Default: true.",
        "name": "expandable",
        "parent": {
          "fileName": "src/data/Ellipsis/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Ellipsis/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "limit": {
        "defaultValue": {
          "value": "256"
        },
        "description": "Limit of characters to show. Default: 256.",
        "name": "limit",
        "parent": {
          "fileName": "src/data/Ellipsis/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Ellipsis/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The title text to show on the hover.",
        "name": "title",
        "parent": {
          "fileName": "src/data/Ellipsis/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Ellipsis/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | false"
        }
      },
      "removeLinebreaks": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Remove line breaks or not.",
        "name": "removeLinebreaks",
        "parent": {
          "fileName": "src/data/Ellipsis/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Ellipsis/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Class name for the container.",
        "name": "className",
        "parent": {
          "fileName": "src/data/Ellipsis/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Ellipsis/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Ellipsis.",
        "name": "theme",
        "parent": {
          "fileName": "src/data/Ellipsis/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Ellipsis/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "EllipsisTheme"
        }
      },
      "lines": {
        "defaultValue": null,
        "description": "Number of lines to show before truncation. If set, overrides the character limit.",
        "name": "lines",
        "parent": {
          "fileName": "src/data/Ellipsis/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Ellipsis/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "moreText": {
        "defaultValue": {
          "value": "..."
        },
        "description": "Custom text for the expand button. Default: \"...\"",
        "name": "moreText",
        "parent": {
          "fileName": "src/data/Ellipsis/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Ellipsis/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "lessText": {
        "defaultValue": {
          "value": "Show less"
        },
        "description": "Custom text for the collapse button. Default: \"Show less\"",
        "name": "lessText",
        "parent": {
          "fileName": "src/data/Ellipsis/Ellipsis.tsx",
          "name": "EllipsisProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Ellipsis/Ellipsis.tsx",
            "name": "EllipsisProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/data/InfinityList/InfinityList.tsx",
    "description": "",
    "displayName": "InfinityList",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The children to filter.",
        "name": "children",
        "parent": {
          "fileName": "src/data/InfinityList/InfinityList.tsx",
          "name": "InfinityListProps"
        },
        "declarations": [
          {
            "fileName": "src/data/InfinityList/InfinityList.tsx",
            "name": "InfinityListProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "buttonClassName": {
        "defaultValue": null,
        "description": "CSS Classname to apply to the button.",
        "name": "buttonClassName",
        "parent": {
          "fileName": "src/data/InfinityList/InfinityList.tsx",
          "name": "InfinityListProps"
        },
        "declarations": [
          {
            "fileName": "src/data/InfinityList/InfinityList.tsx",
            "name": "InfinityListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "10"
        },
        "description": "The page size. Combined with the threshold, this will determine the page size.",
        "name": "size",
        "parent": {
          "fileName": "reablocks/src/data/InfinityList/useInfinityList.ts",
          "name": "InfinityListInputs"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/data/InfinityList/useInfinityList.ts",
            "name": "InfinityListInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "threshold": {
        "defaultValue": {
          "value": "3"
        },
        "description": "The fuzzy threshold to use when calculating the next page size.",
        "name": "threshold",
        "parent": {
          "fileName": "reablocks/src/data/InfinityList/useInfinityList.ts",
          "name": "InfinityListInputs"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/data/InfinityList/useInfinityList.ts",
            "name": "InfinityListInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "nextSize": {
        "defaultValue": null,
        "description": "The numer of items to show in the next page. If undefined, will use the size.\nIf you want to show all items, pass infinity.",
        "name": "nextSize",
        "parent": {
          "fileName": "reablocks/src/data/InfinityList/useInfinityList.ts",
          "name": "InfinityListInputs"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/data/InfinityList/useInfinityList.ts",
            "name": "InfinityListInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/data/Pager/Pager.tsx",
    "description": "",
    "displayName": "Pager",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "The class name to add to the pager.",
        "name": "className",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "pageClassName": {
        "defaultValue": null,
        "description": "The class name to add to the page buttons.",
        "name": "pageClassName",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activePageClassName": {
        "defaultValue": null,
        "description": "The class name for the active page button.",
        "name": "activePageClassName",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "pagesContainerClassName": {
        "defaultValue": null,
        "description": "The class name to add to the pages container.",
        "name": "pagesContainerClassName",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "page": {
        "defaultValue": null,
        "description": "The current page number.",
        "name": "page",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The number of items per page.",
        "name": "size",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "total": {
        "defaultValue": null,
        "description": "The total number of items.",
        "name": "total",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "previousArrow": {
        "defaultValue": {
          "value": "<PreviousArrow />"
        },
        "description": "The React node or string to use for the previous arrow.",
        "name": "previousArrow",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "nextArrow": {
        "defaultValue": {
          "value": "<NextArrow />"
        },
        "description": "The React node or string to use for the next arrow.",
        "name": "nextArrow",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "startArrow": {
        "defaultValue": {
          "value": "<StartArrow />"
        },
        "description": "The React node or string to use for the start arrow.",
        "name": "startArrow",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "endArrow": {
        "defaultValue": {
          "value": "<EndArrow />"
        },
        "description": "The React node or string to use for the end arrow.",
        "name": "endArrow",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onPageChange": {
        "defaultValue": null,
        "description": "A callback function that is called when the page changes.",
        "name": "onPageChange",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(page: number) => void"
        }
      },
      "displayMode": {
        "defaultValue": {
          "value": "pages"
        },
        "description": "The type of table data for the pager to display.",
        "name": "displayMode",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"pages\" | \"items\" | \"all\""
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "The theme for the Pager.",
        "name": "theme",
        "parent": {
          "fileName": "src/data/Pager/Pager.tsx",
          "name": "PagerProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pager/Pager.tsx",
            "name": "PagerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "PagerTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/data/Pluralize/Pluralize.tsx",
    "description": "",
    "displayName": "Pluralize",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "CSS classname for the span element.",
        "name": "className",
        "parent": {
          "fileName": "src/data/Pluralize/Pluralize.tsx",
          "name": "PluralizeProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Pluralize/Pluralize.tsx",
            "name": "PluralizeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "count": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Count of items.",
        "name": "count",
        "parent": {
          "fileName": "reablocks/src/data/Pluralize/utils.ts",
          "name": "PluralizeInputs"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/data/Pluralize/utils.ts",
            "name": "PluralizeInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "singular": {
        "defaultValue": null,
        "description": "Singular form of the word.",
        "name": "singular",
        "parent": {
          "fileName": "reablocks/src/data/Pluralize/utils.ts",
          "name": "PluralizeInputs"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/data/Pluralize/utils.ts",
            "name": "PluralizeInputs"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "plural": {
        "defaultValue": null,
        "description": "Plural form of the word. Not required.",
        "name": "plural",
        "parent": {
          "fileName": "reablocks/src/data/Pluralize/utils.ts",
          "name": "PluralizeInputs"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/data/Pluralize/utils.ts",
            "name": "PluralizeInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "zero": {
        "defaultValue": null,
        "description": "Zero state of the word. Not required.",
        "name": "zero",
        "parent": {
          "fileName": "reablocks/src/data/Pluralize/utils.ts",
          "name": "PluralizeInputs"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/data/Pluralize/utils.ts",
            "name": "PluralizeInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showCount": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Show count in addition to word.",
        "name": "showCount",
        "parent": {
          "fileName": "reablocks/src/data/Pluralize/utils.ts",
          "name": "PluralizeInputs"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/data/Pluralize/utils.ts",
            "name": "PluralizeInputs"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/data/Redact/Redact.tsx",
    "description": "",
    "displayName": "Redact",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Classname of the element.",
        "name": "className",
        "parent": {
          "fileName": "src/data/Redact/Redact.tsx",
          "name": "RedactProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Redact/Redact.tsx",
            "name": "RedactProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "allowToggle": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether you can toggle the text or not.",
        "name": "allowToggle",
        "parent": {
          "fileName": "src/data/Redact/Redact.tsx",
          "name": "RedactProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Redact/Redact.tsx",
            "name": "RedactProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "compactLength": {
        "defaultValue": {
          "value": "8"
        },
        "description": "Number of characters to compact to.",
        "name": "compactLength",
        "parent": {
          "fileName": "src/data/Redact/Redact.tsx",
          "name": "RedactProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Redact/Redact.tsx",
            "name": "RedactProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "character": {
        "defaultValue": {
          "value": "*"
        },
        "description": "The character to replace the text with.",
        "name": "character",
        "parent": {
          "fileName": "src/data/Redact/Redact.tsx",
          "name": "RedactProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Redact/Redact.tsx",
            "name": "RedactProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tooltipText": {
        "defaultValue": {
          "value": "Click to toggle sensitive content"
        },
        "description": "Text to show upon hover.",
        "name": "tooltipText",
        "parent": {
          "fileName": "src/data/Redact/Redact.tsx",
          "name": "RedactProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Redact/Redact.tsx",
            "name": "RedactProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value to conceal.",
        "name": "value",
        "parent": {
          "fileName": "src/data/Redact/Redact.tsx",
          "name": "RedactProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Redact/Redact.tsx",
            "name": "RedactProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "The theme for the Redact.",
        "name": "theme",
        "parent": {
          "fileName": "src/data/Redact/Redact.tsx",
          "name": "RedactProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Redact/Redact.tsx",
            "name": "RedactProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RedactTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/data/Sort/DownArrowIcon.tsx",
    "description": "",
    "displayName": "DownArrowIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/data/Sort/DownArrowIcon.tsx",
          "name": "DownArrowIconProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Sort/DownArrowIcon.tsx",
            "name": "DownArrowIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/data/Sort/Sort.tsx",
    "description": "",
    "displayName": "Sort",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional css classnames to apply",
        "name": "className",
        "parent": {
          "fileName": "src/data/Sort/Sort.tsx",
          "name": "SortProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Sort/Sort.tsx",
            "name": "SortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "iconClassName": {
        "defaultValue": null,
        "description": "Additional css classnames to apply to the icon",
        "name": "iconClassName",
        "parent": {
          "fileName": "src/data/Sort/Sort.tsx",
          "name": "SortProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Sort/Sort.tsx",
            "name": "SortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the sort is disabled",
        "name": "disabled",
        "parent": {
          "fileName": "src/data/Sort/Sort.tsx",
          "name": "SortProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Sort/Sort.tsx",
            "name": "SortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "The current sort direction",
        "name": "direction",
        "parent": {
          "fileName": "src/data/Sort/Sort.tsx",
          "name": "SortProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Sort/Sort.tsx",
            "name": "SortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SortDirection"
        }
      },
      "onSort": {
        "defaultValue": null,
        "description": "The callback to call when the sort is toggled",
        "name": "onSort",
        "parent": {
          "fileName": "src/data/Sort/Sort.tsx",
          "name": "SortProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Sort/Sort.tsx",
            "name": "SortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(direction: SortDirection) => void"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon to display",
        "name": "icon",
        "parent": {
          "fileName": "src/data/Sort/Sort.tsx",
          "name": "SortProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Sort/Sort.tsx",
            "name": "SortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<{ className?: string; }>"
        }
      },
      "neutralIcon": {
        "defaultValue": null,
        "description": "The neutral icon to display.",
        "name": "neutralIcon",
        "parent": {
          "fileName": "src/data/Sort/Sort.tsx",
          "name": "SortProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Sort/Sort.tsx",
            "name": "SortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ComponentType<{ className?: string; }>"
        }
      },
      "neutralIconClassName": {
        "defaultValue": null,
        "description": "Additional css classnames to apply to the neutral icon.",
        "name": "neutralIconClassName",
        "parent": {
          "fileName": "src/data/Sort/Sort.tsx",
          "name": "SortProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Sort/Sort.tsx",
            "name": "SortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Sort.",
        "name": "theme",
        "parent": {
          "fileName": "src/data/Sort/Sort.tsx",
          "name": "SortProps"
        },
        "declarations": [
          {
            "fileName": "src/data/Sort/Sort.tsx",
            "name": "SortProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SortTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/Arrow/Arrow.tsx",
    "description": "",
    "displayName": "Arrow",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "CSS Classname to apply to the arrow",
        "name": "className",
        "parent": {
          "fileName": "src/elements/Arrow/Arrow.tsx",
          "name": "ArrowProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Arrow/Arrow.tsx",
            "name": "ArrowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "direction": {
        "defaultValue": {
          "value": "down"
        },
        "description": "The direction of the arrow",
        "name": "direction",
        "parent": {
          "fileName": "src/elements/Arrow/Arrow.tsx",
          "name": "ArrowProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Arrow/Arrow.tsx",
            "name": "ArrowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"up\" | \"right\" | \"down\" | \"left\""
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Arrow.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/Arrow/Arrow.tsx",
          "name": "ArrowProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Arrow/Arrow.tsx",
            "name": "ArrowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ArrowTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/Avatar/Avatar.tsx",
    "description": "",
    "displayName": "Avatar",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "The name of the person.",
        "name": "name",
        "parent": {
          "fileName": "src/elements/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Avatar/Avatar.tsx",
            "name": "AvatarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "src": {
        "defaultValue": null,
        "description": "The URL of the avatar image.",
        "name": "src",
        "parent": {
          "fileName": "src/elements/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Avatar/Avatar.tsx",
            "name": "AvatarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "24"
        },
        "description": "The size of the avatar.",
        "name": "size",
        "parent": {
          "fileName": "src/elements/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Avatar/Avatar.tsx",
            "name": "AvatarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "filled"
        },
        "description": "Style variant for the avatar.",
        "name": "variant",
        "parent": {
          "fileName": "src/elements/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Avatar/Avatar.tsx",
            "name": "AvatarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"filled\" | \"outline\""
        }
      },
      "rounded": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the avatar is rounded.",
        "name": "rounded",
        "parent": {
          "fileName": "src/elements/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Avatar/Avatar.tsx",
            "name": "AvatarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color override for the avatar.",
        "name": "color",
        "parent": {
          "fileName": "src/elements/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Avatar/Avatar.tsx",
            "name": "AvatarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "colorOptions": {
        "defaultValue": null,
        "description": "Custom color options for the color generator.",
        "name": "colorOptions",
        "parent": {
          "fileName": "src/elements/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Avatar/Avatar.tsx",
            "name": "AvatarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "{ saturation: number; lightness: number; alpha: number; }"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Avatar.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/Avatar/Avatar.tsx",
          "name": "AvatarProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Avatar/Avatar.tsx",
            "name": "AvatarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AvatarTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/AvatarGroup/AvatarGroup.tsx",
    "description": "",
    "displayName": "AvatarGroup",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The avatars to display in the group.",
        "name": "children",
        "parent": {
          "fileName": "src/elements/AvatarGroup/AvatarGroup.tsx",
          "name": "AvatarGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/AvatarGroup/AvatarGroup.tsx",
            "name": "AvatarGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to apply to the avatar group",
        "name": "className",
        "parent": {
          "fileName": "src/elements/AvatarGroup/AvatarGroup.tsx",
          "name": "AvatarGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/AvatarGroup/AvatarGroup.tsx",
            "name": "AvatarGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "10"
        },
        "description": "The maximum number of avatars to show before +x more",
        "name": "size",
        "parent": {
          "fileName": "src/elements/AvatarGroup/AvatarGroup.tsx",
          "name": "AvatarGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/AvatarGroup/AvatarGroup.tsx",
            "name": "AvatarGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the AvatarGroup",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/AvatarGroup/AvatarGroup.tsx",
          "name": "AvatarGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/AvatarGroup/AvatarGroup.tsx",
            "name": "AvatarGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AvatarGroupTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/Badge/Badge.tsx",
    "description": "",
    "displayName": "Badge",
    "methods": [],
    "props": {
      "content": {
        "defaultValue": null,
        "description": "The content of the badge.",
        "name": "content",
        "parent": {
          "fileName": "src/elements/Badge/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Badge/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | Element"
        }
      },
      "color": {
        "defaultValue": {
          "value": "default"
        },
        "description": "The color of the badge.",
        "name": "color",
        "parent": {
          "fileName": "src/elements/Badge/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Badge/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disableMargins": {
        "defaultValue": null,
        "description": "Whether to disable the margins.",
        "name": "disableMargins",
        "parent": {
          "fileName": "src/elements/Badge/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Badge/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "Whether the badge is hidden or not.",
        "name": "hidden",
        "parent": {
          "fileName": "src/elements/Badge/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Badge/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "top-end"
        },
        "description": "The placement of the badge.",
        "name": "placement",
        "parent": {
          "fileName": "src/elements/Badge/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Badge/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BadgePlacement"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Budge.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/Badge/Badge.tsx",
          "name": "BadgeProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Badge/Badge.tsx",
            "name": "BadgeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BadgeTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the HTML span element.",
        "name": "ref",
        "parent": {
          "fileName": "src/elements/Badge/Badge.tsx",
          "name": "BadgeRef"
        },
        "declarations": [
          {
            "fileName": "src/elements/Badge/Badge.tsx",
            "name": "BadgeRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLSpanElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/Button/Button.tsx",
    "description": "",
    "displayName": "Button",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Color variation of the button.",
        "name": "color",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "filled"
        },
        "description": "Style variant of the button.",
        "name": "variant",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The size variation of the button.",
        "name": "size",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "If true, the button will take up the full width of its container.",
        "name": "fullWidth",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableMargins": {
        "defaultValue": null,
        "description": "If true, the margins of the button will be disabled.",
        "name": "disableMargins",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disablePadding": {
        "defaultValue": null,
        "description": "If true, the padding of the button will be disabled.",
        "name": "disablePadding",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableAnimation": {
        "defaultValue": null,
        "description": "If true, the animation of the button will be disabled.",
        "name": "disableAnimation",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "startAdornment": {
        "defaultValue": null,
        "description": "Element to display before the Button content.",
        "name": "startAdornment",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "endAdornment": {
        "defaultValue": null,
        "description": "Element to display after the Button content.",
        "name": "endAdornment",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Button.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "The ref to the button element.",
        "name": "ref",
        "parent": {
          "fileName": "src/elements/Button/Button.tsx",
          "name": "ButtonRef"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/Button.tsx",
            "name": "ButtonRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/Button/ButtonGroup.tsx",
    "description": "",
    "displayName": "ButtonGroup",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The Buttons to display in the group.",
        "name": "children",
        "parent": {
          "fileName": "src/elements/Button/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/ButtonGroup.tsx",
            "name": "ButtonGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to apply to the Button group",
        "name": "className",
        "parent": {
          "fileName": "src/elements/Button/ButtonGroup.tsx",
          "name": "ButtonGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Button/ButtonGroup.tsx",
            "name": "ButtonGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variant of the buttons.",
        "name": "variant",
        "parent": {
          "fileName": "reablocks/src/elements/Button/ButtonGroupContext.ts",
          "name": "ButtonGroupContextProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Button/ButtonGroupContext.ts",
            "name": "ButtonGroupContextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"filled\" | \"outline\" | \"text\""
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size variation of the buttons.",
        "name": "size",
        "parent": {
          "fileName": "reablocks/src/elements/Button/ButtonGroupContext.ts",
          "name": "ButtonGroupContextProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Button/ButtonGroupContext.ts",
            "name": "ButtonGroupContextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"small\" | \"medium\" | \"large\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/Chip/Chip.tsx",
    "description": "",
    "displayName": "Chip",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Color variant for the chip.",
        "name": "color",
        "parent": {
          "fileName": "src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Size variant for the chip.",
        "name": "size",
        "parent": {
          "fileName": "src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "filled"
        },
        "description": "Style variant for the chip.",
        "name": "variant",
        "parent": {
          "fileName": "src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether the chip is selected.",
        "name": "selected",
        "parent": {
          "fileName": "src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the chip is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableMargins": {
        "defaultValue": null,
        "description": "Whether to disable the margins.",
        "name": "disableMargins",
        "parent": {
          "fileName": "src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "Content to display before the chip label.",
        "name": "start",
        "parent": {
          "fileName": "src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "Content to display before the chip label.",
        "name": "end",
        "parent": {
          "fileName": "src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Chip.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChipTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the root element.",
        "name": "ref",
        "parent": {
          "fileName": "src/elements/Chip/Chip.tsx",
          "name": "ChipRef"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/Chip.tsx",
            "name": "ChipRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/Chip/DeletableChip.tsx",
    "description": "",
    "displayName": "DeletableChip",
    "methods": [],
    "props": {
      "deleteIcon": {
        "defaultValue": {
          "value": "<CloseIcon height={12} width={12} />"
        },
        "description": "Customize delete icon.",
        "name": "deleteIcon",
        "parent": {
          "fileName": "src/elements/Chip/DeletableChip.tsx",
          "name": "DeletableChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/DeletableChip.tsx",
            "name": "DeletableChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "onDelete": {
        "defaultValue": null,
        "description": "Callback if the chip is deletable.",
        "name": "onDelete",
        "parent": {
          "fileName": "src/elements/Chip/DeletableChip.tsx",
          "name": "DeletableChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/DeletableChip.tsx",
            "name": "DeletableChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Deletable Chip.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/Chip/DeletableChip.tsx",
          "name": "DeletableChipProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Chip/DeletableChip.tsx",
            "name": "DeletableChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ChipTheme"
        }
      },
      "color": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Color variant for the chip.",
        "name": "color",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Size variant for the chip.",
        "name": "size",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "filled"
        },
        "description": "Style variant for the chip.",
        "name": "variant",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether the chip is selected.",
        "name": "selected",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the chip is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableMargins": {
        "defaultValue": null,
        "description": "Whether to disable the margins.",
        "name": "disableMargins",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "Content to display before the chip label.",
        "name": "start",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the root element.",
        "name": "ref",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipRef"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/CommandPalette/CommandPalette.tsx",
    "description": "",
    "displayName": "CommandPalette",
    "methods": [],
    "props": {
      "search": {
        "defaultValue": null,
        "description": "Search input value.",
        "name": "search",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
          "name": "CommandPaletteProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
            "name": "CommandPaletteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Placeholder text.",
        "name": "placeholder",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
          "name": "CommandPaletteProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
            "name": "CommandPaletteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Selected Index.",
        "name": "selected",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
          "name": "CommandPaletteProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
            "name": "CommandPaletteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "autoFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Autofocus or not.",
        "name": "autoFocus",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
          "name": "CommandPaletteProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
            "name": "CommandPaletteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "emptyMessage": {
        "defaultValue": null,
        "description": "Empty message to show when there are no items.",
        "name": "emptyMessage",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
          "name": "CommandPaletteProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
            "name": "CommandPaletteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputIcon": {
        "defaultValue": null,
        "description": "Icon to show in the search input.",
        "name": "inputIcon",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
          "name": "CommandPaletteProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
            "name": "CommandPaletteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onSearchChange": {
        "defaultValue": null,
        "description": "When the search input value changes.",
        "name": "onSearchChange",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
          "name": "CommandPaletteProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
            "name": "CommandPaletteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "onSelectedIndexChange": {
        "defaultValue": null,
        "description": "When a user picks something from the list.",
        "name": "onSelectedIndexChange",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
          "name": "CommandPaletteProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
            "name": "CommandPaletteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: number) => void"
        }
      },
      "onHotkey": {
        "defaultValue": null,
        "description": "When a hotkey was triggered.",
        "name": "onHotkey",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
          "name": "CommandPaletteProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
            "name": "CommandPaletteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(hotkey: HotkeyIem) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the CommandPalette.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
          "name": "CommandPaletteProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPalette.tsx",
            "name": "CommandPaletteProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CommandPaletteTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/IconButton/IconButton.tsx",
    "description": "",
    "displayName": "IconButton",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": null,
        "description": "Color variation of the button.",
        "name": "color",
        "parent": {
          "fileName": "reablocks/src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variant of the button.",
        "name": "variant",
        "parent": {
          "fileName": "reablocks/src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The size variation of the button.",
        "name": "size",
        "parent": {
          "fileName": "reablocks/src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disableMargins": {
        "defaultValue": null,
        "description": "If true, the margins of the button will be disabled.",
        "name": "disableMargins",
        "parent": {
          "fileName": "reablocks/src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disablePadding": {
        "defaultValue": null,
        "description": "If true, the padding of the button will be disabled.",
        "name": "disablePadding",
        "parent": {
          "fileName": "reablocks/src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableAnimation": {
        "defaultValue": null,
        "description": "If true, the animation of the button will be disabled.",
        "name": "disableAnimation",
        "parent": {
          "fileName": "reablocks/src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Button.",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/elements/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ButtonTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "The ref to the button element.",
        "name": "ref",
        "parent": {
          "fileName": "reablocks/src/elements/Button/Button.tsx",
          "name": "ButtonRef"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Button/Button.tsx",
            "name": "ButtonRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLButtonElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/Kbd/Kbd.tsx",
    "description": "",
    "displayName": "Kbd",
    "methods": [],
    "props": {
      "keycode": {
        "defaultValue": null,
        "description": "Keycode for the Kbd.",
        "name": "keycode",
        "parent": {
          "fileName": "src/elements/Kbd/Kbd.tsx",
          "name": "KbdProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Kbd/Kbd.tsx",
            "name": "KbdProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Kbd.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/Kbd/Kbd.tsx",
          "name": "KbdProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Kbd/Kbd.tsx",
            "name": "KbdProps"
          }
        ],
        "required": false,
        "type": {
          "name": "KbdTheme"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "Color variant for the chip.",
        "name": "color",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size variant for the chip.",
        "name": "size",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "Style variant for the chip.",
        "name": "variant",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether the chip is selected.",
        "name": "selected",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the chip is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableMargins": {
        "defaultValue": null,
        "description": "Whether to disable the margins.",
        "name": "disableMargins",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "Content to display before the chip label.",
        "name": "start",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "Content to display before the chip label.",
        "name": "end",
        "parent": {
          "fileName": "reablocks/src/elements/Chip/Chip.tsx",
          "name": "ChipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/elements/Chip/Chip.tsx",
            "name": "ChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ReactElement<any, string | JSXElementConstructor<any>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/Loader/DotsLoader.tsx",
    "description": "",
    "displayName": "DotsLoader",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional class names for the loader.",
        "name": "className",
        "parent": {
          "fileName": "src/elements/Loader/DotsLoader.tsx",
          "name": "DotsLoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Loader/DotsLoader.tsx",
            "name": "DotsLoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "speed": {
        "defaultValue": {
          "value": "0.2"
        },
        "description": "The speed of the animation.",
        "name": "speed",
        "parent": {
          "fileName": "src/elements/Loader/DotsLoader.tsx",
          "name": "DotsLoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Loader/DotsLoader.tsx",
            "name": "DotsLoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The size of the loader.",
        "name": "size",
        "parent": {
          "fileName": "src/elements/Loader/DotsLoader.tsx",
          "name": "DotsLoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Loader/DotsLoader.tsx",
            "name": "DotsLoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the DotsLoader.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/Loader/DotsLoader.tsx",
          "name": "DotsLoaderProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/Loader/DotsLoader.tsx",
            "name": "DotsLoaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DotsLoaderTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Calendar/Calendar.tsx",
    "description": "",
    "displayName": "Calendar",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The selected date(s) for the calendar.",
        "name": "value",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date | [Date, Date] | [Date, undefined] | [undefined, undefined]"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "The minimum selectable date for the calendar.",
        "name": "min",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "The maximum selectable date for the calendar.\nCan also be set to 'now' to use the current date.",
        "name": "max",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date | \"now\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the calendar is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isRange": {
        "defaultValue": null,
        "description": "Whether the calendar is a range picker.",
        "name": "isRange",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "nextArrow": {
        "defaultValue": {
          "value": "›"
        },
        "description": "The text or icon to use for next.",
        "name": "nextArrow",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "previousArrow": {
        "defaultValue": {
          "value": "‹"
        },
        "description": "The text or icon to use for previous.",
        "name": "previousArrow",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "showDayOfWeek": {
        "defaultValue": null,
        "description": "Whether to display day of week labels",
        "name": "showDayOfWeek",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showToday": {
        "defaultValue": null,
        "description": "Whether to highlight the today.",
        "name": "showToday",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to animate the calendar.",
        "name": "animated",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback function that is called when the selected date(s) change.",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: Date | [Date, Date]) => void"
        }
      },
      "onViewChange": {
        "defaultValue": null,
        "description": "A callback function that is called when the calendar view changes.",
        "name": "onViewChange",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(view: CalendarViewType) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Calendar.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalendarTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Calendar/CalendarRange.tsx",
    "description": "",
    "displayName": "CalendarRange",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The selected date(s) for the calendar.",
        "name": "value",
        "parent": {
          "fileName": "src/form/Calendar/CalendarRange.tsx",
          "name": "CalendarRangeProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarRange.tsx",
            "name": "CalendarRangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "[Date, Date] | [undefined, undefined] | [Date]"
        }
      },
      "monthsToDisplay": {
        "defaultValue": {
          "value": "2"
        },
        "description": "The number of calendar months to display.",
        "name": "monthsToDisplay",
        "parent": {
          "fileName": "src/form/Calendar/CalendarRange.tsx",
          "name": "CalendarRangeProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarRange.tsx",
            "name": "CalendarRangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "direction": {
        "defaultValue": {
          "value": "future"
        },
        "description": "Defaults view to show past or future months if multiple months shown.",
        "name": "direction",
        "parent": {
          "fileName": "src/form/Calendar/CalendarRange.tsx",
          "name": "CalendarRangeProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarRange.tsx",
            "name": "CalendarRangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"past\" | \"future\""
        }
      },
      "nextYearArrow": {
        "defaultValue": {
          "value": "»"
        },
        "description": "The text or icon to use for next year.",
        "name": "nextYearArrow",
        "parent": {
          "fileName": "src/form/Calendar/CalendarRange.tsx",
          "name": "CalendarRangeProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarRange.tsx",
            "name": "CalendarRangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "previousYearArrow": {
        "defaultValue": {
          "value": "«"
        },
        "description": "The text or icon to use for previous year.",
        "name": "previousYearArrow",
        "parent": {
          "fileName": "src/form/Calendar/CalendarRange.tsx",
          "name": "CalendarRangeProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarRange.tsx",
            "name": "CalendarRangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "headerDateFormat": {
        "defaultValue": {
          "value": "MMMM"
        },
        "description": "The format of the date displayed in the calendar header.",
        "name": "headerDateFormat",
        "parent": {
          "fileName": "src/form/Calendar/CalendarRange.tsx",
          "name": "CalendarRangeProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarRange.tsx",
            "name": "CalendarRangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the CalendarRange.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Calendar/CalendarRange.tsx",
          "name": "CalendarRangeProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarRange.tsx",
            "name": "CalendarRangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalendarRangeTheme"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "The minimum selectable date for the calendar.",
        "name": "min",
        "parent": {
          "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "The maximum selectable date for the calendar.\nCan also be set to 'now' to use the current date.",
        "name": "max",
        "parent": {
          "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date | \"now\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the calendar is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "nextArrow": {
        "defaultValue": {
          "value": "›"
        },
        "description": "The text or icon to use for next.",
        "name": "nextArrow",
        "parent": {
          "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "previousArrow": {
        "defaultValue": {
          "value": "‹"
        },
        "description": "The text or icon to use for previous.",
        "name": "previousArrow",
        "parent": {
          "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "showDayOfWeek": {
        "defaultValue": null,
        "description": "Whether to display day of week labels",
        "name": "showDayOfWeek",
        "parent": {
          "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showToday": {
        "defaultValue": null,
        "description": "Whether to highlight the today.",
        "name": "showToday",
        "parent": {
          "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "animated": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to animate the calendar.",
        "name": "animated",
        "parent": {
          "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback function that is called when the selected date(s) change.",
        "name": "onChange",
        "parent": {
          "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
          "name": "CalendarProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Calendar/Calendar.tsx",
            "name": "CalendarProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: Date | [Date, Date]) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Checkbox/Checkbox.tsx",
    "description": "",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "checked": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the checkbox is checked or not.",
        "name": "checked",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "intermediate": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the checkbox is in an intermediate state or not.",
        "name": "intermediate",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label for the checkbox.",
        "name": "label",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelPosition": {
        "defaultValue": {
          "value": "end"
        },
        "description": "Label position of checkbox.",
        "name": "labelPosition",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the checkbox is disabled or not.",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Size of the checkbox.",
        "name": "size",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class names to apply to the checkbox.",
        "name": "className",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Additional class names to apply to the container.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Additional class names to apply to the label.",
        "name": "labelClassName",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "borderPath": {
        "defaultValue": {
          "value": "M 1 0 L 16 0 C 16.552 0 17 0.448 17 1 L 17 15 C 17 15.552 16.552 16 16 16 L 1 16 C 0.448 16 0 15.552 0 15 L 0 1 C 0 0.448 0.448 0 1 0 Z"
        },
        "description": "Custom svg path for border.",
        "name": "borderPath",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "checkedPath": {
        "defaultValue": {
          "value": "M 4 8 L 8 12 L 12 4"
        },
        "description": "Custom svg path for checked state.",
        "name": "checkedPath",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "intermediatePath": {
        "defaultValue": {
          "value": "M 5.36396 8.17792 L 10.6044 8.17792"
        },
        "description": "Custom svg path for intermediate state.",
        "name": "intermediatePath",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Event handler for when the checkbox is changed.",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: boolean) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Event handler for when the checkbox is blurred.",
        "name": "onBlur",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: FocusEvent<HTMLDivElement, Element>) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Checkbox.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CheckboxTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "The ref to the checkbox element.",
        "name": "ref",
        "parent": {
          "fileName": "src/form/Checkbox/Checkbox.tsx",
          "name": "CheckboxRef"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/Checkbox.tsx",
            "name": "CheckboxRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Checkbox/CheckboxLabel.tsx",
    "description": "",
    "displayName": "CheckboxLabel",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "",
        "name": "label",
        "parent": {
          "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
          "name": "CheckboxLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
            "name": "CheckboxLabelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "",
        "name": "size",
        "parent": {
          "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
          "name": "CheckboxLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
            "name": "CheckboxLabelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
          "name": "CheckboxLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
            "name": "CheckboxLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "checked": {
        "defaultValue": null,
        "description": "",
        "name": "checked",
        "parent": {
          "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
          "name": "CheckboxLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
            "name": "CheckboxLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
          "name": "CheckboxLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
            "name": "CheckboxLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "",
        "name": "labelClassName",
        "parent": {
          "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
          "name": "CheckboxLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
            "name": "CheckboxLabelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
          "name": "CheckboxLabelProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Checkbox/CheckboxLabel.tsx",
            "name": "CheckboxLabelProps"
          }
        ],
        "required": true,
        "type": {
          "name": "CheckboxTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/DateInput/DateInput.tsx",
    "description": "",
    "displayName": "DateInput",
    "methods": [],
    "props": {
      "size": {
        "defaultValue": null,
        "description": "Size of the input.",
        "name": "size",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "If true, the input will take up the full width of its container.",
        "name": "fullWidth",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selectOnFocus": {
        "defaultValue": null,
        "description": "If true, the input will be focused during the first mount.",
        "name": "selectOnFocus",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "If true, the input will show an error state.",
        "name": "error",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "containerClassname": {
        "defaultValue": null,
        "description": "Additional classname for the input container element.",
        "name": "containerClassname",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "Content to display before the input.\n@deprecated Use `startAdornment` instead.",
        "name": "start",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "Content to display after the input.\n@deprecated Use `endAdornment` instead.",
        "name": "end",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "startAdornment": {
        "defaultValue": null,
        "description": "Element to display before the Button content.",
        "name": "startAdornment",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "endAdornment": {
        "defaultValue": null,
        "description": "Element to display after the Button content.",
        "name": "endAdornment",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onValueChange": {
        "defaultValue": null,
        "description": "Shortcut for the onChange value event.",
        "name": "onValueChange",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Input.",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InputTheme"
        }
      },
      "format": {
        "defaultValue": {
          "value": "MM/dd/yyyy"
        },
        "description": "The format in which the date should be displayed.",
        "name": "format",
        "declarations": [
          {
            "fileName": "src/form/DateInput/DateInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "{string}"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "bottom-start"
        },
        "description": "Calendar placement type.",
        "name": "placement",
        "declarations": [
          {
            "fileName": "src/form/DateInput/DateInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "openOnFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Open calendar on field focus",
        "name": "openOnFocus",
        "declarations": [
          {
            "fileName": "src/form/DateInput/DateInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": {
          "value": "<CalendarIcon />"
        },
        "description": "Icon to show in open calendar button.",
        "name": "icon",
        "declarations": [
          {
            "fileName": "src/form/DateInput/DateInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "isRange": {
        "defaultValue": null,
        "description": "",
        "name": "isRange",
        "declarations": [
          {
            "fileName": "src/form/DateInput/DateInput.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/form/DateInput/DateInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "",
        "name": "value",
        "declarations": [
          {
            "fileName": "src/form/DateInput/DateInput.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/form/DateInput/DateInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "Date | [Date, Date]"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "declarations": [
          {
            "fileName": "src/form/DateInput/DateInput.tsx",
            "name": "TypeLiteral"
          },
          {
            "fileName": "src/form/DateInput/DateInput.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "((value: [Date, Date]) => void) | ((value: Date) => void)"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Input/Input.tsx",
    "description": "",
    "displayName": "Input",
    "methods": [],
    "props": {
      "fullWidth": {
        "defaultValue": null,
        "description": "If true, the input will take up the full width of its container.",
        "name": "fullWidth",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selectOnFocus": {
        "defaultValue": null,
        "description": "If true, the input will be focused during the first mount.",
        "name": "selectOnFocus",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "If true, the input will show an error state.",
        "name": "error",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "containerClassname": {
        "defaultValue": null,
        "description": "Additional classname for the input container element.",
        "name": "containerClassname",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Size of the input.",
        "name": "size",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "Content to display before the input.\n@deprecated Use `startAdornment` instead.",
        "name": "start",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "Content to display after the input.\n@deprecated Use `endAdornment` instead.",
        "name": "end",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "startAdornment": {
        "defaultValue": null,
        "description": "Element to display before the Button content.",
        "name": "startAdornment",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "endAdornment": {
        "defaultValue": null,
        "description": "Element to display after the Button content.",
        "name": "endAdornment",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onValueChange": {
        "defaultValue": null,
        "description": "Shortcut for the onChange value event.",
        "name": "onValueChange",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Input.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InputTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Radio/Radio.tsx",
    "description": "",
    "displayName": "Radio",
    "methods": [],
    "props": {
      "checked": {
        "defaultValue": null,
        "description": "Whether the radio is checked or not.\nRequired only if `Radio` is used independently outside a `RadioGroup`.\nIf `Radio` is used inside a `RadioGroup` then the value is internally set depending upon if the `value` is same as the selected value.",
        "name": "checked",
        "parent": {
          "fileName": "src/form/Radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label for the radio.",
        "name": "label",
        "parent": {
          "fileName": "src/form/Radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the radio is disabled or not.",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class names to apply to the radio.",
        "name": "className",
        "parent": {
          "fileName": "src/form/Radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Size of the radio.",
        "name": "size",
        "parent": {
          "fileName": "src/form/Radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Event handler for when the radio is changed.",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/Radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: boolean) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Event handler for when the radio is blurred.",
        "name": "onBlur",
        "parent": {
          "fileName": "src/form/Radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: FocusEvent<HTMLDivElement, Element>) => void"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "Value passed to the form when used inside a `RadioGroup`.\nRequired when `Radio` is used within a `RadioGroup`",
        "name": "value",
        "parent": {
          "fileName": "src/form/Radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Radio.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Radio/Radio.tsx",
          "name": "RadioProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/Radio.tsx",
            "name": "RadioProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RadioTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the radio element.",
        "name": "ref",
        "parent": {
          "fileName": "src/form/Radio/Radio.tsx",
          "name": "RadioRef"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/Radio.tsx",
            "name": "RadioRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Radio/RadioGroup.tsx",
    "description": "",
    "displayName": "RadioGroup",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The Radio Buttons to display in the group.",
        "name": "children",
        "parent": {
          "fileName": "src/form/Radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classes to apply to the Radio group",
        "name": "className",
        "parent": {
          "fileName": "src/form/Radio/RadioGroup.tsx",
          "name": "RadioGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Radio/RadioGroup.tsx",
            "name": "RadioGroupProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Event handler for when the radio selection is changed.",
        "name": "onChange",
        "parent": {
          "fileName": "reablocks/src/form/Radio/RadioGroupContext.ts",
          "name": "RadioGroupContextProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Radio/RadioGroupContext.ts",
            "name": "RadioGroupContextProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(value: any) => void"
        }
      },
      "selectedValue": {
        "defaultValue": null,
        "description": "Default value of the Radio Button which is checked",
        "name": "selectedValue",
        "parent": {
          "fileName": "reablocks/src/form/Radio/RadioGroupContext.ts",
          "name": "RadioGroupContextProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Radio/RadioGroupContext.ts",
            "name": "RadioGroupContextProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Range/RangeDouble.tsx",
    "description": "",
    "displayName": "RangeDouble",
    "methods": [],
    "props": {
      "disabled": {
        "defaultValue": null,
        "description": "Whether the range is disabled",
        "name": "disabled",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class name to apply to the range",
        "name": "className",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "handleClassName": {
        "defaultValue": null,
        "description": "Additional class name to apply to the handle",
        "name": "handleClassName",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "The minimum value of the range",
        "name": "min",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "The maximum value of the range",
        "name": "max",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "step": {
        "defaultValue": {
          "value": "1"
        },
        "description": "The value will be a multiple of step\nThe default is 1",
        "name": "step",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value of the range",
        "name": "value",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": true,
        "type": {
          "name": "[number, number]"
        }
      },
      "valueDisplay": {
        "defaultValue": {
          "value": "hover"
        },
        "description": "When to display the current value",
        "name": "valueDisplay",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"always\" | \"hover\""
        }
      },
      "valueFormat": {
        "defaultValue": {
          "value": "value => value.toLocaleString()"
        },
        "description": "Format the value to display",
        "name": "valueFormat",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: number) => string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles to apply to the range",
        "name": "style",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Event fired when the range value changes",
        "name": "onChange",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: [number, number]) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the range",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RangeTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Range/RangeSingle.tsx",
    "description": "",
    "displayName": "RangeSingle",
    "methods": [],
    "props": {
      "showHighlight": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Display the highlight when true",
        "name": "showHighlight",
        "parent": {
          "fileName": "src/form/Range/RangeSingle.tsx",
          "name": "RangeSingleProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Range/RangeSingle.tsx",
            "name": "RangeSingleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the range is disabled",
        "name": "disabled",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class name to apply to the range",
        "name": "className",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "handleClassName": {
        "defaultValue": null,
        "description": "Additional class name to apply to the handle",
        "name": "handleClassName",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "The minimum value of the range",
        "name": "min",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "The maximum value of the range",
        "name": "max",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "step": {
        "defaultValue": {
          "value": "1"
        },
        "description": "The value will be a multiple of step\nThe default is 1",
        "name": "step",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value of the range",
        "name": "value",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "valueDisplay": {
        "defaultValue": {
          "value": "hover"
        },
        "description": "When to display the current value",
        "name": "valueDisplay",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"always\" | \"hover\""
        }
      },
      "valueFormat": {
        "defaultValue": {
          "value": "value => value.toLocaleString()"
        },
        "description": "Format the value to display",
        "name": "valueFormat",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: number) => string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional css styles to apply to the range",
        "name": "style",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Event fired when the range value changes",
        "name": "onChange",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: number) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the range",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
          "name": "RangeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/form/Range/RangeTooltip.tsx",
            "name": "RangeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "RangeTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Range/RangeTooltip.tsx",
    "description": "",
    "displayName": "RangeTooltip",
    "methods": [],
    "props": {
      "visible": {
        "defaultValue": null,
        "description": "",
        "name": "visible",
        "parent": {
          "fileName": "src/form/Range/RangeTooltip.tsx",
          "name": "RangeTooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Range/RangeTooltip.tsx",
            "name": "RangeTooltipProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Select/Select.tsx",
    "description": "",
    "displayName": "Select",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "The id of the select.",
        "name": "id",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "The form name of the select.",
        "name": "name",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional CSS style attributes to apply to the select.",
        "name": "style",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class names to apply to the select.",
        "name": "className",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "Additional class names to apply to the select container.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activeClassName": {
        "defaultValue": null,
        "description": "Additional class names to apply to the select when the\nmenu is open",
        "name": "activeClassName",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Set the select to disabled state.",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "Auto focus the select on render.",
        "name": "autoFocus",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnSelect": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close the select after you select an option.",
        "name": "closeOnSelect",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value of the select.",
        "name": "value",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | string[]"
        }
      },
      "defaultFilterValue": {
        "defaultValue": null,
        "description": "The deafult value of the input filter.",
        "name": "defaultFilterValue",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Whether the select is required or not.",
        "name": "required",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "multiple": {
        "defaultValue": null,
        "description": "Whether the select is multi or single select.",
        "name": "multiple",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Default placeholder text.",
        "name": "placeholder",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "filterable": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether you can filter the select options.",
        "name": "filterable",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"async\""
        }
      },
      "clearable": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether you can clear the select after selection.",
        "name": "clearable",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "tabToSelect": {
        "defaultValue": null,
        "description": "Whether you can use the Tab key to select the current active option.",
        "name": "tabToSelect",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the select is in loading state or not.",
        "name": "loading",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "refreshable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether you can refresh the async values or not.",
        "name": "refreshable",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "createable": {
        "defaultValue": null,
        "description": "Whether you can create new options or not.",
        "name": "createable",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selectOnPaste": {
        "defaultValue": null,
        "description": "Select options when paste text inside input.",
        "name": "selectOnPaste",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selectOnKeys": {
        "defaultValue": {
          "value": "['Enter']"
        },
        "description": "The list of KeyCodes for creating select values.\nThe default is ['Enter']\nTypical options would be: ['Enter', 'Tab', 'Space', 'Comma']",
        "name": "selectOnKeys",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The options of the select.",
        "name": "children",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Whether the select has an error state or not.",
        "name": "error",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "menuPlacement": {
        "defaultValue": {
          "value": "bottom-start"
        },
        "description": "The placement options for the menu.",
        "name": "menuPlacement",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "menuDisabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the menu is disabled or not.",
        "name": "menuDisabled",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The size of the select.",
        "name": "size",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "clearOnBlur": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to clear the input on blur.",
        "name": "clearOnBlur",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onInputKeydown": {
        "defaultValue": null,
        "description": "When the input receives a key down event.",
        "name": "onInputKeydown",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent<HTMLInputElement>) => void"
        }
      },
      "onInputKeyUp": {
        "defaultValue": null,
        "description": "When the input receives a key up event.",
        "name": "onInputKeyUp",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent<HTMLInputElement>) => void"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "When the select was focused.",
        "name": "onFocus",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: FocusEvent<HTMLInputElement, Element> | MouseEvent<HTMLDivElement, MouseEvent>) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "When the select was blurred.",
        "name": "onBlur",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: FocusEvent<HTMLInputElement, Element>) => void"
        }
      },
      "onInputChange": {
        "defaultValue": null,
        "description": "When the select input value changed.",
        "name": "onInputChange",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "onRefresh": {
        "defaultValue": null,
        "description": "When the user manually refreshed the options.",
        "name": "onRefresh",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "When the user clears the select input.",
        "name": "onClear",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "When the value changes.",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: any) => void"
        }
      },
      "onOptionsChange": {
        "defaultValue": null,
        "description": "When a new option is added or removed.",
        "name": "onOptionsChange",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(options: SelectOptionProps[]) => void"
        }
      },
      "input": {
        "defaultValue": {
          "value": "<SelectInput />"
        },
        "description": "Input override component.",
        "name": "input",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<SelectInputProps, FC<SelectInputProps>>"
        }
      },
      "menu": {
        "defaultValue": {
          "value": "<SelectMenu />"
        },
        "description": "Menu component override.",
        "name": "menu",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<SelectMenuProps, FC<SelectMenuProps>>"
        }
      },
      "searchOptions": {
        "defaultValue": null,
        "description": "The options for the Fuse.js search algorithm.",
        "name": "searchOptions",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "IFuseOptions<SelectOptionProps>"
        }
      },
      "onOpenMenu": {
        "defaultValue": null,
        "description": "When menu is opened",
        "name": "onOpenMenu",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onCloseMenu": {
        "defaultValue": null,
        "description": "When menu is closed",
        "name": "onCloseMenu",
        "parent": {
          "fileName": "src/form/Select/Select.tsx",
          "name": "SelectProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/Select.tsx",
            "name": "SelectProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Select/SelectOption.tsx",
    "description": "",
    "displayName": "SelectOption",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "Value of the option. Usually a string value.",
        "name": "value",
        "parent": {
          "fileName": "src/form/Select/SelectOption.tsx",
          "name": "SelectOptionProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectOption.tsx",
            "name": "SelectOptionProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Default label of the option.",
        "name": "children",
        "parent": {
          "fileName": "src/form/Select/SelectOption.tsx",
          "name": "SelectOptionProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectOption.tsx",
            "name": "SelectOptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "inputLabel": {
        "defaultValue": null,
        "description": "Custom input label.",
        "name": "inputLabel",
        "parent": {
          "fileName": "src/form/Select/SelectOption.tsx",
          "name": "SelectOptionProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectOption.tsx",
            "name": "SelectOptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "group": {
        "defaultValue": null,
        "description": "Optional group for the option.",
        "name": "group",
        "parent": {
          "fileName": "src/form/Select/SelectOption.tsx",
          "name": "SelectOptionProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectOption.tsx",
            "name": "SelectOptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "menuLabel": {
        "defaultValue": null,
        "description": "Optional menu label.",
        "name": "menuLabel",
        "parent": {
          "fileName": "src/form/Select/SelectOption.tsx",
          "name": "SelectOptionProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectOption.tsx",
            "name": "SelectOptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "inputPrefix": {
        "defaultValue": null,
        "description": "Optional input prefix.",
        "name": "inputPrefix",
        "parent": {
          "fileName": "src/form/Select/SelectOption.tsx",
          "name": "SelectOptionProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectOption.tsx",
            "name": "SelectOptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "Whether the option is selected.",
        "name": "selected",
        "parent": {
          "fileName": "src/form/Select/SelectOption.tsx",
          "name": "SelectOptionProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectOption.tsx",
            "name": "SelectOptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the option is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Select/SelectOption.tsx",
          "name": "SelectOptionProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectOption.tsx",
            "name": "SelectOptionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Textarea/Textarea.tsx",
    "description": "",
    "displayName": "Textarea",
    "methods": [],
    "props": {
      "containerClassName": {
        "defaultValue": null,
        "description": "Additional classname for the input container element.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/form/Textarea/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "Mark field as errored",
        "name": "error",
        "parent": {
          "fileName": "src/form/Textarea/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "If true, the field will take up the full width of its container.",
        "name": "fullWidth",
        "parent": {
          "fileName": "src/form/Textarea/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Size of the field.",
        "name": "size",
        "parent": {
          "fileName": "src/form/Textarea/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Textarea.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Textarea/Textarea.tsx",
          "name": "TextareaProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Textarea/Textarea.tsx",
            "name": "TextareaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TextareaTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Toggle/Toggle.tsx",
    "description": "",
    "displayName": "Toggle",
    "methods": [],
    "props": {
      "checked": {
        "defaultValue": null,
        "description": "Whether the toggle is checked or not.",
        "name": "checked",
        "parent": {
          "fileName": "src/form/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the toggle is disabled or not.",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class names to apply to the toggle.",
        "name": "className",
        "parent": {
          "fileName": "src/form/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The size of the toggle.",
        "name": "size",
        "parent": {
          "fileName": "src/form/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "When the toggle is changed.",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: boolean) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "When the toggle was blurred.",
        "name": "onBlur",
        "parent": {
          "fileName": "src/form/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: FocusEvent<HTMLDivElement, Element>) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Toggle.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ToggleTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the toggle element.",
        "name": "ref",
        "parent": {
          "fileName": "src/form/Toggle/Toggle.tsx",
          "name": "ToggleRef"
        },
        "declarations": [
          {
            "fileName": "src/form/Toggle/Toggle.tsx",
            "name": "ToggleRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Backdrop/Backdrop.tsx",
    "description": "",
    "displayName": "Backdrop",
    "methods": [],
    "props": {
      "zIndex": {
        "defaultValue": {
          "value": "998"
        },
        "description": "The z-index of the backdrop.",
        "name": "zIndex",
        "parent": {
          "fileName": "src/layers/Backdrop/Backdrop.tsx",
          "name": "BackdropProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Backdrop/Backdrop.tsx",
            "name": "BackdropProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "portalIndex": {
        "defaultValue": {
          "value": "0"
        },
        "description": "The index of the portal.",
        "name": "portalIndex",
        "parent": {
          "fileName": "src/layers/Backdrop/Backdrop.tsx",
          "name": "BackdropProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Backdrop/Backdrop.tsx",
            "name": "BackdropProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class names to apply to the backdrop.",
        "name": "className",
        "parent": {
          "fileName": "src/layers/Backdrop/Backdrop.tsx",
          "name": "BackdropProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Backdrop/Backdrop.tsx",
            "name": "BackdropProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Backdrop.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Backdrop/Backdrop.tsx",
          "name": "BackdropProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Backdrop/Backdrop.tsx",
            "name": "BackdropProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BackdropTheme"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback for when the backdrop is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "src/layers/Backdrop/Backdrop.tsx",
          "name": "BackdropProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Backdrop/Backdrop.tsx",
            "name": "BackdropProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<Element, MouseEvent>) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Callout/Callout.tsx",
    "description": "",
    "displayName": "Callout",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "The text of the callout.",
        "name": "text",
        "parent": {
          "fileName": "src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon of the callout.",
        "name": "icon",
        "parent": {
          "fileName": "src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "default"
        },
        "description": "The variant of the callout.",
        "name": "variant",
        "parent": {
          "fileName": "src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"success\" | \"error\" | \"warning\" | \"info\""
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "The theme of the callout.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalloutTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Callout/ErrorCallout.tsx",
    "description": "",
    "displayName": "ErrorCallout",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "The text of the callout.",
        "name": "text",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon of the callout.",
        "name": "icon",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "The variant of the callout.",
        "name": "variant",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"success\" | \"error\" | \"warning\" | \"info\""
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "The theme of the callout.",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalloutTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Callout/InfoCallout.tsx",
    "description": "",
    "displayName": "InfoCallout",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "The text of the callout.",
        "name": "text",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon of the callout.",
        "name": "icon",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "The variant of the callout.",
        "name": "variant",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"success\" | \"error\" | \"warning\" | \"info\""
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "The theme of the callout.",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalloutTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Callout/SuccessCallout.tsx",
    "description": "",
    "displayName": "SuccessCallout",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "The text of the callout.",
        "name": "text",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon of the callout.",
        "name": "icon",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "The variant of the callout.",
        "name": "variant",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"success\" | \"error\" | \"warning\" | \"info\""
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "The theme of the callout.",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalloutTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Callout/WarningCallout.tsx",
    "description": "",
    "displayName": "WarningCallout",
    "methods": [],
    "props": {
      "text": {
        "defaultValue": null,
        "description": "The text of the callout.",
        "name": "text",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon of the callout.",
        "name": "icon",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "The variant of the callout.",
        "name": "variant",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"success\" | \"error\" | \"warning\" | \"info\""
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "The theme of the callout.",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/layers/Callout/Callout.tsx",
          "name": "CalloutProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Callout/Callout.tsx",
            "name": "CalloutProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalloutTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
    "description": "",
    "displayName": "ConfirmDialog",
    "methods": [],
    "props": {
      "open": {
        "defaultValue": null,
        "description": "Whether the dialog is open or not",
        "name": "open",
        "parent": {
          "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
          "name": "ConfirmDialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
            "name": "ConfirmDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "header": {
        "defaultValue": null,
        "description": "The header of the dialog",
        "name": "header",
        "parent": {
          "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
          "name": "ConfirmDialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
            "name": "ConfirmDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "The content of the dialog",
        "name": "content",
        "parent": {
          "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
          "name": "ConfirmDialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
            "name": "ConfirmDialogProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "confirmLabel": {
        "defaultValue": {
          "value": "Confirm"
        },
        "description": "The label for the confirm button",
        "name": "confirmLabel",
        "parent": {
          "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
          "name": "ConfirmDialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
            "name": "ConfirmDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "cancelLabel": {
        "defaultValue": {
          "value": "Cancel"
        },
        "description": "The label for the cancel button",
        "name": "cancelLabel",
        "parent": {
          "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
          "name": "ConfirmDialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
            "name": "ConfirmDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onConfirm": {
        "defaultValue": null,
        "description": "Callback when the confirm button is clicked",
        "name": "onConfirm",
        "parent": {
          "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
          "name": "ConfirmDialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
            "name": "ConfirmDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onCancel": {
        "defaultValue": null,
        "description": "Callback when the cancel button is clicked",
        "name": "onCancel",
        "parent": {
          "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
          "name": "ConfirmDialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ConfirmDialog/ConfirmDialog.tsx",
            "name": "ConfirmDialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/ContextMenu/ContextMenu.tsx",
    "description": "",
    "displayName": "ContextMenu",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Child element to trigger the context menu.",
        "name": "children",
        "parent": {
          "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
          "name": "ContextMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
            "name": "ContextMenuProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "Content to show in the context menu.",
        "name": "content",
        "parent": {
          "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
          "name": "ContextMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
            "name": "ContextMenuProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the context menu is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
          "name": "ContextMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
            "name": "ContextMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "autofocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the context menu should autofocus on open.",
        "name": "autofocus",
        "parent": {
          "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
          "name": "ContextMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
            "name": "ContextMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "autoClose": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the context menu should close on click.",
        "name": "autoClose",
        "parent": {
          "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
          "name": "ContextMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
            "name": "ContextMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "triggerClassName": {
        "defaultValue": null,
        "description": "Class name to apply to the trigger element.",
        "name": "triggerClassName",
        "parent": {
          "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
          "name": "ContextMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
            "name": "ContextMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "triggerOpenClassName": {
        "defaultValue": null,
        "description": "Class name to apply to the trigger when the context menu is open.",
        "name": "triggerOpenClassName",
        "parent": {
          "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
          "name": "ContextMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
            "name": "ContextMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Context Menu.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
          "name": "ContextMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/ContextMenu/ContextMenu.tsx",
            "name": "ContextMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ContextMenuTheme"
        }
      },
      "reference": {
        "defaultValue": null,
        "description": "Reference of the overlay to align to.",
        "name": "reference",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReferenceProp"
        }
      },
      "trigger": {
        "defaultValue": null,
        "description": "Type of trigger to open the overlay.",
        "name": "trigger",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TriggerTypes | TriggerTypes[]"
        }
      },
      "triggerElement": {
        "defaultValue": null,
        "description": "Trigger element to open the overlay.",
        "name": "triggerElement",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "Portal classname.",
        "name": "portalClassName",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeOnBodyClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close when the body is clicked or not.",
        "name": "closeOnBodyClick",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close when escape is pressed or not.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "appendToBody": {
        "defaultValue": null,
        "description": "Append the overlay to the body. Almost always want this.",
        "name": "appendToBody",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "elementType": {
        "defaultValue": null,
        "description": "Overlay element type.",
        "name": "elementType",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "modifiers": {
        "defaultValue": null,
        "description": "Position modifiers.",
        "name": "modifiers",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Modifiers"
        }
      },
      "followCursor": {
        "defaultValue": null,
        "description": "Overlay should follow cursor or not.",
        "name": "followCursor",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placement": {
        "defaultValue": null,
        "description": "Placement of the overlay.",
        "name": "placement",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "Event called when the overlay is opened.",
        "name": "onOpen",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event?: any) => void"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Event called when the overlay is closed.",
        "name": "onClose",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event?: any) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Dialog/Dialog.tsx",
    "description": "",
    "displayName": "Dialog",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "The CSS class name for the root element of the component.",
        "name": "className",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "innerClassName": {
        "defaultValue": null,
        "description": "The CSS class name for the inner content element of the component.",
        "name": "innerClassName",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "The CSS class name for the content of the component.",
        "name": "contentClassName",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "50%"
        },
        "description": "The size of the dialog. Can be a string or a number.",
        "name": "size",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "showCloseButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to show the close button in the dialog header.",
        "name": "showCloseButton",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The content of the dialog.",
        "name": "children",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "disablePadding": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether to disable padding for the dialog content.",
        "name": "disablePadding",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "footer": {
        "defaultValue": null,
        "description": "The footer of the dialog.",
        "name": "footer",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "header": {
        "defaultValue": null,
        "description": "The header of the dialog.",
        "name": "header",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "headerElement": {
        "defaultValue": {
          "value": "<DialogHeader />"
        },
        "description": "The React element for the dialog header.",
        "name": "headerElement",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<DialogHeaderProps, FC<DialogHeaderProps>>"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Dialog.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogTheme"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "If true, the global overlay is open.",
        "name": "open",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnBackdropClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the global overlay will close when the backdrop is clicked.",
        "name": "closeOnBackdropClick",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hasBackdrop": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the global overlay will have a backdrop.",
        "name": "hasBackdrop",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "backdropClassName": {
        "defaultValue": null,
        "description": "The CSS class name to be applied to the backdrop of the global overlay.",
        "name": "backdropClassName",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the global overlay will close when the escape key is pressed.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "A function that is called when the global overlay is closed.",
        "name": "onClose",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Dialog/DialogHeader.tsx",
    "description": "",
    "displayName": "DialogHeader",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content of the dialog header.",
        "name": "children",
        "parent": {
          "fileName": "src/layers/Dialog/DialogHeader.tsx",
          "name": "DialogHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/DialogHeader.tsx",
            "name": "DialogHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The CSS class name for the root element of the component.",
        "name": "className",
        "parent": {
          "fileName": "src/layers/Dialog/DialogHeader.tsx",
          "name": "DialogHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/DialogHeader.tsx",
            "name": "DialogHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showCloseButton": {
        "defaultValue": null,
        "description": "Whether to show the close button in the dialog header.",
        "name": "showCloseButton",
        "parent": {
          "fileName": "src/layers/Dialog/DialogHeader.tsx",
          "name": "DialogHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/DialogHeader.tsx",
            "name": "DialogHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disablePadding": {
        "defaultValue": null,
        "description": "Whether to disable padding for the dialog header.",
        "name": "disablePadding",
        "parent": {
          "fileName": "src/layers/Dialog/DialogHeader.tsx",
          "name": "DialogHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/DialogHeader.tsx",
            "name": "DialogHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Callback when the close button is clicked.",
        "name": "onClose",
        "parent": {
          "fileName": "src/layers/Dialog/DialogHeader.tsx",
          "name": "DialogHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/DialogHeader.tsx",
            "name": "DialogHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Dialog Header.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Dialog/DialogHeader.tsx",
          "name": "DialogHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Dialog/DialogHeader.tsx",
            "name": "DialogHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Dialog/useDialog.tsx",
    "description": "",
    "displayName": "useDialog",
    "methods": [],
    "props": {
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "declarations": [
          {
            "fileName": "src/layers/Dialog/useDialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "",
        "name": "onClose",
        "declarations": [
          {
            "fileName": "src/layers/Dialog/useDialog.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Drawer/Drawer.tsx",
    "description": "",
    "displayName": "Drawer",
    "methods": [],
    "props": {
      "position": {
        "defaultValue": {
          "value": "end"
        },
        "description": "Position of the drawer.",
        "name": "position",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"top\" | \"bottom\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "80%"
        },
        "description": "Size of the drawer.",
        "name": "size",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS class name for the drawer.",
        "name": "className",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "CSS class name for the content of the drawer.",
        "name": "contentClassName",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "backdropClassName": {
        "defaultValue": null,
        "description": "CSS class name for the backdrop of the drawer.",
        "name": "backdropClassName",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disablePadding": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the drawer has a backdrop.",
        "name": "disablePadding",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "header": {
        "defaultValue": null,
        "description": "Whether the drawer has a backdrop.",
        "name": "header",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "showCloseButton": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether the drawer has a backdrop.",
        "name": "showCloseButton",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The content of the drawer.",
        "name": "children",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "headerElement": {
        "defaultValue": {
          "value": "<DrawerHeader />"
        },
        "description": "The React element for the drawer header.",
        "name": "headerElement",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<DrawerHeaderProps, FC<DrawerHeaderProps>>"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Drawer.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Drawer/Drawer.tsx",
          "name": "DrawerProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/Drawer.tsx",
            "name": "DrawerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DrawerTheme"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "If true, the global overlay is open.",
        "name": "open",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnBackdropClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the global overlay will close when the backdrop is clicked.",
        "name": "closeOnBackdropClick",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hasBackdrop": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the global overlay will have a backdrop.",
        "name": "hasBackdrop",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the global overlay will close when the escape key is pressed.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "A function that is called when the global overlay is closed.",
        "name": "onClose",
        "parent": {
          "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Drawer/DrawerHeader.tsx",
    "description": "",
    "displayName": "DrawerHeader",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content of the drawer header.",
        "name": "children",
        "parent": {
          "fileName": "src/layers/Drawer/DrawerHeader.tsx",
          "name": "DrawerHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/DrawerHeader.tsx",
            "name": "DrawerHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The CSS class name for the root element of the component.",
        "name": "className",
        "parent": {
          "fileName": "src/layers/Drawer/DrawerHeader.tsx",
          "name": "DrawerHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/DrawerHeader.tsx",
            "name": "DrawerHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showCloseButton": {
        "defaultValue": null,
        "description": "Whether to show the close button in the drawer header.",
        "name": "showCloseButton",
        "parent": {
          "fileName": "src/layers/Drawer/DrawerHeader.tsx",
          "name": "DrawerHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/DrawerHeader.tsx",
            "name": "DrawerHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Callback when the close button is clicked.",
        "name": "onClose",
        "parent": {
          "fileName": "src/layers/Drawer/DrawerHeader.tsx",
          "name": "DrawerHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/DrawerHeader.tsx",
            "name": "DrawerHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Drawer Header.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Drawer/DrawerHeader.tsx",
          "name": "DrawerHeaderProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Drawer/DrawerHeader.tsx",
            "name": "DrawerHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DrawerTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Drawer/useDrawer.tsx",
    "description": "",
    "displayName": "useDrawer",
    "methods": [],
    "props": {
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "declarations": [
          {
            "fileName": "src/layers/Drawer/useDrawer.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "",
        "name": "onClose",
        "declarations": [
          {
            "fileName": "src/layers/Drawer/useDrawer.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Menu/Menu.tsx",
    "description": "",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "appendToBody": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Whether to append the menu to the body or not.",
        "name": "appendToBody",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "autofocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Autofocus the menu on open or not.",
        "name": "autofocus",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The menu contents.",
        "name": "children",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS class applied to menu element.",
        "name": "className",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeOnBodyClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close the menu on click or not.",
        "name": "closeOnBodyClick",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close the menu on escape.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "bottom-start"
        },
        "description": "floating-ui placement type.",
        "name": "placement",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "reference": {
        "defaultValue": null,
        "description": "Reference element for the menu position.",
        "name": "reference",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS Properties for the menu.",
        "name": "style",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "open": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether to show the menu or not.",
        "name": "open",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "maxHeight": {
        "defaultValue": {
          "value": "max-height: calc(100vh - 48px)"
        },
        "description": "Max height of the menu.",
        "name": "maxHeight",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "modifiers": {
        "defaultValue": null,
        "description": "floating-ui Position modifiers.",
        "name": "modifiers",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Modifiers"
        }
      },
      "autoWidth": {
        "defaultValue": null,
        "description": "Whether the menu should be the same width as the reference element",
        "name": "autoWidth",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "minWidth": {
        "defaultValue": null,
        "description": "Min width of the menu.",
        "name": "minWidth",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "Max width of the menu.",
        "name": "maxWidth",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Menu was closed.",
        "name": "onClose",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: OverlayEvent) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Mouse enter event.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Mouse leave event.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Menu.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "MenuTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the menu element.",
        "name": "ref",
        "parent": {
          "fileName": "src/layers/Menu/Menu.tsx",
          "name": "MenuRef"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/Menu.tsx",
            "name": "MenuRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Menu/NestedMenu.tsx",
    "description": "",
    "displayName": "NestedMenu",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Menu contents.",
        "name": "children",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "Label element for the menu item.",
        "name": "label",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "right-start"
        },
        "description": "floating-ui placement type.",
        "name": "placement",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS class applied to label element.",
        "name": "className",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "CSS Properties for the label element.",
        "name": "style",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "menuClassName": {
        "defaultValue": null,
        "description": "CSS class applied to label element.",
        "name": "menuClassName",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activeClassName": {
        "defaultValue": null,
        "description": "CSS class applied to label element when active.",
        "name": "activeClassName",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "menuStyle": {
        "defaultValue": null,
        "description": "CSS Properties for the label element.",
        "name": "menuStyle",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "enterDelay": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Delay before showing tooltip.",
        "name": "enterDelay",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "leaveDelay": {
        "defaultValue": {
          "value": "100"
        },
        "description": "Delay before closing tooltip.",
        "name": "leaveDelay",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "closeOnBodyClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close the menu on click or not.",
        "name": "closeOnBodyClick",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close the menu on escape.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "maxHeight": {
        "defaultValue": null,
        "description": "Max height of the menu.",
        "name": "maxHeight",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autofocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Autofocus the menu on open or not.",
        "name": "autofocus",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Nested Menu was closed.",
        "name": "onClose",
        "parent": {
          "fileName": "src/layers/Menu/NestedMenu.tsx",
          "name": "NestedMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Menu/NestedMenu.tsx",
            "name": "NestedMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: OverlayEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Menu/useMenu.tsx",
    "description": "",
    "displayName": "useMenu",
    "methods": [],
    "props": {
      "open": {
        "defaultValue": null,
        "description": "",
        "name": "open",
        "declarations": [
          {
            "fileName": "src/layers/Menu/useMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "",
        "name": "onClose",
        "declarations": [
          {
            "fileName": "src/layers/Menu/useMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Notification/Notification.tsx",
    "description": "",
    "displayName": "Notification",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Unique identifier for the notification.",
        "name": "id",
        "parent": {
          "fileName": "src/layers/Notification/Notification.tsx",
          "name": "NotificationProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notification.tsx",
            "name": "NotificationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Component to render as the notification.",
        "name": "component",
        "parent": {
          "fileName": "src/layers/Notification/Notification.tsx",
          "name": "NotificationProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notification.tsx",
            "name": "NotificationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Callback to close the notification.",
        "name": "onClose",
        "parent": {
          "fileName": "src/layers/Notification/Notification.tsx",
          "name": "NotificationProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notification.tsx",
            "name": "NotificationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(id: number) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Notification.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Notification/Notification.tsx",
          "name": "NotificationProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notification.tsx",
            "name": "NotificationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "NotificationTheme"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string | Element | Element[]"
        }
      },
      "body": {
        "defaultValue": null,
        "description": "",
        "name": "body",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string | Element | Element[]"
        }
      },
      "timeout": {
        "defaultValue": null,
        "description": "",
        "name": "timeout",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showClose": {
        "defaultValue": null,
        "description": "",
        "name": "showClose",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "NotificationVariants"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string | Element | Element[]"
        }
      },
      "action": {
        "defaultValue": null,
        "description": "",
        "name": "action",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string | Element | Element[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Notification/Notifications.tsx",
    "description": "",
    "displayName": "Notifications",
    "methods": [],
    "props": {
      "limit": {
        "defaultValue": {
          "value": "10"
        },
        "description": "",
        "name": "limit",
        "parent": {
          "fileName": "src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "timeout": {
        "defaultValue": {
          "value": "4000"
        },
        "description": "",
        "name": "timeout",
        "parent": {
          "fileName": "src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showClose": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "showClose",
        "parent": {
          "fileName": "src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "preventFlooding": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "preventFlooding",
        "parent": {
          "fileName": "src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "components": {
        "defaultValue": null,
        "description": "",
        "name": "components",
        "parent": {
          "fileName": "src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "{ default?: JSXElementConstructor<NotificationComponentProps>; success?: JSXElementConstructor<NotificationComponentProps>; warning?: JSXElementConstructor<...>; error?: JSXElementConstructor<...>; info?: JSXElementConstructor<...>; }"
        }
      },
      "icons": {
        "defaultValue": {
          "value": "{\n    default: <InfoIcon />,\n    success: <CheckCircleIcon />,\n    warning: <WarningIcon />,\n    error: <ErrorCircleIcon />,\n    info: <InfoIcon />\n  }"
        },
        "description": "",
        "name": "icons",
        "parent": {
          "fileName": "src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "{ default?: string | Element | Element[]; success?: string | Element | Element[]; warning?: string | Element | Element[]; error?: string | ... 1 more ... | Element[]; info?: string | ... 1 more ... | Element[]; }"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "NotificationTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Notification/index.tsx",
    "description": "",
    "displayName": "Notifications",
    "methods": [],
    "props": {
      "limit": {
        "defaultValue": {
          "value": "10"
        },
        "description": "",
        "name": "limit",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "timeout": {
        "defaultValue": {
          "value": "4000"
        },
        "description": "",
        "name": "timeout",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showClose": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "showClose",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "preventFlooding": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "preventFlooding",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "components": {
        "defaultValue": null,
        "description": "",
        "name": "components",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "{ default?: JSXElementConstructor<NotificationComponentProps>; success?: JSXElementConstructor<NotificationComponentProps>; warning?: JSXElementConstructor<...>; error?: JSXElementConstructor<...>; info?: JSXElementConstructor<...>; }"
        }
      },
      "icons": {
        "defaultValue": {
          "value": "{\n    default: <InfoIcon />,\n    success: <CheckCircleIcon />,\n    warning: <WarningIcon />,\n    error: <ErrorCircleIcon />,\n    info: <InfoIcon />\n  }"
        },
        "description": "",
        "name": "icons",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "{ default?: string | Element | Element[]; success?: string | Element | Element[]; warning?: string | Element | Element[]; error?: string | ... 1 more ... | Element[]; info?: string | ... 1 more ... | Element[]; }"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
          "name": "NotificationsProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notifications.tsx",
            "name": "NotificationsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "NotificationTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Notification/index.tsx",
    "description": "",
    "displayName": "Notification",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Unique identifier for the notification.",
        "name": "id",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notification.tsx",
          "name": "NotificationProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notification.tsx",
            "name": "NotificationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "Component to render as the notification.",
        "name": "component",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notification.tsx",
          "name": "NotificationProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notification.tsx",
            "name": "NotificationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Callback to close the notification.",
        "name": "onClose",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notification.tsx",
          "name": "NotificationProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notification.tsx",
            "name": "NotificationProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(id: number) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Notification.",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/Notification.tsx",
          "name": "NotificationProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/Notification.tsx",
            "name": "NotificationProps"
          }
        ],
        "required": false,
        "type": {
          "name": "NotificationTheme"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string | Element | Element[]"
        }
      },
      "body": {
        "defaultValue": null,
        "description": "",
        "name": "body",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string | Element | Element[]"
        }
      },
      "timeout": {
        "defaultValue": null,
        "description": "",
        "name": "timeout",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showClose": {
        "defaultValue": null,
        "description": "",
        "name": "showClose",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "variant": {
        "defaultValue": null,
        "description": "",
        "name": "variant",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "NotificationVariants"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "",
        "name": "icon",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string | Element | Element[]"
        }
      },
      "action": {
        "defaultValue": null,
        "description": "",
        "name": "action",
        "parent": {
          "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
          "name": "NotificationOptions"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Notification/NotificationsContext.tsx",
            "name": "NotificationOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "string | Element | Element[]"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Popover/Popover.tsx",
    "description": "",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "disablePadding": {
        "defaultValue": null,
        "description": "Disable default padding on popover.",
        "name": "disablePadding",
        "parent": {
          "fileName": "src/layers/Popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "popoverStyle": {
        "defaultValue": null,
        "description": "Popover css styles.",
        "name": "popoverStyle",
        "parent": {
          "fileName": "src/layers/Popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StyleHTMLAttributes<any>"
        }
      },
      "popoverClassName": {
        "defaultValue": null,
        "description": "Popover classname.",
        "name": "popoverClassName",
        "parent": {
          "fileName": "src/layers/Popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Popover.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "PopoverTheme"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "Popover has a focus trap that by default focuses the first element in the tab order.\nWith this option you can specify a different element to receive that initial focus, or use false for no initially focused element.",
        "name": "autoFocus",
        "parent": {
          "fileName": "src/layers/Popover/Popover.tsx",
          "name": "PopoverProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Popover/Popover.tsx",
            "name": "PopoverProps"
          }
        ],
        "required": false,
        "type": {
          "name": "FocusTargetOrFalse | (() => void)"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Content to wrap.",
        "name": "children",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "closeOnClick": {
        "defaultValue": null,
        "description": "Close on any click.",
        "name": "closeOnClick",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnBodyClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close when the body is clicked.",
        "name": "closeOnBodyClick",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close when escape key is triggered.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "Content for the tooltip.",
        "name": "content",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "reference": {
        "defaultValue": null,
        "description": "Reference of the tooltip to align to.",
        "name": "reference",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "placement": {
        "defaultValue": null,
        "description": "floating-ui placement.",
        "name": "placement",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "enterDelay": {
        "defaultValue": null,
        "description": "Delay before showing tooltip.",
        "name": "enterDelay",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "leaveDelay": {
        "defaultValue": {
          "value": "200"
        },
        "description": "Delay before closing tooltip.",
        "name": "leaveDelay",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "modifiers": {
        "defaultValue": null,
        "description": "floating-ui modifiers.",
        "name": "modifiers",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Modifiers"
        }
      },
      "visible": {
        "defaultValue": null,
        "description": "External setter for visibility.",
        "name": "visible",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classnames.",
        "name": "className",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "triggerClassName": {
        "defaultValue": null,
        "description": "CSS Classname for the tooltip container ( ie. the thing that the tooltip is bound to ).",
        "name": "triggerClassName",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "trigger": {
        "defaultValue": {
          "value": "click"
        },
        "description": "How the tooltip will be triggered.",
        "name": "trigger",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TriggerTypes | TriggerTypes[]"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the tooltip is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "followCursor": {
        "defaultValue": null,
        "description": "Whether the tooltip should move with the cursor or not.",
        "name": "followCursor",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "pointerEvents": {
        "defaultValue": null,
        "description": "Add pointer events or not. Usually not for tooltips.",
        "name": "pointerEvents",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "isPopover": {
        "defaultValue": null,
        "description": "Differentiator for popovers to be handled separate from tooltips",
        "name": "isPopover",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "Tooltip was opened.",
        "name": "onOpen",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Tooltip was closed.",
        "name": "onClose",
        "parent": {
          "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layers/Tooltip/Tooltip.tsx",
    "description": "",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "Content to wrap.",
        "name": "children",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "closeOnClick": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Close on any click.",
        "name": "closeOnClick",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnBodyClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close when the body is clicked.",
        "name": "closeOnBodyClick",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "Close when escape key is triggered.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "Content for the tooltip.",
        "name": "content",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "reference": {
        "defaultValue": null,
        "description": "Reference of the tooltip to align to.",
        "name": "reference",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "top"
        },
        "description": "floating-ui placement.",
        "name": "placement",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "enterDelay": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Delay before showing tooltip.",
        "name": "enterDelay",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "leaveDelay": {
        "defaultValue": {
          "value": "200"
        },
        "description": "Delay before closing tooltip.",
        "name": "leaveDelay",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "modifiers": {
        "defaultValue": null,
        "description": "floating-ui modifiers.",
        "name": "modifiers",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Modifiers"
        }
      },
      "visible": {
        "defaultValue": {
          "value": "false"
        },
        "description": "External setter for visibility.",
        "name": "visible",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional CSS classnames.",
        "name": "className",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "triggerClassName": {
        "defaultValue": null,
        "description": "CSS Classname for the tooltip container ( ie. the thing that the tooltip is bound to ).",
        "name": "triggerClassName",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "trigger": {
        "defaultValue": {
          "value": "hover"
        },
        "description": "How the tooltip will be triggered.",
        "name": "trigger",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TriggerTypes | TriggerTypes[]"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the tooltip is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "followCursor": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether the tooltip should move with the cursor or not.",
        "name": "followCursor",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "pointerEvents": {
        "defaultValue": {
          "value": "none"
        },
        "description": "Add pointer events or not. Usually not for tooltips.",
        "name": "pointerEvents",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "isPopover": {
        "defaultValue": null,
        "description": "Differentiator for popovers to be handled separate from tooltips",
        "name": "isPopover",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "Tooltip was opened.",
        "name": "onOpen",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Tooltip was closed.",
        "name": "onClose",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the tooltip.",
        "name": "theme",
        "parent": {
          "fileName": "src/layers/Tooltip/Tooltip.tsx",
          "name": "TooltipProps"
        },
        "declarations": [
          {
            "fileName": "src/layers/Tooltip/Tooltip.tsx",
            "name": "TooltipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TooltipTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Block/Block.tsx",
    "description": "",
    "displayName": "Block",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Label to display on the block.",
        "name": "label",
        "parent": {
          "fileName": "src/layout/Block/Block.tsx",
          "name": "BlockProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Block/Block.tsx",
            "name": "BlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "disableMargin": {
        "defaultValue": null,
        "description": "Disable block bottom margin.",
        "name": "disableMargin",
        "parent": {
          "fileName": "src/layout/Block/Block.tsx",
          "name": "BlockProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Block/Block.tsx",
            "name": "BlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "Whether to show the required * or not.",
        "name": "required",
        "parent": {
          "fileName": "src/layout/Block/Block.tsx",
          "name": "BlockProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Block/Block.tsx",
            "name": "BlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Children to render.",
        "name": "children",
        "parent": {
          "fileName": "src/layout/Block/Block.tsx",
          "name": "BlockProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Block/Block.tsx",
            "name": "BlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Additional classname to apply to the label.",
        "name": "labelClassName",
        "parent": {
          "fileName": "src/layout/Block/Block.tsx",
          "name": "BlockProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Block/Block.tsx",
            "name": "BlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classname to apply to the block.",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Block/Block.tsx",
          "name": "BlockProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Block/Block.tsx",
            "name": "BlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "direction": {
        "defaultValue": {
          "value": "vertical"
        },
        "description": "Direction of the block.",
        "name": "direction",
        "parent": {
          "fileName": "src/layout/Block/Block.tsx",
          "name": "BlockProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Block/Block.tsx",
            "name": "BlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"vertical\" | \"horizontal\""
        }
      },
      "alignment": {
        "defaultValue": {
          "value": "start"
        },
        "description": "Alignment of the label.",
        "name": "alignment",
        "parent": {
          "fileName": "src/layout/Block/Block.tsx",
          "name": "BlockProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Block/Block.tsx",
            "name": "BlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"center\" | \"end\""
        }
      },
      "onTitleClick": {
        "defaultValue": null,
        "description": "Event when the label is clicked.",
        "name": "onTitleClick",
        "parent": {
          "fileName": "src/layout/Block/Block.tsx",
          "name": "BlockProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Block/Block.tsx",
            "name": "BlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<HTMLLabelElement, MouseEvent>) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Block.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Block/Block.tsx",
          "name": "BlockProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Block/Block.tsx",
            "name": "BlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BlockTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Breadcrumbs/BreadcrumbItem.tsx",
    "description": "",
    "displayName": "BreadcrumbItem",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "src/layout/Breadcrumbs/BreadcrumbLink.tsx",
    "description": "",
    "displayName": "BreadcrumbLink",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Breadcrumbs/BreadcrumbLink.tsx",
          "name": "BreadcrumbLinkProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Breadcrumbs/BreadcrumbLink.tsx",
            "name": "BreadcrumbLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BreadcrumbsTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Breadcrumbs/BreadcrumbList.tsx",
    "description": "",
    "displayName": "BreadcrumbList",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Breadcrumbs/BreadcrumbList.tsx",
          "name": "BreadcrumbListProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Breadcrumbs/BreadcrumbList.tsx",
            "name": "BreadcrumbListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BreadcrumbsTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Breadcrumbs/BreadcrumbPage.tsx",
    "description": "",
    "displayName": "BreadcrumbPage",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Breadcrumbs/BreadcrumbPage.tsx",
          "name": "BreadcrumbPageProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Breadcrumbs/BreadcrumbPage.tsx",
            "name": "BreadcrumbPageProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BreadcrumbsTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Breadcrumbs/BreadcrumbSeparator.tsx",
    "description": "",
    "displayName": "BreadcrumbSeparator",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Breadcrumbs/BreadcrumbSeparator.tsx",
          "name": "BreadcrumbSeparatorProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Breadcrumbs/BreadcrumbSeparator.tsx",
            "name": "BreadcrumbSeparatorProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BreadcrumbsTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Breadcrumbs/Breadcrumbs.tsx",
    "description": "",
    "displayName": "Breadcrumbs",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Breadcrumbs/Breadcrumbs.tsx",
          "name": "BreadcrumbsProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Breadcrumbs/Breadcrumbs.tsx",
            "name": "BreadcrumbsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "BreadcrumbsTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Card/Card.tsx",
    "description": "",
    "displayName": "Card",
    "methods": [],
    "props": {
      "disablePadding": {
        "defaultValue": null,
        "description": "Disable the padding of the card.",
        "name": "disablePadding",
        "parent": {
          "fileName": "src/layout/Card/Card.tsx",
          "name": "CardProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Card/Card.tsx",
            "name": "CardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional classname to apply to the card.",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Card/Card.tsx",
          "name": "CardProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Card/Card.tsx",
            "name": "CardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "headerClassName": {
        "defaultValue": null,
        "description": "Header classname to apply.",
        "name": "headerClassName",
        "parent": {
          "fileName": "src/layout/Card/Card.tsx",
          "name": "CardProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Card/Card.tsx",
            "name": "CardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "Content classname to apply.",
        "name": "contentClassName",
        "parent": {
          "fileName": "src/layout/Card/Card.tsx",
          "name": "CardProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Card/Card.tsx",
            "name": "CardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional style attributes. Recommend to use css classes over this.",
        "name": "style",
        "parent": {
          "fileName": "src/layout/Card/Card.tsx",
          "name": "CardProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Card/Card.tsx",
            "name": "CardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "header": {
        "defaultValue": null,
        "description": "Header element or text to show.",
        "name": "header",
        "parent": {
          "fileName": "src/layout/Card/Card.tsx",
          "name": "CardProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Card/Card.tsx",
            "name": "CardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | Element | Element[]"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Card.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Card/Card.tsx",
          "name": "CardProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Card/Card.tsx",
            "name": "CardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CardTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "src/layout/Card/Card.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Collapse/Collapse.tsx",
    "description": "",
    "displayName": "Collapse",
    "methods": [],
    "props": {
      "expanded": {
        "defaultValue": null,
        "description": "Whether the collapse is expanded or not.",
        "name": "expanded",
        "parent": {
          "fileName": "src/layout/Collapse/Collapse.tsx",
          "name": "CollapseProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Collapse/Collapse.tsx",
            "name": "CollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Children to render.",
        "name": "children",
        "parent": {
          "fileName": "src/layout/Collapse/Collapse.tsx",
          "name": "CollapseProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Collapse/Collapse.tsx",
            "name": "CollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode | (() => ReactNode)"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Collapse.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Collapse/Collapse.tsx",
          "name": "CollapseProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Collapse/Collapse.tsx",
            "name": "CollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CollapseTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Divider/Divider.tsx",
    "description": "",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Classname to apply to the divider.",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Divider/Divider.tsx",
          "name": "DividerProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Divider/Divider.tsx",
            "name": "DividerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disableMargins": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Disable the margins of the divider.\nThe default margin is: `--spacings-md`.",
        "name": "disableMargins",
        "parent": {
          "fileName": "src/layout/Divider/Divider.tsx",
          "name": "DividerProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Divider/Divider.tsx",
            "name": "DividerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "orientation": {
        "defaultValue": {
          "value": "horizontal"
        },
        "description": "Orientation of the divider.",
        "name": "orientation",
        "parent": {
          "fileName": "src/layout/Divider/Divider.tsx",
          "name": "DividerProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Divider/Divider.tsx",
            "name": "DividerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional style attributes. Recommend to use css classes over this.",
        "name": "style",
        "parent": {
          "fileName": "src/layout/Divider/Divider.tsx",
          "name": "DividerProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Divider/Divider.tsx",
            "name": "DividerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Divider.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Divider/Divider.tsx",
          "name": "DividerProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Divider/Divider.tsx",
            "name": "DividerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DividerTheme"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "primary"
        },
        "description": "Variant of the divider.",
        "name": "variant",
        "parent": {
          "fileName": "src/layout/Divider/Divider.tsx",
          "name": "DividerProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Divider/Divider.tsx",
            "name": "DividerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\""
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/List/List.tsx",
    "description": "",
    "displayName": "List",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "Theme for the List.",
        "name": "theme",
        "declarations": [
          {
            "fileName": "src/layout/List/List.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ListTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the list element.",
        "name": "ref",
        "parent": {
          "fileName": "src/layout/List/List.tsx",
          "name": "ListRef"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/List.tsx",
            "name": "ListRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Motion/MotionGroup.tsx",
    "description": "",
    "displayName": "MotionGroup",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content of group.",
        "name": "children",
        "parent": {
          "fileName": "src/layout/Motion/MotionGroup.tsx",
          "name": "MotionGroupProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Motion/MotionGroup.tsx",
            "name": "MotionGroupProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "required": false,
        "type": {
          "name": "Key"
        }
      },
      "defaultChecked": {
        "defaultValue": null,
        "description": "",
        "name": "defaultChecked",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | number | readonly string[]"
        }
      },
      "suppressContentEditableWarning": {
        "defaultValue": null,
        "description": "",
        "name": "suppressContentEditableWarning",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "suppressHydrationWarning": {
        "defaultValue": null,
        "description": "",
        "name": "suppressHydrationWarning",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "accessKey": {
        "defaultValue": null,
        "description": "",
        "name": "accessKey",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "",
        "name": "autoFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "contentEditable": {
        "defaultValue": null,
        "description": "",
        "name": "contentEditable",
        "required": false,
        "type": {
          "name": "\"inherit\" | Booleanish | \"plaintext-only\""
        }
      },
      "contextMenu": {
        "defaultValue": null,
        "description": "",
        "name": "contextMenu",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "dir": {
        "defaultValue": null,
        "description": "",
        "name": "dir",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "draggable": {
        "defaultValue": null,
        "description": "",
        "name": "draggable",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "",
        "name": "hidden",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "lang": {
        "defaultValue": null,
        "description": "",
        "name": "lang",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nonce": {
        "defaultValue": null,
        "description": "",
        "name": "nonce",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "slot": {
        "defaultValue": null,
        "description": "",
        "name": "slot",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "spellCheck": {
        "defaultValue": null,
        "description": "",
        "name": "spellCheck",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "tabIndex": {
        "defaultValue": null,
        "description": "",
        "name": "tabIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "translate": {
        "defaultValue": null,
        "description": "",
        "name": "translate",
        "required": false,
        "type": {
          "name": "\"yes\" | \"no\""
        }
      },
      "radioGroup": {
        "defaultValue": null,
        "description": "",
        "name": "radioGroup",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "",
        "name": "role",
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "about": {
        "defaultValue": null,
        "description": "",
        "name": "about",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "",
        "name": "content",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "datatype": {
        "defaultValue": null,
        "description": "",
        "name": "datatype",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inlist": {
        "defaultValue": null,
        "description": "",
        "name": "inlist",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "prefix": {
        "defaultValue": null,
        "description": "",
        "name": "prefix",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "property": {
        "defaultValue": null,
        "description": "",
        "name": "property",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rel": {
        "defaultValue": null,
        "description": "",
        "name": "rel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "resource": {
        "defaultValue": null,
        "description": "",
        "name": "resource",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rev": {
        "defaultValue": null,
        "description": "",
        "name": "rev",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "typeof": {
        "defaultValue": null,
        "description": "",
        "name": "typeof",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "vocab": {
        "defaultValue": null,
        "description": "",
        "name": "vocab",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoCapitalize": {
        "defaultValue": null,
        "description": "",
        "name": "autoCapitalize",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoCorrect": {
        "defaultValue": null,
        "description": "",
        "name": "autoCorrect",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoSave": {
        "defaultValue": null,
        "description": "",
        "name": "autoSave",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "itemProp": {
        "defaultValue": null,
        "description": "",
        "name": "itemProp",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "itemScope": {
        "defaultValue": null,
        "description": "",
        "name": "itemScope",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "itemType": {
        "defaultValue": null,
        "description": "",
        "name": "itemType",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "itemID": {
        "defaultValue": null,
        "description": "",
        "name": "itemID",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "itemRef": {
        "defaultValue": null,
        "description": "",
        "name": "itemRef",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "results": {
        "defaultValue": null,
        "description": "",
        "name": "results",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "security": {
        "defaultValue": null,
        "description": "",
        "name": "security",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "unselectable": {
        "defaultValue": null,
        "description": "",
        "name": "unselectable",
        "required": false,
        "type": {
          "name": "\"on\" | \"off\""
        }
      },
      "inputMode": {
        "defaultValue": null,
        "description": "",
        "name": "inputMode",
        "required": false,
        "type": {
          "name": "\"none\" | \"search\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\""
        }
      },
      "is": {
        "defaultValue": null,
        "description": "",
        "name": "is",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-activedescendant": {
        "defaultValue": null,
        "description": "",
        "name": "aria-activedescendant",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-atomic": {
        "defaultValue": null,
        "description": "",
        "name": "aria-atomic",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-autocomplete": {
        "defaultValue": null,
        "description": "",
        "name": "aria-autocomplete",
        "required": false,
        "type": {
          "name": "\"list\" | \"none\" | \"inline\" | \"both\""
        }
      },
      "aria-braillelabel": {
        "defaultValue": null,
        "description": "",
        "name": "aria-braillelabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-brailleroledescription": {
        "defaultValue": null,
        "description": "",
        "name": "aria-brailleroledescription",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-busy": {
        "defaultValue": null,
        "description": "",
        "name": "aria-busy",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-checked": {
        "defaultValue": null,
        "description": "",
        "name": "aria-checked",
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"mixed\""
        }
      },
      "aria-colcount": {
        "defaultValue": null,
        "description": "",
        "name": "aria-colcount",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-colindex": {
        "defaultValue": null,
        "description": "",
        "name": "aria-colindex",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-colindextext": {
        "defaultValue": null,
        "description": "",
        "name": "aria-colindextext",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-colspan": {
        "defaultValue": null,
        "description": "",
        "name": "aria-colspan",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-controls": {
        "defaultValue": null,
        "description": "",
        "name": "aria-controls",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-current": {
        "defaultValue": null,
        "description": "",
        "name": "aria-current",
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\""
        }
      },
      "aria-describedby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-describedby",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-description": {
        "defaultValue": null,
        "description": "",
        "name": "aria-description",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-details": {
        "defaultValue": null,
        "description": "",
        "name": "aria-details",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-disabled": {
        "defaultValue": null,
        "description": "",
        "name": "aria-disabled",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-dropeffect": {
        "defaultValue": null,
        "description": "",
        "name": "aria-dropeffect",
        "required": false,
        "type": {
          "name": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
        }
      },
      "aria-errormessage": {
        "defaultValue": null,
        "description": "",
        "name": "aria-errormessage",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-expanded": {
        "defaultValue": null,
        "description": "",
        "name": "aria-expanded",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-flowto": {
        "defaultValue": null,
        "description": "",
        "name": "aria-flowto",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-grabbed": {
        "defaultValue": null,
        "description": "",
        "name": "aria-grabbed",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-haspopup": {
        "defaultValue": null,
        "description": "",
        "name": "aria-haspopup",
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"dialog\" | \"grid\" | \"listbox\" | \"menu\" | \"tree\""
        }
      },
      "aria-hidden": {
        "defaultValue": null,
        "description": "",
        "name": "aria-hidden",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-invalid": {
        "defaultValue": null,
        "description": "",
        "name": "aria-invalid",
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
        }
      },
      "aria-keyshortcuts": {
        "defaultValue": null,
        "description": "",
        "name": "aria-keyshortcuts",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-level": {
        "defaultValue": null,
        "description": "",
        "name": "aria-level",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-live": {
        "defaultValue": null,
        "description": "",
        "name": "aria-live",
        "required": false,
        "type": {
          "name": "\"off\" | \"assertive\" | \"polite\""
        }
      },
      "aria-modal": {
        "defaultValue": null,
        "description": "",
        "name": "aria-modal",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-multiline": {
        "defaultValue": null,
        "description": "",
        "name": "aria-multiline",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-multiselectable": {
        "defaultValue": null,
        "description": "",
        "name": "aria-multiselectable",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-orientation": {
        "defaultValue": null,
        "description": "",
        "name": "aria-orientation",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "aria-owns": {
        "defaultValue": null,
        "description": "",
        "name": "aria-owns",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-placeholder": {
        "defaultValue": null,
        "description": "",
        "name": "aria-placeholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-posinset": {
        "defaultValue": null,
        "description": "",
        "name": "aria-posinset",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-pressed": {
        "defaultValue": null,
        "description": "",
        "name": "aria-pressed",
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"mixed\""
        }
      },
      "aria-readonly": {
        "defaultValue": null,
        "description": "",
        "name": "aria-readonly",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-relevant": {
        "defaultValue": null,
        "description": "",
        "name": "aria-relevant",
        "required": false,
        "type": {
          "name": "\"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\""
        }
      },
      "aria-required": {
        "defaultValue": null,
        "description": "",
        "name": "aria-required",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-roledescription": {
        "defaultValue": null,
        "description": "",
        "name": "aria-roledescription",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-rowcount": {
        "defaultValue": null,
        "description": "",
        "name": "aria-rowcount",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-rowindex": {
        "defaultValue": null,
        "description": "",
        "name": "aria-rowindex",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-rowindextext": {
        "defaultValue": null,
        "description": "",
        "name": "aria-rowindextext",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-rowspan": {
        "defaultValue": null,
        "description": "",
        "name": "aria-rowspan",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-selected": {
        "defaultValue": null,
        "description": "",
        "name": "aria-selected",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-setsize": {
        "defaultValue": null,
        "description": "",
        "name": "aria-setsize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-sort": {
        "defaultValue": null,
        "description": "",
        "name": "aria-sort",
        "required": false,
        "type": {
          "name": "\"none\" | \"ascending\" | \"descending\" | \"other\""
        }
      },
      "aria-valuemax": {
        "defaultValue": null,
        "description": "",
        "name": "aria-valuemax",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-valuemin": {
        "defaultValue": null,
        "description": "",
        "name": "aria-valuemin",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-valuenow": {
        "defaultValue": null,
        "description": "",
        "name": "aria-valuenow",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-valuetext": {
        "defaultValue": null,
        "description": "",
        "name": "aria-valuetext",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "dangerouslySetInnerHTML": {
        "defaultValue": null,
        "description": "",
        "name": "dangerouslySetInnerHTML",
        "required": false,
        "type": {
          "name": "{ __html: string | TrustedHTML; }"
        }
      },
      "onCopy": {
        "defaultValue": null,
        "description": "",
        "name": "onCopy",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onCopyCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCopyCapture",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onCut": {
        "defaultValue": null,
        "description": "",
        "name": "onCut",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onCutCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCutCapture",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onPaste": {
        "defaultValue": null,
        "description": "",
        "name": "onPaste",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onPasteCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPasteCapture",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionEnd",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionEndCapture",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionStart": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionStart",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionStartCapture",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionUpdate": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionUpdate",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionUpdateCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionUpdateCapture",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "",
        "name": "onFocus",
        "required": false,
        "type": {
          "name": "FocusEventHandler<HTMLDivElement>"
        }
      },
      "onFocusCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onFocusCapture",
        "required": false,
        "type": {
          "name": "FocusEventHandler<HTMLDivElement>"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "",
        "name": "onBlur",
        "required": false,
        "type": {
          "name": "FocusEventHandler<HTMLDivElement>"
        }
      },
      "onBlurCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onBlurCapture",
        "required": false,
        "type": {
          "name": "FocusEventHandler<HTMLDivElement>"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onChangeCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onBeforeInput": {
        "defaultValue": null,
        "description": "",
        "name": "onBeforeInput",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onBeforeInputCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onBeforeInputCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onInput": {
        "defaultValue": null,
        "description": "",
        "name": "onInput",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onInputCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onInputCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onReset": {
        "defaultValue": null,
        "description": "",
        "name": "onReset",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onResetCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onResetCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onSubmit": {
        "defaultValue": null,
        "description": "",
        "name": "onSubmit",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onSubmitCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSubmitCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onInvalid": {
        "defaultValue": null,
        "description": "",
        "name": "onInvalid",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onInvalidCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onInvalidCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onLoad": {
        "defaultValue": null,
        "description": "",
        "name": "onLoad",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onError": {
        "defaultValue": null,
        "description": "",
        "name": "onError",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onErrorCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onErrorCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onKeyDown": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyDown",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onKeyDownCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyDownCapture",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onKeyPress": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyPress",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onKeyPressCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyPressCapture",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onKeyUp": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyUp",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onKeyUpCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyUpCapture",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onAbort": {
        "defaultValue": null,
        "description": "",
        "name": "onAbort",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onAbortCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAbortCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onCanPlay": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlay",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onCanPlayCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlayCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onCanPlayThrough": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlayThrough",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onCanPlayThroughCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlayThroughCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onDurationChange": {
        "defaultValue": null,
        "description": "",
        "name": "onDurationChange",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onDurationChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDurationChangeCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEmptied": {
        "defaultValue": null,
        "description": "",
        "name": "onEmptied",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEmptiedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onEmptiedCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEncrypted": {
        "defaultValue": null,
        "description": "",
        "name": "onEncrypted",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEncryptedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onEncryptedCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEnded": {
        "defaultValue": null,
        "description": "",
        "name": "onEnded",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEndedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onEndedCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadedData": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedData",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadedDataCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedDataCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadedMetadata": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedMetadata",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadedMetadataCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedMetadataCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadStart": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadStart",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadStartCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPause": {
        "defaultValue": null,
        "description": "",
        "name": "onPause",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPauseCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPauseCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPlay": {
        "defaultValue": null,
        "description": "",
        "name": "onPlay",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPlayCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPlayCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPlaying": {
        "defaultValue": null,
        "description": "",
        "name": "onPlaying",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPlayingCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPlayingCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onProgress": {
        "defaultValue": null,
        "description": "",
        "name": "onProgress",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onProgressCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onProgressCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onRateChange": {
        "defaultValue": null,
        "description": "",
        "name": "onRateChange",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onRateChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onRateChangeCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onResize": {
        "defaultValue": null,
        "description": "",
        "name": "onResize",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onResizeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onResizeCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSeeked": {
        "defaultValue": null,
        "description": "",
        "name": "onSeeked",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSeekedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSeekedCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSeeking": {
        "defaultValue": null,
        "description": "",
        "name": "onSeeking",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSeekingCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSeekingCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onStalled": {
        "defaultValue": null,
        "description": "",
        "name": "onStalled",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onStalledCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onStalledCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSuspend": {
        "defaultValue": null,
        "description": "",
        "name": "onSuspend",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSuspendCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSuspendCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onTimeUpdate": {
        "defaultValue": null,
        "description": "",
        "name": "onTimeUpdate",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onTimeUpdateCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTimeUpdateCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onVolumeChange": {
        "defaultValue": null,
        "description": "",
        "name": "onVolumeChange",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onVolumeChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onVolumeChangeCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onWaiting": {
        "defaultValue": null,
        "description": "",
        "name": "onWaiting",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onWaitingCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onWaitingCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onAuxClick": {
        "defaultValue": null,
        "description": "",
        "name": "onAuxClick",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onAuxClickCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAuxClickCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "",
        "name": "onClick",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onClickCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onClickCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onContextMenu": {
        "defaultValue": null,
        "description": "",
        "name": "onContextMenu",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onContextMenuCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onContextMenuCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onDoubleClick": {
        "defaultValue": null,
        "description": "",
        "name": "onDoubleClick",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onDoubleClickCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDoubleClickCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onDragCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragEndCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragEnter": {
        "defaultValue": null,
        "description": "",
        "name": "onDragEnter",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragEnterCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragEnterCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragExit": {
        "defaultValue": null,
        "description": "",
        "name": "onDragExit",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragExitCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragExitCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragLeave": {
        "defaultValue": null,
        "description": "",
        "name": "onDragLeave",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragLeaveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragLeaveCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragOver": {
        "defaultValue": null,
        "description": "",
        "name": "onDragOver",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragOverCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragOverCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragStartCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDrop": {
        "defaultValue": null,
        "description": "",
        "name": "onDrop",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDropCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDropCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onMouseDown": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseDown",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseDownCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseDownCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseEnter",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseLeave",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseMove": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseMove",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseMoveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseMoveCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseOut": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOut",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseOutCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOutCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseOver": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOver",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseOverCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOverCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseUp": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseUp",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseUpCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseUpCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "",
        "name": "onSelect",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSelectCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSelectCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onTouchCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchCancel",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchCancelCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchCancelCapture",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchEnd",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchEndCapture",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchMove": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchMove",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchMoveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchMoveCapture",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchStart": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchStart",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchStartCapture",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onPointerDown": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerDown",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerDownCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerDownCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerMove": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerMove",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerMoveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerMoveCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerUp": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerUp",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerUpCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerUpCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerCancel",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerCancelCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerCancelCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerEnter": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerEnter",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerLeave": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerLeave",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerOver": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOver",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerOverCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOverCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerOut": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOut",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerOutCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOutCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onGotPointerCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onGotPointerCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onGotPointerCaptureCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onGotPointerCaptureCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onLostPointerCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLostPointerCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onLostPointerCaptureCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLostPointerCaptureCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onScroll": {
        "defaultValue": null,
        "description": "",
        "name": "onScroll",
        "required": false,
        "type": {
          "name": "UIEventHandler<HTMLDivElement>"
        }
      },
      "onScrollCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onScrollCapture",
        "required": false,
        "type": {
          "name": "UIEventHandler<HTMLDivElement>"
        }
      },
      "onWheel": {
        "defaultValue": null,
        "description": "",
        "name": "onWheel",
        "required": false,
        "type": {
          "name": "WheelEventHandler<HTMLDivElement>"
        }
      },
      "onWheelCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onWheelCapture",
        "required": false,
        "type": {
          "name": "WheelEventHandler<HTMLDivElement>"
        }
      },
      "onAnimationStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationStartCapture",
        "required": false,
        "type": {
          "name": "AnimationEventHandler<HTMLDivElement>"
        }
      },
      "onAnimationEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationEnd",
        "required": false,
        "type": {
          "name": "AnimationEventHandler<HTMLDivElement>"
        }
      },
      "onAnimationEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationEndCapture",
        "required": false,
        "type": {
          "name": "AnimationEventHandler<HTMLDivElement>"
        }
      },
      "onAnimationIteration": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationIteration",
        "required": false,
        "type": {
          "name": "AnimationEventHandler<HTMLDivElement>"
        }
      },
      "onAnimationIterationCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationIterationCapture",
        "required": false,
        "type": {
          "name": "AnimationEventHandler<HTMLDivElement>"
        }
      },
      "onTransitionEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onTransitionEnd",
        "required": false,
        "type": {
          "name": "TransitionEventHandler<HTMLDivElement>"
        }
      },
      "onTransitionEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTransitionEndCapture",
        "required": false,
        "type": {
          "name": "TransitionEventHandler<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Motion/MotionItem.tsx",
    "description": "",
    "displayName": "MotionItem",
    "methods": [],
    "props": {
      "direction": {
        "defaultValue": {
          "value": "vertical"
        },
        "description": "Direction of the motion.",
        "name": "direction",
        "parent": {
          "fileName": "src/layout/Motion/MotionItem.tsx",
          "name": "MotionItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Motion/MotionItem.tsx",
            "name": "MotionItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Children to render.",
        "name": "children",
        "parent": {
          "fileName": "src/layout/Motion/MotionItem.tsx",
          "name": "MotionItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Motion/MotionItem.tsx",
            "name": "MotionItemProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      },
      "key": {
        "defaultValue": null,
        "description": "",
        "name": "key",
        "required": false,
        "type": {
          "name": "Key"
        }
      },
      "defaultChecked": {
        "defaultValue": null,
        "description": "",
        "name": "defaultChecked",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultValue": {
        "defaultValue": null,
        "description": "",
        "name": "defaultValue",
        "required": false,
        "type": {
          "name": "string | number | readonly string[]"
        }
      },
      "suppressContentEditableWarning": {
        "defaultValue": null,
        "description": "",
        "name": "suppressContentEditableWarning",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "suppressHydrationWarning": {
        "defaultValue": null,
        "description": "",
        "name": "suppressHydrationWarning",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "accessKey": {
        "defaultValue": null,
        "description": "",
        "name": "accessKey",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "",
        "name": "autoFocus",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "contentEditable": {
        "defaultValue": null,
        "description": "",
        "name": "contentEditable",
        "required": false,
        "type": {
          "name": "\"inherit\" | Booleanish | \"plaintext-only\""
        }
      },
      "contextMenu": {
        "defaultValue": null,
        "description": "",
        "name": "contextMenu",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "dir": {
        "defaultValue": null,
        "description": "",
        "name": "dir",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "draggable": {
        "defaultValue": null,
        "description": "",
        "name": "draggable",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "hidden": {
        "defaultValue": null,
        "description": "",
        "name": "hidden",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "",
        "name": "id",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "lang": {
        "defaultValue": null,
        "description": "",
        "name": "lang",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "nonce": {
        "defaultValue": null,
        "description": "",
        "name": "nonce",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "slot": {
        "defaultValue": null,
        "description": "",
        "name": "slot",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "spellCheck": {
        "defaultValue": null,
        "description": "",
        "name": "spellCheck",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "tabIndex": {
        "defaultValue": null,
        "description": "",
        "name": "tabIndex",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "translate": {
        "defaultValue": null,
        "description": "",
        "name": "translate",
        "required": false,
        "type": {
          "name": "\"yes\" | \"no\""
        }
      },
      "radioGroup": {
        "defaultValue": null,
        "description": "",
        "name": "radioGroup",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "",
        "name": "role",
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "about": {
        "defaultValue": null,
        "description": "",
        "name": "about",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "",
        "name": "content",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "datatype": {
        "defaultValue": null,
        "description": "",
        "name": "datatype",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inlist": {
        "defaultValue": null,
        "description": "",
        "name": "inlist",
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "prefix": {
        "defaultValue": null,
        "description": "",
        "name": "prefix",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "property": {
        "defaultValue": null,
        "description": "",
        "name": "property",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rel": {
        "defaultValue": null,
        "description": "",
        "name": "rel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "resource": {
        "defaultValue": null,
        "description": "",
        "name": "resource",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rev": {
        "defaultValue": null,
        "description": "",
        "name": "rev",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "typeof": {
        "defaultValue": null,
        "description": "",
        "name": "typeof",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "vocab": {
        "defaultValue": null,
        "description": "",
        "name": "vocab",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoCapitalize": {
        "defaultValue": null,
        "description": "",
        "name": "autoCapitalize",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoCorrect": {
        "defaultValue": null,
        "description": "",
        "name": "autoCorrect",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoSave": {
        "defaultValue": null,
        "description": "",
        "name": "autoSave",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "itemProp": {
        "defaultValue": null,
        "description": "",
        "name": "itemProp",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "itemScope": {
        "defaultValue": null,
        "description": "",
        "name": "itemScope",
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "itemType": {
        "defaultValue": null,
        "description": "",
        "name": "itemType",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "itemID": {
        "defaultValue": null,
        "description": "",
        "name": "itemID",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "itemRef": {
        "defaultValue": null,
        "description": "",
        "name": "itemRef",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "results": {
        "defaultValue": null,
        "description": "",
        "name": "results",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "security": {
        "defaultValue": null,
        "description": "",
        "name": "security",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "unselectable": {
        "defaultValue": null,
        "description": "",
        "name": "unselectable",
        "required": false,
        "type": {
          "name": "\"on\" | \"off\""
        }
      },
      "inputMode": {
        "defaultValue": null,
        "description": "",
        "name": "inputMode",
        "required": false,
        "type": {
          "name": "\"none\" | \"search\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\""
        }
      },
      "is": {
        "defaultValue": null,
        "description": "",
        "name": "is",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-activedescendant": {
        "defaultValue": null,
        "description": "",
        "name": "aria-activedescendant",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-atomic": {
        "defaultValue": null,
        "description": "",
        "name": "aria-atomic",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-autocomplete": {
        "defaultValue": null,
        "description": "",
        "name": "aria-autocomplete",
        "required": false,
        "type": {
          "name": "\"list\" | \"none\" | \"inline\" | \"both\""
        }
      },
      "aria-braillelabel": {
        "defaultValue": null,
        "description": "",
        "name": "aria-braillelabel",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-brailleroledescription": {
        "defaultValue": null,
        "description": "",
        "name": "aria-brailleroledescription",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-busy": {
        "defaultValue": null,
        "description": "",
        "name": "aria-busy",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-checked": {
        "defaultValue": null,
        "description": "",
        "name": "aria-checked",
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"mixed\""
        }
      },
      "aria-colcount": {
        "defaultValue": null,
        "description": "",
        "name": "aria-colcount",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-colindex": {
        "defaultValue": null,
        "description": "",
        "name": "aria-colindex",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-colindextext": {
        "defaultValue": null,
        "description": "",
        "name": "aria-colindextext",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-colspan": {
        "defaultValue": null,
        "description": "",
        "name": "aria-colspan",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-controls": {
        "defaultValue": null,
        "description": "",
        "name": "aria-controls",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-current": {
        "defaultValue": null,
        "description": "",
        "name": "aria-current",
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\""
        }
      },
      "aria-describedby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-describedby",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-description": {
        "defaultValue": null,
        "description": "",
        "name": "aria-description",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-details": {
        "defaultValue": null,
        "description": "",
        "name": "aria-details",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-disabled": {
        "defaultValue": null,
        "description": "",
        "name": "aria-disabled",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-dropeffect": {
        "defaultValue": null,
        "description": "",
        "name": "aria-dropeffect",
        "required": false,
        "type": {
          "name": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\""
        }
      },
      "aria-errormessage": {
        "defaultValue": null,
        "description": "",
        "name": "aria-errormessage",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-expanded": {
        "defaultValue": null,
        "description": "",
        "name": "aria-expanded",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-flowto": {
        "defaultValue": null,
        "description": "",
        "name": "aria-flowto",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-grabbed": {
        "defaultValue": null,
        "description": "",
        "name": "aria-grabbed",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-haspopup": {
        "defaultValue": null,
        "description": "",
        "name": "aria-haspopup",
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"dialog\" | \"grid\" | \"listbox\" | \"menu\" | \"tree\""
        }
      },
      "aria-hidden": {
        "defaultValue": null,
        "description": "",
        "name": "aria-hidden",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-invalid": {
        "defaultValue": null,
        "description": "",
        "name": "aria-invalid",
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
        }
      },
      "aria-keyshortcuts": {
        "defaultValue": null,
        "description": "",
        "name": "aria-keyshortcuts",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "",
        "name": "aria-label",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-labelledby",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-level": {
        "defaultValue": null,
        "description": "",
        "name": "aria-level",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-live": {
        "defaultValue": null,
        "description": "",
        "name": "aria-live",
        "required": false,
        "type": {
          "name": "\"off\" | \"assertive\" | \"polite\""
        }
      },
      "aria-modal": {
        "defaultValue": null,
        "description": "",
        "name": "aria-modal",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-multiline": {
        "defaultValue": null,
        "description": "",
        "name": "aria-multiline",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-multiselectable": {
        "defaultValue": null,
        "description": "",
        "name": "aria-multiselectable",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-orientation": {
        "defaultValue": null,
        "description": "",
        "name": "aria-orientation",
        "required": false,
        "type": {
          "name": "\"horizontal\" | \"vertical\""
        }
      },
      "aria-owns": {
        "defaultValue": null,
        "description": "",
        "name": "aria-owns",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-placeholder": {
        "defaultValue": null,
        "description": "",
        "name": "aria-placeholder",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-posinset": {
        "defaultValue": null,
        "description": "",
        "name": "aria-posinset",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-pressed": {
        "defaultValue": null,
        "description": "",
        "name": "aria-pressed",
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"mixed\""
        }
      },
      "aria-readonly": {
        "defaultValue": null,
        "description": "",
        "name": "aria-readonly",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-relevant": {
        "defaultValue": null,
        "description": "",
        "name": "aria-relevant",
        "required": false,
        "type": {
          "name": "\"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\""
        }
      },
      "aria-required": {
        "defaultValue": null,
        "description": "",
        "name": "aria-required",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-roledescription": {
        "defaultValue": null,
        "description": "",
        "name": "aria-roledescription",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-rowcount": {
        "defaultValue": null,
        "description": "",
        "name": "aria-rowcount",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-rowindex": {
        "defaultValue": null,
        "description": "",
        "name": "aria-rowindex",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-rowindextext": {
        "defaultValue": null,
        "description": "",
        "name": "aria-rowindextext",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-rowspan": {
        "defaultValue": null,
        "description": "",
        "name": "aria-rowspan",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-selected": {
        "defaultValue": null,
        "description": "",
        "name": "aria-selected",
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-setsize": {
        "defaultValue": null,
        "description": "",
        "name": "aria-setsize",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-sort": {
        "defaultValue": null,
        "description": "",
        "name": "aria-sort",
        "required": false,
        "type": {
          "name": "\"none\" | \"ascending\" | \"descending\" | \"other\""
        }
      },
      "aria-valuemax": {
        "defaultValue": null,
        "description": "",
        "name": "aria-valuemax",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-valuemin": {
        "defaultValue": null,
        "description": "",
        "name": "aria-valuemin",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-valuenow": {
        "defaultValue": null,
        "description": "",
        "name": "aria-valuenow",
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-valuetext": {
        "defaultValue": null,
        "description": "",
        "name": "aria-valuetext",
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "dangerouslySetInnerHTML": {
        "defaultValue": null,
        "description": "",
        "name": "dangerouslySetInnerHTML",
        "required": false,
        "type": {
          "name": "{ __html: string | TrustedHTML; }"
        }
      },
      "onCopy": {
        "defaultValue": null,
        "description": "",
        "name": "onCopy",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onCopyCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCopyCapture",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onCut": {
        "defaultValue": null,
        "description": "",
        "name": "onCut",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onCutCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCutCapture",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onPaste": {
        "defaultValue": null,
        "description": "",
        "name": "onPaste",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onPasteCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPasteCapture",
        "required": false,
        "type": {
          "name": "ClipboardEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionEnd",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionEndCapture",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionStart": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionStart",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionStartCapture",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionUpdate": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionUpdate",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onCompositionUpdateCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCompositionUpdateCapture",
        "required": false,
        "type": {
          "name": "CompositionEventHandler<HTMLDivElement>"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "",
        "name": "onFocus",
        "required": false,
        "type": {
          "name": "FocusEventHandler<HTMLDivElement>"
        }
      },
      "onFocusCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onFocusCapture",
        "required": false,
        "type": {
          "name": "FocusEventHandler<HTMLDivElement>"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "",
        "name": "onBlur",
        "required": false,
        "type": {
          "name": "FocusEventHandler<HTMLDivElement>"
        }
      },
      "onBlurCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onBlurCapture",
        "required": false,
        "type": {
          "name": "FocusEventHandler<HTMLDivElement>"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "",
        "name": "onChange",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onChangeCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onBeforeInput": {
        "defaultValue": null,
        "description": "",
        "name": "onBeforeInput",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onBeforeInputCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onBeforeInputCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onInput": {
        "defaultValue": null,
        "description": "",
        "name": "onInput",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onInputCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onInputCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onReset": {
        "defaultValue": null,
        "description": "",
        "name": "onReset",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onResetCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onResetCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onSubmit": {
        "defaultValue": null,
        "description": "",
        "name": "onSubmit",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onSubmitCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSubmitCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onInvalid": {
        "defaultValue": null,
        "description": "",
        "name": "onInvalid",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onInvalidCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onInvalidCapture",
        "required": false,
        "type": {
          "name": "FormEventHandler<HTMLDivElement>"
        }
      },
      "onLoad": {
        "defaultValue": null,
        "description": "",
        "name": "onLoad",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onError": {
        "defaultValue": null,
        "description": "",
        "name": "onError",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onErrorCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onErrorCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onKeyDown": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyDown",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onKeyDownCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyDownCapture",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onKeyPress": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyPress",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onKeyPressCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyPressCapture",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onKeyUp": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyUp",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onKeyUpCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onKeyUpCapture",
        "required": false,
        "type": {
          "name": "KeyboardEventHandler<HTMLDivElement>"
        }
      },
      "onAbort": {
        "defaultValue": null,
        "description": "",
        "name": "onAbort",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onAbortCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAbortCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onCanPlay": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlay",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onCanPlayCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlayCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onCanPlayThrough": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlayThrough",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onCanPlayThroughCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onCanPlayThroughCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onDurationChange": {
        "defaultValue": null,
        "description": "",
        "name": "onDurationChange",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onDurationChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDurationChangeCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEmptied": {
        "defaultValue": null,
        "description": "",
        "name": "onEmptied",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEmptiedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onEmptiedCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEncrypted": {
        "defaultValue": null,
        "description": "",
        "name": "onEncrypted",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEncryptedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onEncryptedCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEnded": {
        "defaultValue": null,
        "description": "",
        "name": "onEnded",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onEndedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onEndedCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadedData": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedData",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadedDataCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedDataCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadedMetadata": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedMetadata",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadedMetadataCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadedMetadataCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadStart": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadStart",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onLoadStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLoadStartCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPause": {
        "defaultValue": null,
        "description": "",
        "name": "onPause",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPauseCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPauseCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPlay": {
        "defaultValue": null,
        "description": "",
        "name": "onPlay",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPlayCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPlayCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPlaying": {
        "defaultValue": null,
        "description": "",
        "name": "onPlaying",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onPlayingCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPlayingCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onProgress": {
        "defaultValue": null,
        "description": "",
        "name": "onProgress",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onProgressCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onProgressCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onRateChange": {
        "defaultValue": null,
        "description": "",
        "name": "onRateChange",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onRateChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onRateChangeCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onResize": {
        "defaultValue": null,
        "description": "",
        "name": "onResize",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onResizeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onResizeCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSeeked": {
        "defaultValue": null,
        "description": "",
        "name": "onSeeked",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSeekedCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSeekedCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSeeking": {
        "defaultValue": null,
        "description": "",
        "name": "onSeeking",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSeekingCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSeekingCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onStalled": {
        "defaultValue": null,
        "description": "",
        "name": "onStalled",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onStalledCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onStalledCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSuspend": {
        "defaultValue": null,
        "description": "",
        "name": "onSuspend",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSuspendCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSuspendCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onTimeUpdate": {
        "defaultValue": null,
        "description": "",
        "name": "onTimeUpdate",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onTimeUpdateCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTimeUpdateCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onVolumeChange": {
        "defaultValue": null,
        "description": "",
        "name": "onVolumeChange",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onVolumeChangeCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onVolumeChangeCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onWaiting": {
        "defaultValue": null,
        "description": "",
        "name": "onWaiting",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onWaitingCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onWaitingCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onAuxClick": {
        "defaultValue": null,
        "description": "",
        "name": "onAuxClick",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onAuxClickCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAuxClickCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "",
        "name": "onClick",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onClickCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onClickCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onContextMenu": {
        "defaultValue": null,
        "description": "",
        "name": "onContextMenu",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onContextMenuCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onContextMenuCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onDoubleClick": {
        "defaultValue": null,
        "description": "",
        "name": "onDoubleClick",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onDoubleClickCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDoubleClickCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onDragCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragEndCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragEnter": {
        "defaultValue": null,
        "description": "",
        "name": "onDragEnter",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragEnterCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragEnterCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragExit": {
        "defaultValue": null,
        "description": "",
        "name": "onDragExit",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragExitCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragExitCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragLeave": {
        "defaultValue": null,
        "description": "",
        "name": "onDragLeave",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragLeaveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragLeaveCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragOver": {
        "defaultValue": null,
        "description": "",
        "name": "onDragOver",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragOverCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragOverCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDragStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDragStartCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDrop": {
        "defaultValue": null,
        "description": "",
        "name": "onDrop",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onDropCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onDropCapture",
        "required": false,
        "type": {
          "name": "DragEventHandler<HTMLDivElement>"
        }
      },
      "onMouseDown": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseDown",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseDownCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseDownCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseEnter",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseLeave",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseMove": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseMove",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseMoveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseMoveCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseOut": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOut",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseOutCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOutCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseOver": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOver",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseOverCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseOverCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseUp": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseUp",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onMouseUpCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseUpCapture",
        "required": false,
        "type": {
          "name": "MouseEventHandler<HTMLDivElement>"
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "",
        "name": "onSelect",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onSelectCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onSelectCapture",
        "required": false,
        "type": {
          "name": "ReactEventHandler<HTMLDivElement>"
        }
      },
      "onTouchCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchCancel",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchCancelCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchCancelCapture",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchEnd",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchEndCapture",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchMove": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchMove",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchMoveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchMoveCapture",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchStart": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchStart",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onTouchStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTouchStartCapture",
        "required": false,
        "type": {
          "name": "TouchEventHandler<HTMLDivElement>"
        }
      },
      "onPointerDown": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerDown",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerDownCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerDownCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerMove": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerMove",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerMoveCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerMoveCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerUp": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerUp",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerUpCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerUpCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerCancel": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerCancel",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerCancelCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerCancelCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerEnter": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerEnter",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerLeave": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerLeave",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerOver": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOver",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerOverCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOverCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerOut": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOut",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onPointerOutCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onPointerOutCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onGotPointerCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onGotPointerCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onGotPointerCaptureCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onGotPointerCaptureCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onLostPointerCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLostPointerCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onLostPointerCaptureCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onLostPointerCaptureCapture",
        "required": false,
        "type": {
          "name": "PointerEventHandler<HTMLDivElement>"
        }
      },
      "onScroll": {
        "defaultValue": null,
        "description": "",
        "name": "onScroll",
        "required": false,
        "type": {
          "name": "UIEventHandler<HTMLDivElement>"
        }
      },
      "onScrollCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onScrollCapture",
        "required": false,
        "type": {
          "name": "UIEventHandler<HTMLDivElement>"
        }
      },
      "onWheel": {
        "defaultValue": null,
        "description": "",
        "name": "onWheel",
        "required": false,
        "type": {
          "name": "WheelEventHandler<HTMLDivElement>"
        }
      },
      "onWheelCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onWheelCapture",
        "required": false,
        "type": {
          "name": "WheelEventHandler<HTMLDivElement>"
        }
      },
      "onAnimationStartCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationStartCapture",
        "required": false,
        "type": {
          "name": "AnimationEventHandler<HTMLDivElement>"
        }
      },
      "onAnimationEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationEnd",
        "required": false,
        "type": {
          "name": "AnimationEventHandler<HTMLDivElement>"
        }
      },
      "onAnimationEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationEndCapture",
        "required": false,
        "type": {
          "name": "AnimationEventHandler<HTMLDivElement>"
        }
      },
      "onAnimationIteration": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationIteration",
        "required": false,
        "type": {
          "name": "AnimationEventHandler<HTMLDivElement>"
        }
      },
      "onAnimationIterationCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onAnimationIterationCapture",
        "required": false,
        "type": {
          "name": "AnimationEventHandler<HTMLDivElement>"
        }
      },
      "onTransitionEnd": {
        "defaultValue": null,
        "description": "",
        "name": "onTransitionEnd",
        "required": false,
        "type": {
          "name": "TransitionEventHandler<HTMLDivElement>"
        }
      },
      "onTransitionEndCapture": {
        "defaultValue": null,
        "description": "",
        "name": "onTransitionEndCapture",
        "required": false,
        "type": {
          "name": "TransitionEventHandler<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Stack/Stack.tsx",
    "description": "",
    "displayName": "Stack",
    "methods": [],
    "props": {
      "dense": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, the stack will be dense.",
        "name": "dense",
        "parent": {
          "fileName": "src/layout/Stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inline": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, the stack will be inline.",
        "name": "inline",
        "parent": {
          "fileName": "src/layout/Stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "direction": {
        "defaultValue": {
          "value": "row"
        },
        "description": "The direction of the stack.",
        "name": "direction",
        "parent": {
          "fileName": "src/layout/Stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"row\" | \"column\" | \"rowReverse\" | \"columnReverse\""
        }
      },
      "alignItems": {
        "defaultValue": {
          "value": "center"
        },
        "description": "How the content is arranged inside the stack.",
        "name": "alignItems",
        "parent": {
          "fileName": "src/layout/Stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\" | \"stretch\""
        }
      },
      "justifyContent": {
        "defaultValue": {
          "value": "start"
        },
        "description": "How the content is arranged inside the stack.",
        "name": "justifyContent",
        "parent": {
          "fileName": "src/layout/Stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"start\" | \"end\" | \"center\" | \"spaceBetween\""
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Stack.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Stack/Stack.tsx",
          "name": "StackProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stack/Stack.tsx",
            "name": "StackProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StackTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the stack element.",
        "name": "ref",
        "parent": {
          "fileName": "src/layout/Stack/Stack.tsx",
          "name": "StackRef"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stack/Stack.tsx",
            "name": "StackRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Stepper/Step.tsx",
    "description": "",
    "displayName": "Step",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Optional Text of the marker",
        "name": "label",
        "parent": {
          "fileName": "src/layout/Stepper/Step.tsx",
          "name": "StepProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stepper/Step.tsx",
            "name": "StepProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS Classname to applied to the Step",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Stepper/Step.tsx",
          "name": "StepProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stepper/Step.tsx",
            "name": "StepProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Stepper/Stepper.tsx",
    "description": "",
    "displayName": "Stepper",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "CSS Classname to applied to the Stepper",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activeStep": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Currently active step",
        "name": "activeStep",
        "parent": {
          "fileName": "src/layout/Stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Stepper.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "StepperTheme"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Style of the stepper. Default is dots but it can be numbered too.",
        "name": "variant",
        "parent": {
          "fileName": "src/layout/Stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"numbered\""
        }
      },
      "continuous": {
        "defaultValue": null,
        "description": "Display link after last step",
        "name": "continuous",
        "parent": {
          "fileName": "src/layout/Stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Animate items appearance",
        "name": "animated",
        "parent": {
          "fileName": "src/layout/Stepper/Stepper.tsx",
          "name": "StepperProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Stepper/Stepper.tsx",
            "name": "StepperProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tabs/Tab.tsx",
    "description": "",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "The id of the tab list.\n@private",
        "name": "id",
        "parent": {
          "fileName": "src/layout/Tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "containerClassName": {
        "defaultValue": null,
        "description": "The class name to be added to the tab container.",
        "name": "containerClassName",
        "parent": {
          "fileName": "src/layout/Tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The class name to be added to the tab.",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "The disabled state of the tab.\n@private",
        "name": "disabled",
        "parent": {
          "fileName": "src/layout/Tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selected": {
        "defaultValue": null,
        "description": "The selected state of the tab.\n@private",
        "name": "selected",
        "parent": {
          "fileName": "src/layout/Tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "The callback to be called when the tab is selected.\n@private",
        "name": "onSelect",
        "parent": {
          "fileName": "src/layout/Tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The size of the tabs.\n@private",
        "name": "size",
        "parent": {
          "fileName": "src/layout/Tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Tabs.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Tabs/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TabsTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tabs/TabList.tsx",
    "description": "",
    "displayName": "TabList",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "The id of the tab list.\n@private",
        "name": "id",
        "parent": {
          "fileName": "src/layout/Tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The class name to be added to the tab list.",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "selectedIndex": {
        "defaultValue": null,
        "description": "The active index of the tabs.\n@private",
        "name": "selectedIndex",
        "parent": {
          "fileName": "src/layout/Tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "The direction of the tabs. Default is 'ltr'.\n@private",
        "name": "direction",
        "parent": {
          "fileName": "src/layout/Tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"ltr\" | \"rtl\""
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "The callback to be called when a tab is selected.\n@private",
        "name": "onSelect",
        "parent": {
          "fileName": "src/layout/Tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(index: number) => void"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "primary"
        },
        "description": "The variant of the tabs.\n@private",
        "name": "variant",
        "parent": {
          "fileName": "src/layout/Tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The size of the tabs.\n@private",
        "name": "size",
        "parent": {
          "fileName": "src/layout/Tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Tabs.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Tabs/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TabsTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tabs/TabPanel.tsx",
    "description": "",
    "displayName": "TabPanel",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "The class name to be added to the tab panel.",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Tabs.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Tabs/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TabsTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tabs/Tabs.tsx",
    "description": "",
    "displayName": "Tabs",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "The class name to be added to the tabs.",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "selectedIndex": {
        "defaultValue": null,
        "description": "The active index of the tabs.",
        "name": "selectedIndex",
        "parent": {
          "fileName": "src/layout/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "defaultIndex": {
        "defaultValue": {
          "value": "0"
        },
        "description": "The default index of the tabs. Default is 0.",
        "name": "defaultIndex",
        "parent": {
          "fileName": "src/layout/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "direction": {
        "defaultValue": {
          "value": "ltr"
        },
        "description": "The direction of the tabs. Default is 'ltr'.",
        "name": "direction",
        "parent": {
          "fileName": "src/layout/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"ltr\" | \"rtl\""
        }
      },
      "style": {
        "defaultValue": null,
        "description": "The style to be added to the tabs.",
        "name": "style",
        "parent": {
          "fileName": "src/layout/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "primary"
        },
        "description": "The variant of the tabs.",
        "name": "variant",
        "parent": {
          "fileName": "src/layout/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"primary\" | \"secondary\""
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The size of the tabs.",
        "name": "size",
        "parent": {
          "fileName": "src/layout/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "The callback to be called when a tab is selected.",
        "name": "onSelect",
        "parent": {
          "fileName": "src/layout/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(index: number) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Tabs.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Tabs/Tabs.tsx",
          "name": "TabsProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tabs/Tabs.tsx",
            "name": "TabsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TabsTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tree/Tree.tsx",
    "description": "",
    "displayName": "Tree",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "CSS Classname to apply to the tree",
        "name": "className",
        "declarations": [
          {
            "fileName": "src/layout/Tree/Tree.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Extra style attributes to apply to the tree",
        "name": "style",
        "declarations": [
          {
            "fileName": "src/layout/Tree/Tree.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Tree",
        "name": "theme",
        "declarations": [
          {
            "fileName": "src/layout/Tree/Tree.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "TreeTheme"
        }
      },
      "collapsedIcon": {
        "defaultValue": null,
        "description": "A custom icon to be used for collapsed nodes.",
        "name": "collapsedIcon",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeContext.ts",
          "name": "TreeContextProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeContext.ts",
            "name": "TreeContextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "expandedIcon": {
        "defaultValue": null,
        "description": "A custom icon to be used for expanded nodes.",
        "name": "expandedIcon",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeContext.ts",
          "name": "TreeContextProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeContext.ts",
            "name": "TreeContextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tree/TreeNode.tsx",
    "description": "",
    "displayName": "TreeNode",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Label to display for the node",
        "name": "label",
        "parent": {
          "fileName": "src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS Classname to apply to the node",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "expanded": {
        "defaultValue": null,
        "description": "Whether the node is expanded or not",
        "name": "expanded",
        "parent": {
          "fileName": "src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the node is disabled or not",
        "name": "disabled",
        "parent": {
          "fileName": "src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Tree",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TreeTheme"
        }
      },
      "onExpand": {
        "defaultValue": null,
        "description": "Event fired when the node is expanded",
        "name": "onExpand",
        "parent": {
          "fileName": "src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onCollapse": {
        "defaultValue": null,
        "description": "Event fired when the node is collapsed",
        "name": "onCollapse",
        "parent": {
          "fileName": "src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tree/index.tsx",
    "description": "",
    "displayName": "Tree",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "CSS Classname to apply to the tree",
        "name": "className",
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/Tree.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Extra style attributes to apply to the tree",
        "name": "style",
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/Tree.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Tree",
        "name": "theme",
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/Tree.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "TreeTheme"
        }
      },
      "collapsedIcon": {
        "defaultValue": null,
        "description": "A custom icon to be used for collapsed nodes.",
        "name": "collapsedIcon",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeContext.ts",
          "name": "TreeContextProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeContext.ts",
            "name": "TreeContextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "expandedIcon": {
        "defaultValue": null,
        "description": "A custom icon to be used for expanded nodes.",
        "name": "expandedIcon",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeContext.ts",
          "name": "TreeContextProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeContext.ts",
            "name": "TreeContextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tree/index.tsx",
    "description": "",
    "displayName": "TreeNode",
    "methods": [],
    "props": {
      "label": {
        "defaultValue": null,
        "description": "Label to display for the node",
        "name": "label",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "CSS Classname to apply to the node",
        "name": "className",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "expanded": {
        "defaultValue": null,
        "description": "Whether the node is expanded or not",
        "name": "expanded",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the node is disabled or not",
        "name": "disabled",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Tree",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TreeTheme"
        }
      },
      "onExpand": {
        "defaultValue": null,
        "description": "Event fired when the node is expanded",
        "name": "onExpand",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onCollapse": {
        "defaultValue": null,
        "description": "Event fired when the node is collapsed",
        "name": "onCollapse",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
          "name": "TreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/TreeNode.tsx",
            "name": "TreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tree/index.tsx",
    "description": "",
    "displayName": "JsonTree",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "The data to be rendered as a JSON tree.",
        "name": "data",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": true,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      },
      "showAll": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, all nodes in the JSON tree will be expanded by default.",
        "name": "showAll",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showAllLimit": {
        "defaultValue": {
          "value": "10"
        },
        "description": "The limit for the number of nodes to show when `showAll` is false.",
        "name": "showAllLimit",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showCount": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the count of child nodes will be shown next to each node.",
        "name": "showCount",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showEmpty": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, empty nodes will be shown in the JSON tree.",
        "name": "showEmpty",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ellipsisText": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, long text in nodes will be truncated and replaced with an ellipsis.",
        "name": "ellipsisText",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ellipsisTextLength": {
        "defaultValue": {
          "value": "150"
        },
        "description": "The maximum length of text in a node before it is truncated and replaced with an ellipsis.",
        "name": "ellipsisTextLength",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "expandDepth": {
        "defaultValue": {
          "value": "2"
        },
        "description": "The depth at which the JSON tree nodes should be expanded by default.",
        "name": "expandDepth",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "root": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the JSON tree will be rendered with a root node.",
        "name": "root",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The CSS class name to be applied to the JSON tree.",
        "name": "className",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tree/index.tsx",
    "description": "",
    "displayName": "JsonTreeNode",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "The data to be rendered as a JSON tree.",
        "name": "data",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "JsonTreeData"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The CSS class name to be applied to the JSON tree node.",
        "name": "className",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showCount": {
        "defaultValue": null,
        "description": "If true, the count of child nodes will be shown next to each node.",
        "name": "showCount",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showEmpty": {
        "defaultValue": null,
        "description": "If true, empty nodes will be shown in the JSON tree.",
        "name": "showEmpty",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "depth": {
        "defaultValue": null,
        "description": "The depth of the JSON tree node. This is typically used for indentation purposes.",
        "name": "depth",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showAll": {
        "defaultValue": null,
        "description": "If true, all nodes in the JSON tree will be expanded by default.",
        "name": "showAll",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showAllLimit": {
        "defaultValue": null,
        "description": "The limit for the number of nodes to show when `showAll` is false.",
        "name": "showAllLimit",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "expandDepth": {
        "defaultValue": null,
        "description": "The depth at which the JSON tree nodes should be expanded by default.",
        "name": "expandDepth",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Json Tree",
        "name": "theme",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "JsonTreeTheme"
        }
      },
      "ellipsisText": {
        "defaultValue": null,
        "description": "If true, long text in nodes will be truncated and replaced with an ellipsis.",
        "name": "ellipsisText",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ellipsisTextLength": {
        "defaultValue": null,
        "description": "The maximum length of text in a node before it is truncated and replaced with an ellipsis.",
        "name": "ellipsisTextLength",
        "parent": {
          "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/VerticalSpacer/VerticalSpacer.tsx",
    "description": "",
    "displayName": "VerticalSpacer",
    "methods": [],
    "props": {
      "space": {
        "defaultValue": {
          "value": "md"
        },
        "description": "The amount of space to add.",
        "name": "space",
        "parent": {
          "fileName": "src/layout/VerticalSpacer/VerticalSpacer.tsx",
          "name": "VerticalSpacerProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/VerticalSpacer/VerticalSpacer.tsx",
            "name": "VerticalSpacerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the VerticalSpacer.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/VerticalSpacer/VerticalSpacer.tsx",
          "name": "VerticalSpacerProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/VerticalSpacer/VerticalSpacer.tsx",
            "name": "VerticalSpacerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "VerticalSpacerTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the HTML div element.",
        "name": "ref",
        "parent": {
          "fileName": "src/layout/VerticalSpacer/VerticalSpacer.tsx",
          "name": "VerticalSpacerRef"
        },
        "declarations": [
          {
            "fileName": "src/layout/VerticalSpacer/VerticalSpacer.tsx",
            "name": "VerticalSpacerRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/typography/PageTitle/PageTitle.tsx",
    "description": "",
    "displayName": "PageTitle",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Color variation of the title.",
        "name": "color",
        "parent": {
          "fileName": "src/typography/PageTitle/PageTitle.tsx",
          "name": "PageTitleProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/PageTitle/PageTitle.tsx",
            "name": "PageTitleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Font variant for the title.",
        "name": "variant",
        "parent": {
          "fileName": "src/typography/PageTitle/PageTitle.tsx",
          "name": "PageTitleProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/PageTitle/PageTitle.tsx",
            "name": "PageTitleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"mono\""
        }
      },
      "disableMargins": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether to disable the margins.",
        "name": "disableMargins",
        "parent": {
          "fileName": "src/typography/PageTitle/PageTitle.tsx",
          "name": "PageTitleProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/PageTitle/PageTitle.tsx",
            "name": "PageTitleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Typography.",
        "name": "theme",
        "parent": {
          "fileName": "src/typography/PageTitle/PageTitle.tsx",
          "name": "PageTitleProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/PageTitle/PageTitle.tsx",
            "name": "PageTitleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TypographyTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the HTML heading element.",
        "name": "ref",
        "parent": {
          "fileName": "src/typography/PageTitle/PageTitle.tsx",
          "name": "PageTitleRef"
        },
        "declarations": [
          {
            "fileName": "src/typography/PageTitle/PageTitle.tsx",
            "name": "PageTitleRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLHeadingElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
    "description": "",
    "displayName": "PrimaryHeading",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Color variation of the title.",
        "name": "color",
        "parent": {
          "fileName": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
          "name": "PrimaryHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
            "name": "PrimaryHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Font variant for the heading.",
        "name": "variant",
        "parent": {
          "fileName": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
          "name": "PrimaryHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
            "name": "PrimaryHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"mono\""
        }
      },
      "disableMargins": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether to disable the margins.",
        "name": "disableMargins",
        "parent": {
          "fileName": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
          "name": "PrimaryHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
            "name": "PrimaryHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Typography.",
        "name": "theme",
        "parent": {
          "fileName": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
          "name": "PrimaryHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
            "name": "PrimaryHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TypographyTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the HTML heading element.",
        "name": "ref",
        "parent": {
          "fileName": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
          "name": "PrimaryHeadingRef"
        },
        "declarations": [
          {
            "fileName": "src/typography/PrimaryHeading/PrimaryHeading.tsx",
            "name": "PrimaryHeadingRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLHeadingElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
    "description": "",
    "displayName": "SecondaryHeading",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Color variation of the heading.",
        "name": "color",
        "parent": {
          "fileName": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
          "name": "SecondaryHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
            "name": "SecondaryHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Font variant for the heading.",
        "name": "variant",
        "parent": {
          "fileName": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
          "name": "SecondaryHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
            "name": "SecondaryHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"mono\""
        }
      },
      "disableMargins": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether to disable the margins.",
        "name": "disableMargins",
        "parent": {
          "fileName": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
          "name": "SecondaryHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
            "name": "SecondaryHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Typography.",
        "name": "theme",
        "parent": {
          "fileName": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
          "name": "SecondaryHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
            "name": "SecondaryHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TypographyTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the HTML heading element.",
        "name": "ref",
        "parent": {
          "fileName": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
          "name": "SecondaryHeadingRef"
        },
        "declarations": [
          {
            "fileName": "src/typography/SecondaryHeading/SecondaryHeading.tsx",
            "name": "SecondaryHeadingRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLHeadingElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/typography/SmallHeading/SmallHeading.tsx",
    "description": "",
    "displayName": "SmallHeading",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Color variation of the title.",
        "name": "color",
        "parent": {
          "fileName": "src/typography/SmallHeading/SmallHeading.tsx",
          "name": "SmallHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/SmallHeading/SmallHeading.tsx",
            "name": "SmallHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Font variant for the heading.",
        "name": "variant",
        "parent": {
          "fileName": "src/typography/SmallHeading/SmallHeading.tsx",
          "name": "SmallHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/SmallHeading/SmallHeading.tsx",
            "name": "SmallHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"mono\""
        }
      },
      "disableMargins": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether to disable the margins.",
        "name": "disableMargins",
        "parent": {
          "fileName": "src/typography/SmallHeading/SmallHeading.tsx",
          "name": "SmallHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/SmallHeading/SmallHeading.tsx",
            "name": "SmallHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Typography.",
        "name": "theme",
        "parent": {
          "fileName": "src/typography/SmallHeading/SmallHeading.tsx",
          "name": "SmallHeadingProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/SmallHeading/SmallHeading.tsx",
            "name": "SmallHeadingProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TypographyTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the HTML heading element.",
        "name": "ref",
        "parent": {
          "fileName": "src/typography/SmallHeading/SmallHeading.tsx",
          "name": "SmallHeadingRef"
        },
        "declarations": [
          {
            "fileName": "src/typography/SmallHeading/SmallHeading.tsx",
            "name": "SmallHeadingRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLHeadingElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/typography/Sub/Sub.tsx",
    "description": "",
    "displayName": "Sub",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Color variation of the text.",
        "name": "color",
        "parent": {
          "fileName": "src/typography/Sub/Sub.tsx",
          "name": "SubProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Sub/Sub.tsx",
            "name": "SubProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "variant": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Font variant for the text.",
        "name": "variant",
        "parent": {
          "fileName": "src/typography/Sub/Sub.tsx",
          "name": "SubProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Sub/Sub.tsx",
            "name": "SubProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"mono\""
        }
      },
      "disableMargins": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Whether to disable the margins.",
        "name": "disableMargins",
        "parent": {
          "fileName": "src/typography/Sub/Sub.tsx",
          "name": "SubProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Sub/Sub.tsx",
            "name": "SubProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Typography.",
        "name": "theme",
        "parent": {
          "fileName": "src/typography/Sub/Sub.tsx",
          "name": "SubProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Sub/Sub.tsx",
            "name": "SubProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TypographyTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the HTML heading element.",
        "name": "ref",
        "parent": {
          "fileName": "src/typography/Sub/Sub.tsx",
          "name": "SubRef"
        },
        "declarations": [
          {
            "fileName": "src/typography/Sub/Sub.tsx",
            "name": "SubRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLHeadingElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/typography/Text/Text.tsx",
    "description": "",
    "displayName": "Text",
    "methods": [],
    "props": {
      "color": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Color variation of the text.",
        "name": "color",
        "parent": {
          "fileName": "src/typography/Text/Text.tsx",
          "name": "TextProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Text/Text.tsx",
            "name": "TextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "fontStyle": {
        "defaultValue": {
          "value": "default"
        },
        "description": "",
        "name": "fontStyle",
        "parent": {
          "fileName": "src/typography/Text/Text.tsx",
          "name": "TextProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Text/Text.tsx",
            "name": "TextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"thin\" | \"bold\" | \"extraBold\" | \"italic\""
        }
      },
      "variant": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Font variant for the text.",
        "name": "variant",
        "parent": {
          "fileName": "src/typography/Text/Text.tsx",
          "name": "TextProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Text/Text.tsx",
            "name": "TextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "\"default\" | \"mono\""
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Typography.",
        "name": "theme",
        "parent": {
          "fileName": "src/typography/Text/Text.tsx",
          "name": "TextProps"
        },
        "declarations": [
          {
            "fileName": "src/typography/Text/Text.tsx",
            "name": "TextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TypographyTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the HTML heading element.",
        "name": "ref",
        "parent": {
          "fileName": "src/typography/Text/Text.tsx",
          "name": "TextRef"
        },
        "declarations": [
          {
            "fileName": "src/typography/Text/Text.tsx",
            "name": "TextRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLSpanElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/ExitListener/useExitListener.tsx",
    "description": "Hook to listen for click outside and escape key events.",
    "displayName": "useExitListener",
    "methods": [],
    "props": {
      "ref": {
        "defaultValue": null,
        "description": "A ref object pointing to the target element that the hook should\nobserve for click outside and escape key events.",
        "name": "ref",
        "parent": {
          "fileName": "src/utils/ExitListener/useExitListener.tsx",
          "name": "ExitListenerOptions"
        },
        "declarations": [
          {
            "fileName": "src/utils/ExitListener/useExitListener.tsx",
            "name": "ExitListenerOptions"
          }
        ],
        "required": true,
        "type": {
          "name": "RefObject<HTMLElement> | MutableRefObject<HTMLElement>"
        }
      },
      "open": {
        "defaultValue": {
          "value": "true"
        },
        "description": "An optional boolean to enable or disable the event listeners.\nWhen set to true (default), the event listeners are active.",
        "name": "open",
        "parent": {
          "fileName": "src/utils/ExitListener/useExitListener.tsx",
          "name": "ExitListenerOptions"
        },
        "declarations": [
          {
            "fileName": "src/utils/ExitListener/useExitListener.tsx",
            "name": "ExitListenerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "An optional callback function that is called when a click\nevent occurs outside the target element.",
        "name": "onClickOutside",
        "parent": {
          "fileName": "src/utils/ExitListener/useExitListener.tsx",
          "name": "ExitListenerOptions"
        },
        "declarations": [
          {
            "fileName": "src/utils/ExitListener/useExitListener.tsx",
            "name": "ExitListenerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent) => void"
        }
      },
      "onEscape": {
        "defaultValue": null,
        "description": "An optional callback function that is called\nwhen the 'Escape' key is pressed.",
        "name": "onEscape",
        "parent": {
          "fileName": "src/utils/ExitListener/useExitListener.tsx",
          "name": "ExitListenerOptions"
        },
        "declarations": [
          {
            "fileName": "src/utils/ExitListener/useExitListener.tsx",
            "name": "ExitListenerOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Overlay/OverlayTrigger.tsx",
    "description": "",
    "displayName": "OverlayTrigger",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The children to be rendered within the overlay trigger.",
        "name": "children",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
          "name": "OverlayTriggerProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
            "name": "OverlayTriggerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The CSS class name to be applied to the overlay trigger.",
        "name": "className",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
          "name": "OverlayTriggerProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
            "name": "OverlayTriggerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "elementType": {
        "defaultValue": {
          "value": "span"
        },
        "description": "The type of element that will be used as the overlay trigger.",
        "name": "elementType",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
          "name": "OverlayTriggerProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
            "name": "OverlayTriggerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "trigger": {
        "defaultValue": {
          "value": "['click']"
        },
        "description": "The type(s) of event(s) that will trigger the overlay.\nCan be a single trigger type or an array of trigger types.",
        "name": "trigger",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
          "name": "OverlayTriggerProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
            "name": "OverlayTriggerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TriggerTypes | TriggerTypes[]"
        }
      },
      "onOpen": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "A function that is called when the overlay is opened.\nIt receives an object of type OverlayTriggerEvent as an argument.",
        "name": "onOpen",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
          "name": "OverlayTriggerProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
            "name": "OverlayTriggerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: OverlayTriggerEvent) => void"
        }
      },
      "onClose": {
        "defaultValue": {
          "value": "() => undefined"
        },
        "description": "A function that is called when the overlay is closed.\nIt receives an object of type OverlayTriggerEvent as an argument.",
        "name": "onClose",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
          "name": "OverlayTriggerProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
            "name": "OverlayTriggerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: OverlayTriggerEvent) => void"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayTrigger.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "LegacyRef<HTMLSpanElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Overlay/useOverlay.tsx",
    "description": "Hook for using the Overlay's context.",
    "displayName": "useOverlay",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "src/utils/Position/usePosition.tsx",
    "description": "Hook for positioning an element relative to another.",
    "displayName": "usePosition",
    "methods": [],
    "props": {
      "reference": {
        "defaultValue": null,
        "description": "",
        "name": "reference",
        "parent": {
          "fileName": "src/utils/Position/usePosition.tsx",
          "name": "PositionOptions"
        },
        "declarations": [
          {
            "fileName": "src/utils/Position/usePosition.tsx",
            "name": "PositionOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "Element | ReferenceObject"
        }
      },
      "floating": {
        "defaultValue": null,
        "description": "",
        "name": "floating",
        "parent": {
          "fileName": "src/utils/Position/usePosition.tsx",
          "name": "PositionOptions"
        },
        "declarations": [
          {
            "fileName": "src/utils/Position/usePosition.tsx",
            "name": "PositionOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "HTMLElement"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "top"
        },
        "description": "",
        "name": "placement",
        "parent": {
          "fileName": "src/utils/Position/usePosition.tsx",
          "name": "PositionOptions"
        },
        "declarations": [
          {
            "fileName": "src/utils/Position/usePosition.tsx",
            "name": "PositionOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "modifiers": {
        "defaultValue": {
          "value": "[flip(), shift({ limiter: limitShift() })]"
        },
        "description": "",
        "name": "modifiers",
        "parent": {
          "fileName": "src/utils/Position/usePosition.tsx",
          "name": "PositionOptions"
        },
        "declarations": [
          {
            "fileName": "src/utils/Position/usePosition.tsx",
            "name": "PositionOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "Modifiers"
        }
      },
      "followCursor": {
        "defaultValue": null,
        "description": "",
        "name": "followCursor",
        "parent": {
          "fileName": "src/utils/Position/usePosition.tsx",
          "name": "PositionOptions"
        },
        "declarations": [
          {
            "fileName": "src/utils/Position/usePosition.tsx",
            "name": "PositionOptions"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/ThemeProvider.tsx",
    "description": "",
    "displayName": "ThemeProvider",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "",
        "name": "theme",
        "parent": {
          "fileName": "src/utils/Theme/ThemeProvider.tsx",
          "name": "ThemeProviderProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/ThemeProvider.tsx",
            "name": "ThemeProviderProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReablocksTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
    "description": "",
    "displayName": "CommandPaletteInput",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The value of the input.",
        "name": "value",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
          "name": "CommandPaletteInputProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
            "name": "CommandPaletteInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "Placeholder text.",
        "name": "placeholder",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
          "name": "CommandPaletteInputProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
            "name": "CommandPaletteInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "Autofocus or not.",
        "name": "autoFocus",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
          "name": "CommandPaletteInputProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
            "name": "CommandPaletteInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": {
          "value": "<SearchIcon />"
        },
        "description": "Icon to show in the search input.",
        "name": "icon",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
          "name": "CommandPaletteInputProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
            "name": "CommandPaletteInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "hotkeys": {
        "defaultValue": null,
        "description": "Hotkeys set by CommandPalette from useFlattenedTree.",
        "name": "hotkeys",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
          "name": "CommandPaletteInputProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
            "name": "CommandPaletteInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "HotkeyIem[]"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "When the search input value changes.",
        "name": "onChange",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
          "name": "CommandPaletteInputProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
            "name": "CommandPaletteInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "onKeyPress": {
        "defaultValue": null,
        "description": "When a user presses a key.",
        "name": "onKeyPress",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
          "name": "CommandPaletteInputProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
            "name": "CommandPaletteInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(event: KeyboardEvent<HTMLInputElement>) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "When the input loses focus.",
        "name": "onBlur",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
          "name": "CommandPaletteInputProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
            "name": "CommandPaletteInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(event: FocusEvent<HTMLInputElement, Element>) => void"
        }
      },
      "onHotkey": {
        "defaultValue": null,
        "description": "When a hotkey was triggered. Used internally.",
        "name": "onHotkey",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
          "name": "CommandPaletteInputProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
            "name": "CommandPaletteInputProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(hotkey: HotkeyIem) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Command Palette.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
          "name": "CommandPaletteInputProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteInput/CommandPaletteInput.tsx",
            "name": "CommandPaletteInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CommandPaletteTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/CommandPalette/CommandPaletteInput/SearchIcon.tsx",
    "description": "",
    "displayName": "SearchIcon",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "src/elements/CommandPalette/CommandPaletteItem/CommandPaletteItem.tsx",
    "description": "",
    "displayName": "CommandPaletteItem",
    "methods": [],
    "props": {
      "hotkey": {
        "defaultValue": null,
        "description": "",
        "name": "hotkey",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteItem/CommandPaletteItem.tsx",
          "name": "CommandPaletteItemProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteItem/CommandPaletteItem.tsx",
            "name": "CommandPaletteItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the CommandPalette.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteItem/CommandPaletteItem.tsx",
          "name": "CommandPaletteItemProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteItem/CommandPaletteItem.tsx",
            "name": "CommandPaletteItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CommandPaletteTheme"
        }
      },
      "active": {
        "defaultValue": null,
        "description": "Whether the item is active or not.",
        "name": "active",
        "parent": {
          "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the item is disabled or not.",
        "name": "disabled",
        "parent": {
          "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disablePadding": {
        "defaultValue": null,
        "description": "Disable the padding ( including gutters ).",
        "name": "disablePadding",
        "parent": {
          "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableGutters": {
        "defaultValue": null,
        "description": "Disable the gutters ( left + right padding ).",
        "name": "disableGutters",
        "parent": {
          "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dense": {
        "defaultValue": null,
        "description": "Whether the item data is dense and reduce the padding.",
        "name": "dense",
        "parent": {
          "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "Class name for the content element.",
        "name": "contentClassName",
        "parent": {
          "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "A start component for the list item.",
        "name": "start",
        "parent": {
          "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "A end component for the list item.",
        "name": "end",
        "parent": {
          "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "reablocks/src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/elements/CommandPalette/CommandPaletteSection/CommandPaletteSection.tsx",
    "description": "",
    "displayName": "CommandPaletteSection",
    "methods": [],
    "props": {
      "title": {
        "defaultValue": null,
        "description": "Section title.",
        "name": "title",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteSection/CommandPaletteSection.tsx",
          "name": "CommandPaletteSectionProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteSection/CommandPaletteSection.tsx",
            "name": "CommandPaletteSectionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class name.",
        "name": "className",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteSection/CommandPaletteSection.tsx",
          "name": "CommandPaletteSectionProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteSection/CommandPaletteSection.tsx",
            "name": "CommandPaletteSectionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Section stack index. Set internally.",
        "name": "index",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteSection/CommandPaletteSection.tsx",
          "name": "CommandPaletteSectionProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteSection/CommandPaletteSection.tsx",
            "name": "CommandPaletteSectionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the CommandPalette.",
        "name": "theme",
        "parent": {
          "fileName": "src/elements/CommandPalette/CommandPaletteSection/CommandPaletteSection.tsx",
          "name": "CommandPaletteSectionProps"
        },
        "declarations": [
          {
            "fileName": "src/elements/CommandPalette/CommandPaletteSection/CommandPaletteSection.tsx",
            "name": "CommandPaletteSectionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CommandPaletteTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
    "description": "",
    "displayName": "CalendarDays",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The currently displayed month of the calendar.",
        "name": "value",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "current": {
        "defaultValue": null,
        "description": "The currently selected date(s).",
        "name": "current",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date | [Date, Date] | [Date, undefined] | [undefined, undefined]"
        }
      },
      "hover": {
        "defaultValue": {
          "value": "null"
        },
        "description": "The currently hovered date.",
        "name": "hover",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "min": {
        "defaultValue": null,
        "description": "The minimum selectable date for the calendar, as a Date object.",
        "name": "min",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date"
        }
      },
      "max": {
        "defaultValue": null,
        "description": "The maximum selectable date for the calendar, as a Date object or the string 'now'.",
        "name": "max",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Date | \"now\""
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the calendar is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hidePrevMonthDays": {
        "defaultValue": null,
        "description": "Whether to display days of previous month.",
        "name": "hidePrevMonthDays",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideNextMonthDays": {
        "defaultValue": null,
        "description": "Whether to display days of next month.",
        "name": "hideNextMonthDays",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showDayOfWeek": {
        "defaultValue": null,
        "description": "Whether to display day of week labels.",
        "name": "showDayOfWeek",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showToday": {
        "defaultValue": null,
        "description": "Whether to highlight the today.",
        "name": "showToday",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dayOfWeekLabels": {
        "defaultValue": {
          "value": "getDayLabels()"
        },
        "description": "Customize the labels for the days of the week.",
        "name": "dayOfWeekLabels",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string[]"
        }
      },
      "isRange": {
        "defaultValue": null,
        "description": "Whether the calendar is a range picker.",
        "name": "isRange",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "range": {
        "defaultValue": null,
        "description": "Range of selected dates",
        "name": "range",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "[Date, Date] | [Date, undefined] | [undefined, undefined]"
        }
      },
      "xAnimation": {
        "defaultValue": {
          "value": "0"
        },
        "description": "X-axis block animation",
        "name": "xAnimation",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the calendar.",
        "name": "animated",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback function that is called when a day is selected.",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(date: Date) => void"
        }
      },
      "onHover": {
        "defaultValue": null,
        "description": "A callback function that is called when a day is hovered.",
        "name": "onHover",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(date: Date) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the CalendarDays.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
          "name": "CalendarDaysProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarDays/CalendarDays.tsx",
            "name": "CalendarDaysProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalendarTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Calendar/CalendarMonths/CalendarMonths.tsx",
    "description": "",
    "displayName": "CalendarMonths",
    "methods": [],
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The currently displayed month of the calendar.",
        "name": "value",
        "parent": {
          "fileName": "src/form/Calendar/CalendarMonths/CalendarMonths.tsx",
          "name": "CalendarMonthsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarMonths/CalendarMonths.tsx",
            "name": "CalendarMonthsProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback function that is called when a day is selected.",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/Calendar/CalendarMonths/CalendarMonths.tsx",
          "name": "CalendarMonthsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarMonths/CalendarMonths.tsx",
            "name": "CalendarMonthsProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(month: number) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the CalendarMonths.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Calendar/CalendarMonths/CalendarMonths.tsx",
          "name": "CalendarMonthsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarMonths/CalendarMonths.tsx",
            "name": "CalendarMonthsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalendarTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
    "description": "",
    "displayName": "CalendarYears",
    "methods": [],
    "props": {
      "decadeStart": {
        "defaultValue": null,
        "description": "The start date of the decade to display.",
        "name": "decadeStart",
        "parent": {
          "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
          "name": "CalendarYearsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
            "name": "CalendarYearsProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "decadeEnd": {
        "defaultValue": null,
        "description": "The end date of the decade to display.",
        "name": "decadeEnd",
        "parent": {
          "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
          "name": "CalendarYearsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
            "name": "CalendarYearsProps"
          }
        ],
        "required": true,
        "type": {
          "name": "Date"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The currently selected year.",
        "name": "value",
        "parent": {
          "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
          "name": "CalendarYearsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
            "name": "CalendarYearsProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "xAnimation": {
        "defaultValue": {
          "value": "0"
        },
        "description": "X-axis block animation",
        "name": "xAnimation",
        "parent": {
          "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
          "name": "CalendarYearsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
            "name": "CalendarYearsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "animated": {
        "defaultValue": null,
        "description": "Whether to animate the calendar.",
        "name": "animated",
        "parent": {
          "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
          "name": "CalendarYearsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
            "name": "CalendarYearsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "A callback function that is called when a year is selected.",
        "name": "onChange",
        "parent": {
          "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
          "name": "CalendarYearsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
            "name": "CalendarYearsProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(year: number) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the CalendarYears.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
          "name": "CalendarYearsProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Calendar/CalendarYears/CalendarYears.tsx",
            "name": "CalendarYearsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CalendarTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Input/DebouncedInput/DebouncedInput.tsx",
    "description": "",
    "displayName": "DebouncedInput",
    "methods": [],
    "props": {
      "debounce": {
        "defaultValue": {
          "value": "100"
        },
        "description": "The debounce time in milliseconds. Defaults to 100.",
        "name": "debounce",
        "parent": {
          "fileName": "src/form/Input/DebouncedInput/DebouncedInput.tsx",
          "name": "DebouncedInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/DebouncedInput/DebouncedInput.tsx",
            "name": "DebouncedInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "fullWidth": {
        "defaultValue": null,
        "description": "If true, the input will take up the full width of its container.",
        "name": "fullWidth",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selectOnFocus": {
        "defaultValue": null,
        "description": "If true, the input will be focused during the first mount.",
        "name": "selectOnFocus",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "If true, the input will show an error state.",
        "name": "error",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "containerClassname": {
        "defaultValue": null,
        "description": "Additional classname for the input container element.",
        "name": "containerClassname",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "Size of the input.",
        "name": "size",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "Content to display before the input.\n@deprecated Use `startAdornment` instead.",
        "name": "start",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "Content to display after the input.\n@deprecated Use `endAdornment` instead.",
        "name": "end",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "startAdornment": {
        "defaultValue": null,
        "description": "Element to display before the Button content.",
        "name": "startAdornment",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "endAdornment": {
        "defaultValue": null,
        "description": "Element to display after the Button content.",
        "name": "endAdornment",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onValueChange": {
        "defaultValue": null,
        "description": "Shortcut for the onChange value event.",
        "name": "onValueChange",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Input.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Input/Input.tsx",
          "name": "InputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/Input.tsx",
            "name": "InputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InputTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Input/InlineInput/InlineInput.tsx",
    "description": "",
    "displayName": "InlineInput",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Additional className for the input container",
        "name": "className",
        "parent": {
          "fileName": "src/form/Input/InlineInput/InlineInput.tsx",
          "name": "InlineInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/InlineInput/InlineInput.tsx",
            "name": "InlineInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "extraWidth": {
        "defaultValue": null,
        "description": "Additional width for input element",
        "name": "extraWidth",
        "parent": {
          "fileName": "src/form/Input/InlineInput/InlineInput.tsx",
          "name": "InlineInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/InlineInput/InlineInput.tsx",
            "name": "InlineInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "inputClassName": {
        "defaultValue": null,
        "description": "Additional className for the input element",
        "name": "inputClassName",
        "parent": {
          "fileName": "src/form/Input/InlineInput/InlineInput.tsx",
          "name": "InlineInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/InlineInput/InlineInput.tsx",
            "name": "InlineInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the InlineInput.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Input/InlineInput/InlineInput.tsx",
          "name": "InlineInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/InlineInput/InlineInput.tsx",
            "name": "InlineInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "InputTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the input element.",
        "name": "ref",
        "parent": {
          "fileName": "src/form/Input/InlineInput/InlineInput.tsx",
          "name": "InlineInputRef"
        },
        "declarations": [
          {
            "fileName": "src/form/Input/InlineInput/InlineInput.tsx",
            "name": "InlineInputRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLInputElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Select/SelectInput/SelectInput.tsx",
    "description": "",
    "displayName": "SelectInput",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "The id of the select input.",
        "name": "id",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "The name of the select input.",
        "name": "name",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "required": {
        "defaultValue": null,
        "description": "If true, the select input is required.",
        "name": "required",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "options": {
        "defaultValue": null,
        "description": "The options for the select input.",
        "name": "options",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SelectOptionProps[]"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "If true, the select input is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "menuOpen": {
        "defaultValue": null,
        "description": "If true, the select input menu is open.",
        "name": "menuOpen",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inputText": {
        "defaultValue": null,
        "description": "The input text of the select input.",
        "name": "inputText",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeOnSelect": {
        "defaultValue": null,
        "description": "If true, the select input will close on select.",
        "name": "closeOnSelect",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "selectedOption": {
        "defaultValue": null,
        "description": "The selected option of the select input.",
        "name": "selectedOption",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SelectOptionProps | SelectOptionProps[]"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "If true, the select input will auto focus.",
        "name": "autoFocus",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The class name of the select input.",
        "name": "className",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activeClassName": {
        "defaultValue": null,
        "description": "The active class name of the select input.",
        "name": "activeClassName",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "createable": {
        "defaultValue": null,
        "description": "If true, the select input is createable.",
        "name": "createable",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "filterable": {
        "defaultValue": null,
        "description": "If true, the select input is filterable.",
        "name": "filterable",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"async\""
        }
      },
      "multiple": {
        "defaultValue": null,
        "description": "If true, the select input allows multiple selection.",
        "name": "multiple",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "If true, the select input is loading.",
        "name": "loading",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "reference": {
        "defaultValue": null,
        "description": "The reference of the select input.",
        "name": "reference",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<SelectInputRef>"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "The placeholder of the select input.",
        "name": "placeholder",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "If true, the select input has an error.",
        "name": "error",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "If true, the select input is clearable.",
        "name": "clearable",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "refreshable": {
        "defaultValue": null,
        "description": "If true, the select input is refreshable.",
        "name": "refreshable",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "menuDisabled": {
        "defaultValue": null,
        "description": "If true, the select input menu is disabled.",
        "name": "menuDisabled",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the select input.",
        "name": "size",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "The theme of the select input.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SelectTheme"
        }
      },
      "closeIcon": {
        "defaultValue": {
          "value": "<CloseIcon />"
        },
        "description": "The close icon of the select input.",
        "name": "closeIcon",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "refreshIcon": {
        "defaultValue": {
          "value": "<RefreshIcon />"
        },
        "description": "The refresh icon of the select input.",
        "name": "refreshIcon",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "expandIcon": {
        "defaultValue": {
          "value": "<DownArrowIcon />"
        },
        "description": "The expand icon of the select input.",
        "name": "expandIcon",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "loadingIcon": {
        "defaultValue": {
          "value": "<DotsLoader size=\"small\" />"
        },
        "description": "The loading icon of the select input.",
        "name": "loadingIcon",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "chip": {
        "defaultValue": {
          "value": "<SelectInputChip />"
        },
        "description": "The chip of the select input.",
        "name": "chip",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<SelectInputChipProps, FC<SelectInputChipProps>>"
        }
      },
      "onSelectedChange": {
        "defaultValue": null,
        "description": "The function to handle selected change.",
        "name": "onSelectedChange",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(option: SelectValue) => void"
        }
      },
      "onExpandClick": {
        "defaultValue": null,
        "description": "The function to handle expand click.",
        "name": "onExpandClick",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: MouseEvent<Element, MouseEvent>) => void"
        }
      },
      "onKeyDown": {
        "defaultValue": null,
        "description": "The function to handle key down.",
        "name": "onKeyDown",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent<HTMLInputElement>) => void"
        }
      },
      "onKeyUp": {
        "defaultValue": null,
        "description": "The function to handle key up.",
        "name": "onKeyUp",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent<HTMLInputElement>) => void"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "The function to handle focus.",
        "name": "onFocus",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: FocusEvent<HTMLInputElement, Element> | MouseEvent<HTMLDivElement, MouseEvent>) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "The function to handle blur.",
        "name": "onBlur",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: FocusEvent<HTMLInputElement, Element>) => void"
        }
      },
      "onInputChange": {
        "defaultValue": null,
        "description": "The function to handle input change.",
        "name": "onInputChange",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "onPaste": {
        "defaultValue": null,
        "description": "The function to handle input paste event.",
        "name": "onPaste",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ClipboardEvent<HTMLInputElement>) => void"
        }
      },
      "onRefresh": {
        "defaultValue": null,
        "description": "The function to handle refresh.",
        "name": "onRefresh",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "The function to handle clear event.",
        "name": "onClear",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
          "name": "SelectInputProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInput.tsx",
            "name": "SelectInputProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Select/SelectInput/SelectInputChip.tsx",
    "description": "",
    "displayName": "SelectInputChip",
    "methods": [],
    "props": {
      "option": {
        "defaultValue": null,
        "description": "The option to render as a chip.",
        "name": "option",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
          "name": "SelectInputChipProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
            "name": "SelectInputChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SelectOptionProps"
        }
      },
      "maxLength": {
        "defaultValue": {
          "value": "20"
        },
        "description": "The maximum length of the chip.",
        "name": "maxLength",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
          "name": "SelectInputChipProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
            "name": "SelectInputChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class names to apply to the chip.",
        "name": "className",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
          "name": "SelectInputChipProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
            "name": "SelectInputChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the chip is disabled or not.",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
          "name": "SelectInputChipProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
            "name": "SelectInputChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clearable": {
        "defaultValue": null,
        "description": "Whether the chip is clearable or not.",
        "name": "clearable",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
          "name": "SelectInputChipProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
            "name": "SelectInputChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Select.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
          "name": "SelectInputChipProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
            "name": "SelectInputChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SelectTheme"
        }
      },
      "closeIcon": {
        "defaultValue": {
          "value": "<CloseIcon />"
        },
        "description": "The close icon for the chip.",
        "name": "closeIcon",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
          "name": "SelectInputChipProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
            "name": "SelectInputChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "onTagKeyDown": {
        "defaultValue": null,
        "description": "Callback for when a key is pressed on the chip.",
        "name": "onTagKeyDown",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
          "name": "SelectInputChipProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
            "name": "SelectInputChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: KeyboardEvent<HTMLSpanElement>, option: SelectOptionProps) => void"
        }
      },
      "onSelectedChange": {
        "defaultValue": null,
        "description": "Callback for when the selected option changes.",
        "name": "onSelectedChange",
        "parent": {
          "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
          "name": "SelectInputChipProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectInput/SelectInputChip.tsx",
            "name": "SelectInputChipProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(option: SelectOptionProps) => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Select/SelectMenu/SelectMenu.tsx",
    "description": "",
    "displayName": "SelectMenu",
    "methods": [],
    "props": {
      "id": {
        "defaultValue": null,
        "description": "The id of the select.",
        "name": "id",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "options": {
        "defaultValue": null,
        "description": "Options passed to the select.",
        "name": "options",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SelectOptionProps[]"
        }
      },
      "selectedOption": {
        "defaultValue": null,
        "description": "The selected option(s).",
        "name": "selectedOption",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SelectOptionProps | SelectOptionProps[]"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional CSS styles to apply to the select menu.",
        "name": "style",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the menu is disabled or not.",
        "name": "disabled",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "groups": {
        "defaultValue": null,
        "description": "The groups of options.",
        "name": "groups",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "GroupOptions"
        }
      },
      "createable": {
        "defaultValue": null,
        "description": "Whether users can create options or not.",
        "name": "createable",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "renderCreateOption": {
        "defaultValue": null,
        "description": "Function to render the create option.",
        "name": "renderCreateOption",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "({ text, onCreate }: RenderCreateOptionArgs) => ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Additional class names to apply to the select menu.",
        "name": "className",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "multiple": {
        "defaultValue": null,
        "description": "Whether the menu can select multiples or not.",
        "name": "multiple",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "Internal active index of the keyboard position.",
        "name": "index",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "inputSearchText": {
        "defaultValue": null,
        "description": "The input's search text to use for highlighting.",
        "name": "inputSearchText",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "filterable": {
        "defaultValue": null,
        "description": "Whether users can filter the options or not.",
        "name": "filterable",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"async\""
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "Whether the component is loading or not.",
        "name": "loading",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the select menu.",
        "name": "size",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "checkIcon": {
        "defaultValue": null,
        "description": "Icon displayed for checked elements of the list",
        "name": "checkIcon",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "onSelectedChange": {
        "defaultValue": null,
        "description": "Event fired when the selected option(s) change.",
        "name": "onSelectedChange",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(option: SelectValue) => void"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "The theme for the Select.",
        "name": "theme",
        "parent": {
          "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
          "name": "SelectMenuProps"
        },
        "declarations": [
          {
            "fileName": "src/form/Select/SelectMenu/SelectMenu.tsx",
            "name": "SelectMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "SelectTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Select/icons/CheckIcon.tsx",
    "description": "",
    "displayName": "CheckIcon",
    "methods": [],
    "props": {
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "declarations": [
          {
            "fileName": "src/form/Select/icons/CheckIcon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Select/icons/CloseIcon.tsx",
    "description": "",
    "displayName": "CloseIcon",
    "methods": [],
    "props": {
      "height": {
        "defaultValue": {
          "value": "16"
        },
        "description": "",
        "name": "height",
        "declarations": [
          {
            "fileName": "src/form/Select/icons/CloseIcon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "width": {
        "defaultValue": {
          "value": "16"
        },
        "description": "",
        "name": "width",
        "declarations": [
          {
            "fileName": "src/form/Select/icons/CloseIcon.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/form/Select/icons/DownArrowIcon.tsx",
    "description": "",
    "displayName": "DownArrowIcon",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "src/form/Select/icons/RefreshIcon.tsx",
    "description": "",
    "displayName": "RefreshIcon",
    "methods": [],
    "props": {}
  },
  {
    "tags": {},
    "filePath": "src/layout/List/ListHeader/ListHeader.tsx",
    "description": "",
    "displayName": "ListHeader",
    "methods": [],
    "props": {
      "theme": {
        "defaultValue": null,
        "description": "Theme for the List.",
        "name": "theme",
        "declarations": [
          {
            "fileName": "src/layout/List/ListHeader/ListHeader.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "ListTheme"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/List/ListItem/ListItem.tsx",
    "description": "",
    "displayName": "ListItem",
    "methods": [],
    "props": {
      "active": {
        "defaultValue": null,
        "description": "Whether the item is active or not.",
        "name": "active",
        "parent": {
          "fileName": "src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the item is disabled or not.",
        "name": "disabled",
        "parent": {
          "fileName": "src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disablePadding": {
        "defaultValue": null,
        "description": "Disable the padding ( including gutters ).",
        "name": "disablePadding",
        "parent": {
          "fileName": "src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableGutters": {
        "defaultValue": null,
        "description": "Disable the gutters ( left + right padding ).",
        "name": "disableGutters",
        "parent": {
          "fileName": "src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "dense": {
        "defaultValue": null,
        "description": "Whether the item data is dense and reduce the padding.",
        "name": "dense",
        "parent": {
          "fileName": "src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "Class name for the content element.",
        "name": "contentClassName",
        "parent": {
          "fileName": "src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "start": {
        "defaultValue": null,
        "description": "A start component for the list item.",
        "name": "start",
        "parent": {
          "fileName": "src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "end": {
        "defaultValue": null,
        "description": "A end component for the list item.",
        "name": "end",
        "parent": {
          "fileName": "src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactNode"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the List.",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ListTheme"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the list item element.",
        "name": "ref",
        "parent": {
          "fileName": "src/layout/List/ListItem/ListItem.tsx",
          "name": "ListItemRef"
        },
        "declarations": [
          {
            "fileName": "src/layout/List/ListItem/ListItem.tsx",
            "name": "ListItemRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLDivElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tree/JsonTree/JsonTree.tsx",
    "description": "",
    "displayName": "JsonTree",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "The data to be rendered as a JSON tree.",
        "name": "data",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": true,
        "type": {
          "name": "{ [key: string]: any; }"
        }
      },
      "showAll": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, all nodes in the JSON tree will be expanded by default.",
        "name": "showAll",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showAllLimit": {
        "defaultValue": {
          "value": "10"
        },
        "description": "The limit for the number of nodes to show when `showAll` is false.",
        "name": "showAllLimit",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showCount": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the count of child nodes will be shown next to each node.",
        "name": "showCount",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showEmpty": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, empty nodes will be shown in the JSON tree.",
        "name": "showEmpty",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ellipsisText": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, long text in nodes will be truncated and replaced with an ellipsis.",
        "name": "ellipsisText",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ellipsisTextLength": {
        "defaultValue": {
          "value": "150"
        },
        "description": "The maximum length of text in a node before it is truncated and replaced with an ellipsis.",
        "name": "ellipsisTextLength",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "expandDepth": {
        "defaultValue": {
          "value": "2"
        },
        "description": "The depth at which the JSON tree nodes should be expanded by default.",
        "name": "expandDepth",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "root": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the JSON tree will be rendered with a root node.",
        "name": "root",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The CSS class name to be applied to the JSON tree.",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
          "name": "JsonTreeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTree.tsx",
            "name": "JsonTreeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
    "description": "",
    "displayName": "JsonTreeNode",
    "methods": [],
    "props": {
      "data": {
        "defaultValue": null,
        "description": "The data to be rendered as a JSON tree.",
        "name": "data",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "JsonTreeData"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The CSS class name to be applied to the JSON tree node.",
        "name": "className",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showCount": {
        "defaultValue": null,
        "description": "If true, the count of child nodes will be shown next to each node.",
        "name": "showCount",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showEmpty": {
        "defaultValue": null,
        "description": "If true, empty nodes will be shown in the JSON tree.",
        "name": "showEmpty",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "depth": {
        "defaultValue": null,
        "description": "The depth of the JSON tree node. This is typically used for indentation purposes.",
        "name": "depth",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showAll": {
        "defaultValue": null,
        "description": "If true, all nodes in the JSON tree will be expanded by default.",
        "name": "showAll",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showAllLimit": {
        "defaultValue": null,
        "description": "The limit for the number of nodes to show when `showAll` is false.",
        "name": "showAllLimit",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "expandDepth": {
        "defaultValue": null,
        "description": "The depth at which the JSON tree nodes should be expanded by default.",
        "name": "expandDepth",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "theme": {
        "defaultValue": null,
        "description": "Theme for the Json Tree",
        "name": "theme",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "JsonTreeTheme"
        }
      },
      "ellipsisText": {
        "defaultValue": null,
        "description": "If true, long text in nodes will be truncated and replaced with an ellipsis.",
        "name": "ellipsisText",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ellipsisTextLength": {
        "defaultValue": null,
        "description": "The maximum length of text in a node before it is truncated and replaced with an ellipsis.",
        "name": "ellipsisTextLength",
        "parent": {
          "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
          "name": "JsonTreeNodeProps"
        },
        "declarations": [
          {
            "fileName": "src/layout/Tree/JsonTree/JsonTreeNode.tsx",
            "name": "JsonTreeNodeProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
    "description": "",
    "displayName": "ConnectedOverlay",
    "methods": [],
    "props": {
      "open": {
        "defaultValue": null,
        "description": "Whether the overlay should be visible.",
        "name": "open",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "reference": {
        "defaultValue": null,
        "description": "Reference of the overlay to align to.",
        "name": "reference",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReferenceProp"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The content of the overlay.",
        "name": "children",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "Content to render in the overlay.",
        "name": "content",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "trigger": {
        "defaultValue": {
          "value": "'click' as TriggerTypes"
        },
        "description": "Type of trigger to open the overlay.",
        "name": "trigger",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TriggerTypes | TriggerTypes[]"
        }
      },
      "triggerElement": {
        "defaultValue": null,
        "description": "Trigger element to open the overlay.",
        "name": "triggerElement",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "triggerClassName": {
        "defaultValue": null,
        "description": "Trigger classname.",
        "name": "triggerClassName",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "Portal classname.",
        "name": "portalClassName",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeOnBodyClick": {
        "defaultValue": null,
        "description": "Close when the body is clicked or not.",
        "name": "closeOnBodyClick",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": null,
        "description": "Close when escape is pressed or not.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "appendToBody": {
        "defaultValue": null,
        "description": "Append the overlay to the body. Almost always want this.",
        "name": "appendToBody",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "elementType": {
        "defaultValue": null,
        "description": "Overlay element type.",
        "name": "elementType",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "modifiers": {
        "defaultValue": null,
        "description": "Position modifiers.",
        "name": "modifiers",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Modifiers"
        }
      },
      "followCursor": {
        "defaultValue": null,
        "description": "Overlay should follow cursor or not.",
        "name": "followCursor",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placement": {
        "defaultValue": null,
        "description": "Placement of the overlay.",
        "name": "placement",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "onOpen": {
        "defaultValue": null,
        "description": "Event called when the overlay is opened.",
        "name": "onOpen",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event?: any) => void"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Event called when the overlay is closed.",
        "name": "onClose",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
          "name": "ConnectedOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "ConnectedOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event?: any) => void"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlay.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<ConnectedOverlayContentRef>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
    "description": "",
    "displayName": "ConnectedOverlayContent",
    "methods": [],
    "props": {
      "modifiers": {
        "defaultValue": null,
        "description": "Modifiers to adjust the behavior of the overlay content.",
        "name": "modifiers",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Modifiers"
        }
      },
      "followCursor": {
        "defaultValue": null,
        "description": "If true, the overlay content will follow the cursor.",
        "name": "followCursor",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "portalClassName": {
        "defaultValue": null,
        "description": "The CSS class name to be applied to the portal of the overlay content.",
        "name": "portalClassName",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "placement": {
        "defaultValue": {
          "value": "bottom"
        },
        "description": "The placement of the overlay content relative to the trigger.",
        "name": "placement",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Placement"
        }
      },
      "triggerRef": {
        "defaultValue": null,
        "description": "A reference to the trigger element.",
        "name": "triggerRef",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The children to be rendered within the overlay content.",
        "name": "children",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "closeOnBodyClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the overlay content will close when a click is detected on the body.",
        "name": "closeOnBodyClick",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the overlay content will close when the escape key is pressed.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "elementType": {
        "defaultValue": null,
        "description": "The type of element that will be used as the overlay content.",
        "name": "elementType",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "appendToBody": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the overlay content will be appended to the body.",
        "name": "appendToBody",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "A function that is called when the overlay content is closed. It receives an optional event object as an argument.",
        "name": "onClose",
        "parent": {
          "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
          "name": "ConnectedOverlayContentProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "ConnectedOverlayContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event?: any) => void"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "",
        "name": "ref",
        "declarations": [
          {
            "fileName": "src/utils/Overlay/ConnectedOverlay/ConnectedOverlayContent.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<ConnectedOverlayContentRef>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
    "description": "",
    "displayName": "GlobalOverlay",
    "methods": [],
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The children to be rendered within the global overlay.",
        "name": "children",
        "parent": {
          "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "If true, the global overlay is open.",
        "name": "open",
        "parent": {
          "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "closeOnBackdropClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the global overlay will close when the backdrop is clicked.",
        "name": "closeOnBackdropClick",
        "parent": {
          "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hasBackdrop": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the global overlay will have a backdrop.",
        "name": "hasBackdrop",
        "parent": {
          "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "backdropClassName": {
        "defaultValue": null,
        "description": "The CSS class name to be applied to the backdrop of the global overlay.",
        "name": "backdropClassName",
        "parent": {
          "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeOnEscape": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the global overlay will close when the escape key is pressed.",
        "name": "closeOnEscape",
        "parent": {
          "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "A function that is called when the global overlay is closed.",
        "name": "onClose",
        "parent": {
          "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
          "name": "GlobalOverlayProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/GlobalOverlay/GlobalOverlay.tsx",
            "name": "GlobalOverlayProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
    "description": "",
    "displayName": "OverlayPortal",
    "methods": [],
    "props": {
      "appendToBody": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the overlay portal will be appended to the body.",
        "name": "appendToBody",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
          "name": "OverlayPortalProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
            "name": "OverlayPortalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "The class name of the overlay portal.",
        "name": "className",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
          "name": "OverlayPortalProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
            "name": "OverlayPortalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "The style of the overlay portal.",
        "name": "style",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
          "name": "OverlayPortalProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
            "name": "OverlayPortalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "The id of the overlay portal.",
        "name": "id",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
          "name": "OverlayPortalProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
            "name": "OverlayPortalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "A function that returns the children of the overlay portal. It receives an object of type OverlayPortalMountEvent as an argument.",
        "name": "children",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
          "name": "OverlayPortalProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
            "name": "OverlayPortalProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(props: OverlayPortalMountEvent) => any"
        }
      },
      "onMount": {
        "defaultValue": null,
        "description": "A function that is called when the overlay portal mounts. It receives an object of type OverlayPortalMountEvent as an argument.",
        "name": "onMount",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
          "name": "OverlayPortalProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
            "name": "OverlayPortalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: OverlayPortalMountEvent) => void"
        }
      },
      "onUnmount": {
        "defaultValue": null,
        "description": "A function that is called when the overlay portal unmounts.",
        "name": "onUnmount",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
          "name": "OverlayPortalProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
            "name": "OverlayPortalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the overlay portal element.",
        "name": "ref",
        "parent": {
          "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
          "name": "OverlayPortalRef"
        },
        "declarations": [
          {
            "fileName": "src/utils/Overlay/OverlayPortal/OverlayPortal.tsx",
            "name": "OverlayPortalRef"
          }
        ],
        "required": false,
        "type": {
          "name": "LegacyRef<HTMLElement>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/BorderBlocks.tsx",
    "description": "",
    "displayName": "BorderBlocks",
    "methods": [],
    "props": {
      "borders": {
        "defaultValue": null,
        "description": "",
        "name": "borders",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/ColorBlocks.tsx",
    "description": "",
    "displayName": "ColorBlock",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorBlockProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorBlockProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorBlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/ColorBlocks.tsx",
    "description": "",
    "displayName": "ColorPaletteBlock",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorPaletteBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorPaletteBlockProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "",
        "name": "color",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorPaletteBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorPaletteBlockProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorPaletteBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorPaletteBlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showName": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "showName",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorPaletteBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorPaletteBlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/ColorBlocks.tsx",
    "description": "",
    "displayName": "ColorPaletteBlocks",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorPaletteBlocksProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorPaletteBlocksProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "colors": {
        "defaultValue": null,
        "description": "",
        "name": "colors",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorPaletteBlocksProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorPaletteBlocksProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string | Record<string, string>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorPaletteBlocksProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorPaletteBlocksProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "token": {
        "defaultValue": null,
        "description": "",
        "name": "token",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorPaletteBlocksProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorPaletteBlocksProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "showNames": {
        "defaultValue": {
          "value": "true"
        },
        "description": "",
        "name": "showNames",
        "parent": {
          "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
          "name": "ColorPaletteBlocksProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "ColorPaletteBlocksProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/ColorBlocks.tsx",
    "description": "",
    "displayName": "ColorBlocks",
    "methods": [],
    "props": {
      "colors": {
        "defaultValue": null,
        "description": "",
        "name": "colors",
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ColorBlocks.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "ResolvableTo<RecursiveKeyValuePair<string, string>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/ComponentBlocks.tsx",
    "description": "",
    "displayName": "ComponentBlocks",
    "methods": [],
    "props": {
      "components": {
        "defaultValue": null,
        "description": "",
        "name": "components",
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/ComponentBlocks.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "{ avatar: AvatarTheme; avatarGroup: AvatarGroupTheme; arrow: ArrowTheme; badge: BadgeTheme; button: ButtonTheme; ... 39 more ...; backdrop: BackdropTheme; }"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/IconBlocks.tsx",
    "description": "",
    "displayName": "IconBlock",
    "methods": [],
    "props": {
      "name": {
        "defaultValue": null,
        "description": "",
        "name": "name",
        "parent": {
          "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
          "name": "IconBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
            "name": "IconBlockProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "component": {
        "defaultValue": null,
        "description": "",
        "name": "component",
        "parent": {
          "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
          "name": "IconBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
            "name": "IconBlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "src": {
        "defaultValue": null,
        "description": "",
        "name": "src",
        "parent": {
          "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
          "name": "IconBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
            "name": "IconBlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
          "name": "IconBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
            "name": "IconBlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/IconBlocks.tsx",
    "description": "",
    "displayName": "IconBlocks",
    "methods": [],
    "props": {
      "icons": {
        "defaultValue": null,
        "description": "",
        "name": "icons",
        "parent": {
          "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
          "name": "IconBlocksProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
            "name": "IconBlocksProps"
          }
        ],
        "required": true,
        "type": {
          "name": "IconBlockProps[]"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
          "name": "IconBlocksProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/IconBlocks.tsx",
            "name": "IconBlocksProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/PaletteBlocks.tsx",
    "description": "",
    "displayName": "PaletteBlocks",
    "methods": [],
    "props": {
      "palettes": {
        "defaultValue": null,
        "description": "",
        "name": "palettes",
        "parent": {
          "fileName": "src/utils/Theme/blocks/PaletteBlocks.tsx",
          "name": "PaletteBlocksProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/PaletteBlocks.tsx",
            "name": "PaletteBlocksProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ResolvableTo<RecursiveKeyValuePair<string, string>>"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/ShadowBlocks.tsx",
    "description": "",
    "displayName": "ShadowBlocks",
    "methods": [],
    "props": {
      "shadows": {
        "defaultValue": null,
        "description": "",
        "name": "shadows",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/SpacingBlocks.tsx",
    "description": "",
    "displayName": "SpacingBlocks",
    "methods": [],
    "props": {
      "spacings": {
        "defaultValue": null,
        "description": "",
        "name": "spacings",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/TypographyBlocks.tsx",
    "description": "",
    "displayName": "TypographyLetterBlock",
    "methods": [],
    "props": {
      "fontFamily": {
        "defaultValue": null,
        "description": "",
        "name": "fontFamily",
        "parent": {
          "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
          "name": "TypographyLetterBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
            "name": "TypographyLetterBlockProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
          "name": "TypographyLetterBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
            "name": "TypographyLetterBlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/TypographyBlocks.tsx",
    "description": "",
    "displayName": "TypographySizeBlock",
    "methods": [],
    "props": {
      "sizes": {
        "defaultValue": null,
        "description": "",
        "name": "sizes",
        "parent": {
          "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
          "name": "TypographySizeBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
            "name": "TypographySizeBlockProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
          "name": "TypographySizeBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
            "name": "TypographySizeBlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/TypographyBlocks.tsx",
    "description": "",
    "displayName": "TypographyWeightBlock",
    "methods": [],
    "props": {
      "weights": {
        "defaultValue": null,
        "description": "",
        "name": "weights",
        "parent": {
          "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
          "name": "TypographyWeightBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
            "name": "TypographyWeightBlockProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "",
        "name": "className",
        "parent": {
          "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
          "name": "TypographyWeightBlockProps"
        },
        "declarations": [
          {
            "fileName": "src/utils/Theme/blocks/TypographyBlocks.tsx",
            "name": "TypographyWeightBlockProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    }
  },
  {
    "tags": {},
    "filePath": "src/utils/Theme/blocks/TypographyBlocks.tsx",
    "description": "",
    "displayName": "TypographyBlocks",
    "methods": [],
    "props": {
      "families": {
        "defaultValue": null,
        "description": "",
        "name": "families",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "sizes": {
        "defaultValue": null,
        "description": "",
        "name": "sizes",
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "weights": {
        "defaultValue": null,
        "description": "",
        "name": "weights",
        "required": true,
        "type": {
          "name": "any"
        }
      }
    }
  }
]